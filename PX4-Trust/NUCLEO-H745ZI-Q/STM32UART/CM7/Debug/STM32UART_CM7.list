
STM32UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dc8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070ec  080070ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f4  080070f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080070fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  24000074  08007170  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000548  08007170  00020548  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e105  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003461  00000000  00000000  0003e1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00041608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  000424f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000392ba  00000000  00000000  000432f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001364b  00000000  00000000  0007c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177e60  00000000  00000000  0008fbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00207a55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004218  00000000  00000000  00207aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007050 	.word	0x08007050

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08007050 	.word	0x08007050

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b092      	sub	sp, #72	; 0x48
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <main+0xc8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	647a      	str	r2, [r7, #68]	; 0x44
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 f99f 	bl	8000b18 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fb47 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f851 	bl	8000884 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <main+0xc8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	4a22      	ldr	r2, [pc, #136]	; (8000874 <main+0xc8>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <main+0xc8>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007fc:	623b      	str	r3, [r7, #32]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 fc17 	bl	8002034 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f001 fc2d 	bl	8002068 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <main+0xc8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	647a      	str	r2, [r7, #68]	; 0x44
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 f971 	bl	8000b18 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f927 	bl	8000a88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083a:	f000 f8a7 	bl	800098c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800083e:	f000 f8f1 	bl	8000a24 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	  char buf[30];

	  memset(buf, 0, sizeof(buf));
 8000842:	463b      	mov	r3, r7
 8000844:	221e      	movs	r2, #30
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f005 ffcb 	bl	80067e4 <memset>
	  sprintf(buf, "%s\r\n", "Hello World!!");
 800084e:	463b      	mov	r3, r7
 8000850:	4a09      	ldr	r2, [pc, #36]	; (8000878 <main+0xcc>)
 8000852:	490a      	ldr	r1, [pc, #40]	; (800087c <main+0xd0>)
 8000854:	4618      	mov	r0, r3
 8000856:	f005 ffcd 	bl	80067f4 <siprintf>

	  //Transmit: Polling Mode, Transmit_IT: Interrupt, Transmit_DMA: DMA
	  HAL_UART_Transmit(&huart3, buf, sizeof(buf), 0xFFFF);
 800085a:	4639      	mov	r1, r7
 800085c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000860:	221e      	movs	r2, #30
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <main+0xd4>)
 8000864:	f004 f914 	bl	8004a90 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f000 fb90 	bl	8000f90 <HAL_Delay>
  {
 8000870:	e7e7      	b.n	8000842 <main+0x96>
 8000872:	bf00      	nop
 8000874:	58024400 	.word	0x58024400
 8000878:	08007068 	.word	0x08007068
 800087c:	08007078 	.word	0x08007078
 8000880:	2400009c 	.word	0x2400009c

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 ffa6 	bl	80067e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 ffa0 	bl	80067e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a4:	2004      	movs	r0, #4
 80008a6:	f001 fd3b 	bl	8002320 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <SystemClock_Config+0xfc>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a33      	ldr	r2, [pc, #204]	; (8000980 <SystemClock_Config+0xfc>)
 80008b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <SystemClock_Config+0xfc>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <SystemClock_Config+0x100>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	4a2e      	ldr	r2, [pc, #184]	; (8000984 <SystemClock_Config+0x100>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <SystemClock_Config+0x100>)
 80008d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <SystemClock_Config+0xfc>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <SystemClock_Config+0x104>)
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	f023 0303 	bic.w	r3, r3, #3
 80008f4:	4a24      	ldr	r2, [pc, #144]	; (8000988 <SystemClock_Config+0x104>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000900:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	2302      	movs	r3, #2
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000912:	2378      	movs	r3, #120	; 0x78
 8000914:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000922:	230c      	movs	r3, #12
 8000924:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000926:	2300      	movs	r3, #0
 8000928:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fd5e 	bl	80023f4 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800093e:	f000 f8eb 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	233f      	movs	r3, #63	; 0x3f
 8000944:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2303      	movs	r3, #3
 8000948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800094e:	2308      	movs	r3, #8
 8000950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000956:	2340      	movs	r3, #64	; 0x40
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000960:	2340      	movs	r3, #64	; 0x40
 8000962:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2104      	movs	r1, #4
 8000968:	4618      	mov	r0, r3
 800096a:	f002 f953 	bl	8002c14 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000974:	f000 f8d0 	bl	8000b18 <Error_Handler>
  }
}
 8000978:	bf00      	nop
 800097a:	3770      	adds	r7, #112	; 0x70
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	58024800 	.word	0x58024800
 8000984:	58000400 	.word	0x58000400
 8000988:	58024400 	.word	0x58024400

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <MX_USART3_UART_Init+0x94>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009d6:	f004 f80b 	bl	80049f0 <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 f89a 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009e8:	f005 fb49 	bl	800607e <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009f2:	f000 f891 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009fa:	f005 fb7e 	bl	80060fa <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f888 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 8000a0a:	f005 faff 	bl	800600c <HAL_UARTEx_DisableFifoMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 f880 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2400009c 	.word	0x2400009c
 8000a20:	40004800 	.word	0x40004800

08000a24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a30:	2209      	movs	r2, #9
 8000a32:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6c:	f001 fb10 	bl	8002090 <HAL_PCD_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a76:	f000 f84f 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2400012c 	.word	0x2400012c
 8000a84:	40080000 	.word	0x40080000

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	58024400 	.word	0x58024400

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_MspInit+0x30>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x30>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	58024400 	.word	0x58024400

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0b8      	sub	sp, #224	; 0xe0
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	22bc      	movs	r2, #188	; 0xbc
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 fe33 	bl	80067e4 <memset>
  if(huart->Instance==USART3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <HAL_UART_MspInit+0xd0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d14a      	bne.n	8000c1e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fbc8 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ba2:	f7ff ffb9 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_UART_MspInit+0xd4>)
 8000ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_UART_MspInit+0xd4>)
 8000bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_UART_MspInit+0xd4>)
 8000bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_UART_MspInit+0xd4>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_UART_MspInit+0xd4>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0xd4>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000be2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c06:	4619      	mov	r1, r3
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <HAL_UART_MspInit+0xd8>)
 8000c0a:	f001 f863 	bl	8001cd4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2027      	movs	r0, #39	; 0x27
 8000c14:	f000 fac7 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c18:	2027      	movs	r0, #39	; 0x27
 8000c1a:	f000 fade 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	37e0      	adds	r7, #224	; 0xe0
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020c00 	.word	0x58020c00

08000c34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0b8      	sub	sp, #224	; 0xe0
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	22bc      	movs	r2, #188	; 0xbc
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 fdc5 	bl	80067e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a36      	ldr	r2, [pc, #216]	; (8000d38 <HAL_PCD_MspInit+0x104>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d165      	bne.n	8000d30 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000c6e:	2318      	movs	r3, #24
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000c76:	2304      	movs	r3, #4
 8000c78:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000c7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c82:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000c88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fb49 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000ca0:	f7ff ff3a 	bl	8000b18 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000ca4:	f001 fb96 	bl	80023d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <HAL_PCD_MspInit+0x108>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <HAL_PCD_MspInit+0x108>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <HAL_PCD_MspInit+0x108>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000cc6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000cca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cea:	4619      	mov	r1, r3
 8000cec:	4814      	ldr	r0, [pc, #80]	; (8000d40 <HAL_PCD_MspInit+0x10c>)
 8000cee:	f000 fff1 	bl	8001cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <HAL_PCD_MspInit+0x10c>)
 8000d0e:	f000 ffe1 	bl	8001cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_PCD_MspInit+0x108>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_PCD_MspInit+0x108>)
 8000d1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_PCD_MspInit+0x108>)
 8000d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	37e0      	adds	r7, #224	; 0xe0
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40080000 	.word	0x40080000
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020000 	.word	0x58020000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f8de 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <USART3_IRQHandler+0x10>)
 8000d9e:	f003 ff0d 	bl	8004bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2400009c 	.word	0x2400009c

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f005 fcd8 	bl	8006790 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	24040000 	.word	0x24040000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	24000090 	.word	0x24000090
 8000e14:	24000548 	.word	0x24000548

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f7ff fc2c 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f005 fca9 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fcaf 	bl	80007ac <main>
  bx  lr
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000e54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e58:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000e5c:	080070fc 	.word	0x080070fc
  ldr r2, =_sbss
 8000e60:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000e64:	24000548 	.word	0x24000548

08000e68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC3_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 f98c 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e78:	f002 f882 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_Init+0x68>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	4913      	ldr	r1, [pc, #76]	; (8000ed8 <HAL_Init+0x6c>)
 8000e8a:	5ccb      	ldrb	r3, [r1, r3]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	fa22 f303 	lsr.w	r3, r2, r3
 8000e94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_Init+0x68>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_Init+0x6c>)
 8000ea0:	5cd3      	ldrb	r3, [r2, r3]
 8000ea2:	f003 031f 	and.w	r3, r3, #31
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_Init+0x70>)
 8000eae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <HAL_Init+0x74>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f814 	bl	8000ee4 <HAL_InitTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e002      	b.n	8000ecc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec6:	f7ff fe2d 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	08007080 	.word	0x08007080
 8000edc:	24000004 	.word	0x24000004
 8000ee0:	24000000 	.word	0x24000000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_InitTick+0x60>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e021      	b.n	8000f3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_InitTick+0x64>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_InitTick+0x60>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f971 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f93b 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x68>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2400000c 	.word	0x2400000c
 8000f48:	24000000 	.word	0x24000000
 8000f4c:	24000008 	.word	0x24000008

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2400000c 	.word	0x2400000c
 8000f74:	24000534 	.word	0x24000534

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	24000534 	.word	0x24000534

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2400000c 	.word	0x2400000c

08000fd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetREVID+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	5c001000 	.word	0x5c001000

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <__NVIC_SetPriorityGrouping+0x40>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	4313      	orrs	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x40>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	05fa0000 	.word	0x05fa0000

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff40 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff90 	bl	80010e4 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5f 	bl	8001090 <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff33 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa4 	bl	800114c <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff feae 	bl	8000f78 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2dc      	b.n	80017e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d008      	beq.n	8001246 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e2cd      	b.n	80017e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a76      	ldr	r2, [pc, #472]	; (8001424 <HAL_DMA_Abort+0x214>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d04a      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a74      	ldr	r2, [pc, #464]	; (8001428 <HAL_DMA_Abort+0x218>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d045      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a73      	ldr	r2, [pc, #460]	; (800142c <HAL_DMA_Abort+0x21c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d040      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a71      	ldr	r2, [pc, #452]	; (8001430 <HAL_DMA_Abort+0x220>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d03b      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a70      	ldr	r2, [pc, #448]	; (8001434 <HAL_DMA_Abort+0x224>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d036      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6e      	ldr	r2, [pc, #440]	; (8001438 <HAL_DMA_Abort+0x228>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d031      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6d      	ldr	r2, [pc, #436]	; (800143c <HAL_DMA_Abort+0x22c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d02c      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6b      	ldr	r2, [pc, #428]	; (8001440 <HAL_DMA_Abort+0x230>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d027      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6a      	ldr	r2, [pc, #424]	; (8001444 <HAL_DMA_Abort+0x234>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d022      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a68      	ldr	r2, [pc, #416]	; (8001448 <HAL_DMA_Abort+0x238>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01d      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a67      	ldr	r2, [pc, #412]	; (800144c <HAL_DMA_Abort+0x23c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d018      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_DMA_Abort+0x240>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a64      	ldr	r2, [pc, #400]	; (8001454 <HAL_DMA_Abort+0x244>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00e      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a62      	ldr	r2, [pc, #392]	; (8001458 <HAL_DMA_Abort+0x248>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d009      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a61      	ldr	r2, [pc, #388]	; (800145c <HAL_DMA_Abort+0x24c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d004      	beq.n	80012e6 <HAL_DMA_Abort+0xd6>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a5f      	ldr	r2, [pc, #380]	; (8001460 <HAL_DMA_Abort+0x250>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_DMA_Abort+0xda>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_DMA_Abort+0xdc>
 80012ea:	2300      	movs	r3, #0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 021e 	bic.w	r2, r2, #30
 80012fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800130e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e00a      	b.n	800132e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 020e 	bic.w	r2, r2, #14
 8001326:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3c      	ldr	r2, [pc, #240]	; (8001424 <HAL_DMA_Abort+0x214>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d072      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a3a      	ldr	r2, [pc, #232]	; (8001428 <HAL_DMA_Abort+0x218>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d06d      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a39      	ldr	r2, [pc, #228]	; (800142c <HAL_DMA_Abort+0x21c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d068      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a37      	ldr	r2, [pc, #220]	; (8001430 <HAL_DMA_Abort+0x220>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d063      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a36      	ldr	r2, [pc, #216]	; (8001434 <HAL_DMA_Abort+0x224>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d05e      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a34      	ldr	r2, [pc, #208]	; (8001438 <HAL_DMA_Abort+0x228>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d059      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a33      	ldr	r2, [pc, #204]	; (800143c <HAL_DMA_Abort+0x22c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d054      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a31      	ldr	r2, [pc, #196]	; (8001440 <HAL_DMA_Abort+0x230>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d04f      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_DMA_Abort+0x234>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d04a      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_DMA_Abort+0x238>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d045      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2d      	ldr	r2, [pc, #180]	; (800144c <HAL_DMA_Abort+0x23c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d040      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <HAL_DMA_Abort+0x240>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d03b      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <HAL_DMA_Abort+0x244>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d036      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_DMA_Abort+0x248>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d031      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_DMA_Abort+0x24c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d02c      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	; (8001460 <HAL_DMA_Abort+0x250>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d027      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_DMA_Abort+0x254>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d022      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_DMA_Abort+0x258>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01d      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_DMA_Abort+0x25c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d018      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <HAL_DMA_Abort+0x260>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <HAL_DMA_Abort+0x264>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00e      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_DMA_Abort+0x268>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d009      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1b      	ldr	r2, [pc, #108]	; (800147c <HAL_DMA_Abort+0x26c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d004      	beq.n	800141e <HAL_DMA_Abort+0x20e>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_DMA_Abort+0x270>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d132      	bne.n	8001484 <HAL_DMA_Abort+0x274>
 800141e:	2301      	movs	r3, #1
 8001420:	e031      	b.n	8001486 <HAL_DMA_Abort+0x276>
 8001422:	bf00      	nop
 8001424:	40020010 	.word	0x40020010
 8001428:	40020028 	.word	0x40020028
 800142c:	40020040 	.word	0x40020040
 8001430:	40020058 	.word	0x40020058
 8001434:	40020070 	.word	0x40020070
 8001438:	40020088 	.word	0x40020088
 800143c:	400200a0 	.word	0x400200a0
 8001440:	400200b8 	.word	0x400200b8
 8001444:	40020410 	.word	0x40020410
 8001448:	40020428 	.word	0x40020428
 800144c:	40020440 	.word	0x40020440
 8001450:	40020458 	.word	0x40020458
 8001454:	40020470 	.word	0x40020470
 8001458:	40020488 	.word	0x40020488
 800145c:	400204a0 	.word	0x400204a0
 8001460:	400204b8 	.word	0x400204b8
 8001464:	58025408 	.word	0x58025408
 8001468:	5802541c 	.word	0x5802541c
 800146c:	58025430 	.word	0x58025430
 8001470:	58025444 	.word	0x58025444
 8001474:	58025458 	.word	0x58025458
 8001478:	5802546c 	.word	0x5802546c
 800147c:	58025480 	.word	0x58025480
 8001480:	58025494 	.word	0x58025494
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001498:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6d      	ldr	r2, [pc, #436]	; (8001654 <HAL_DMA_Abort+0x444>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d04a      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a6b      	ldr	r2, [pc, #428]	; (8001658 <HAL_DMA_Abort+0x448>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d045      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6a      	ldr	r2, [pc, #424]	; (800165c <HAL_DMA_Abort+0x44c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d040      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a68      	ldr	r2, [pc, #416]	; (8001660 <HAL_DMA_Abort+0x450>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d03b      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a67      	ldr	r2, [pc, #412]	; (8001664 <HAL_DMA_Abort+0x454>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d036      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_DMA_Abort+0x458>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d031      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a64      	ldr	r2, [pc, #400]	; (800166c <HAL_DMA_Abort+0x45c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d02c      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a62      	ldr	r2, [pc, #392]	; (8001670 <HAL_DMA_Abort+0x460>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d027      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a61      	ldr	r2, [pc, #388]	; (8001674 <HAL_DMA_Abort+0x464>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d022      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5f      	ldr	r2, [pc, #380]	; (8001678 <HAL_DMA_Abort+0x468>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01d      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a5e      	ldr	r2, [pc, #376]	; (800167c <HAL_DMA_Abort+0x46c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d018      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <HAL_DMA_Abort+0x470>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a5b      	ldr	r2, [pc, #364]	; (8001684 <HAL_DMA_Abort+0x474>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00e      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a59      	ldr	r2, [pc, #356]	; (8001688 <HAL_DMA_Abort+0x478>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d009      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_DMA_Abort+0x47c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d004      	beq.n	800153a <HAL_DMA_Abort+0x32a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_DMA_Abort+0x480>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d108      	bne.n	800154c <HAL_DMA_Abort+0x33c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e007      	b.n	800155c <HAL_DMA_Abort+0x34c>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800155c:	e013      	b.n	8001586 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800155e:	f7ff fd0b 	bl	8000f78 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b05      	cmp	r3, #5
 800156a:	d90c      	bls.n	8001586 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e12d      	b.n	80017e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1e5      	bne.n	800155e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <HAL_DMA_Abort+0x444>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d04a      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <HAL_DMA_Abort+0x448>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d045      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <HAL_DMA_Abort+0x44c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d040      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <HAL_DMA_Abort+0x450>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d03b      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a29      	ldr	r2, [pc, #164]	; (8001664 <HAL_DMA_Abort+0x454>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d036      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a27      	ldr	r2, [pc, #156]	; (8001668 <HAL_DMA_Abort+0x458>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d031      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_DMA_Abort+0x45c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d02c      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a24      	ldr	r2, [pc, #144]	; (8001670 <HAL_DMA_Abort+0x460>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d027      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a23      	ldr	r2, [pc, #140]	; (8001674 <HAL_DMA_Abort+0x464>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a21      	ldr	r2, [pc, #132]	; (8001678 <HAL_DMA_Abort+0x468>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01d      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a20      	ldr	r2, [pc, #128]	; (800167c <HAL_DMA_Abort+0x46c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <HAL_DMA_Abort+0x470>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_DMA_Abort+0x474>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00e      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <HAL_DMA_Abort+0x478>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d009      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_DMA_Abort+0x47c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d004      	beq.n	8001632 <HAL_DMA_Abort+0x422>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_DMA_Abort+0x480>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_DMA_Abort+0x426>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_DMA_Abort+0x428>
 8001636:	2300      	movs	r3, #0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d02b      	beq.n	8001694 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	223f      	movs	r2, #63	; 0x3f
 800164c:	409a      	lsls	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	e02a      	b.n	80016aa <HAL_DMA_Abort+0x49a>
 8001654:	40020010 	.word	0x40020010
 8001658:	40020028 	.word	0x40020028
 800165c:	40020040 	.word	0x40020040
 8001660:	40020058 	.word	0x40020058
 8001664:	40020070 	.word	0x40020070
 8001668:	40020088 	.word	0x40020088
 800166c:	400200a0 	.word	0x400200a0
 8001670:	400200b8 	.word	0x400200b8
 8001674:	40020410 	.word	0x40020410
 8001678:	40020428 	.word	0x40020428
 800167c:	40020440 	.word	0x40020440
 8001680:	40020458 	.word	0x40020458
 8001684:	40020470 	.word	0x40020470
 8001688:	40020488 	.word	0x40020488
 800168c:	400204a0 	.word	0x400204a0
 8001690:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2201      	movs	r2, #1
 80016a4:	409a      	lsls	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_DMA_Abort+0x5dc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d072      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <HAL_DMA_Abort+0x5e0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d06d      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_DMA_Abort+0x5e4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d068      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a4a      	ldr	r2, [pc, #296]	; (80017f8 <HAL_DMA_Abort+0x5e8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d063      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a49      	ldr	r2, [pc, #292]	; (80017fc <HAL_DMA_Abort+0x5ec>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d05e      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a47      	ldr	r2, [pc, #284]	; (8001800 <HAL_DMA_Abort+0x5f0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d059      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a46      	ldr	r2, [pc, #280]	; (8001804 <HAL_DMA_Abort+0x5f4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d054      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <HAL_DMA_Abort+0x5f8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d04f      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a43      	ldr	r2, [pc, #268]	; (800180c <HAL_DMA_Abort+0x5fc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04a      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a41      	ldr	r2, [pc, #260]	; (8001810 <HAL_DMA_Abort+0x600>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d045      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a40      	ldr	r2, [pc, #256]	; (8001814 <HAL_DMA_Abort+0x604>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d040      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a3e      	ldr	r2, [pc, #248]	; (8001818 <HAL_DMA_Abort+0x608>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d03b      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <HAL_DMA_Abort+0x60c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d036      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_DMA_Abort+0x610>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d031      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <HAL_DMA_Abort+0x614>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d02c      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HAL_DMA_Abort+0x618>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d027      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <HAL_DMA_Abort+0x61c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a35      	ldr	r2, [pc, #212]	; (8001830 <HAL_DMA_Abort+0x620>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01d      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_DMA_Abort+0x624>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d018      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a32      	ldr	r2, [pc, #200]	; (8001838 <HAL_DMA_Abort+0x628>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a31      	ldr	r2, [pc, #196]	; (800183c <HAL_DMA_Abort+0x62c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00e      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <HAL_DMA_Abort+0x630>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2e      	ldr	r2, [pc, #184]	; (8001844 <HAL_DMA_Abort+0x634>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_DMA_Abort+0x58a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2c      	ldr	r2, [pc, #176]	; (8001848 <HAL_DMA_Abort+0x638>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_DMA_Abort+0x58e>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_DMA_Abort+0x590>
 800179e:	2300      	movs	r3, #0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00c      	beq.n	80017d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80017ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40020010 	.word	0x40020010
 80017f0:	40020028 	.word	0x40020028
 80017f4:	40020040 	.word	0x40020040
 80017f8:	40020058 	.word	0x40020058
 80017fc:	40020070 	.word	0x40020070
 8001800:	40020088 	.word	0x40020088
 8001804:	400200a0 	.word	0x400200a0
 8001808:	400200b8 	.word	0x400200b8
 800180c:	40020410 	.word	0x40020410
 8001810:	40020428 	.word	0x40020428
 8001814:	40020440 	.word	0x40020440
 8001818:	40020458 	.word	0x40020458
 800181c:	40020470 	.word	0x40020470
 8001820:	40020488 	.word	0x40020488
 8001824:	400204a0 	.word	0x400204a0
 8001828:	400204b8 	.word	0x400204b8
 800182c:	58025408 	.word	0x58025408
 8001830:	5802541c 	.word	0x5802541c
 8001834:	58025430 	.word	0x58025430
 8001838:	58025444 	.word	0x58025444
 800183c:	58025458 	.word	0x58025458
 8001840:	5802546c 	.word	0x5802546c
 8001844:	58025480 	.word	0x58025480
 8001848:	58025494 	.word	0x58025494

0800184c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e205      	b.n	8001c6a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d004      	beq.n	8001874 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e1fa      	b.n	8001c6a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a8c      	ldr	r2, [pc, #560]	; (8001aac <HAL_DMA_Abort_IT+0x260>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d04a      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a8b      	ldr	r2, [pc, #556]	; (8001ab0 <HAL_DMA_Abort_IT+0x264>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d045      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a89      	ldr	r2, [pc, #548]	; (8001ab4 <HAL_DMA_Abort_IT+0x268>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d040      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a88      	ldr	r2, [pc, #544]	; (8001ab8 <HAL_DMA_Abort_IT+0x26c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d03b      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a86      	ldr	r2, [pc, #536]	; (8001abc <HAL_DMA_Abort_IT+0x270>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d036      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a85      	ldr	r2, [pc, #532]	; (8001ac0 <HAL_DMA_Abort_IT+0x274>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d031      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a83      	ldr	r2, [pc, #524]	; (8001ac4 <HAL_DMA_Abort_IT+0x278>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02c      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a82      	ldr	r2, [pc, #520]	; (8001ac8 <HAL_DMA_Abort_IT+0x27c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d027      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a80      	ldr	r2, [pc, #512]	; (8001acc <HAL_DMA_Abort_IT+0x280>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d022      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a7f      	ldr	r2, [pc, #508]	; (8001ad0 <HAL_DMA_Abort_IT+0x284>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d01d      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a7d      	ldr	r2, [pc, #500]	; (8001ad4 <HAL_DMA_Abort_IT+0x288>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d018      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a7c      	ldr	r2, [pc, #496]	; (8001ad8 <HAL_DMA_Abort_IT+0x28c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a7a      	ldr	r2, [pc, #488]	; (8001adc <HAL_DMA_Abort_IT+0x290>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00e      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a79      	ldr	r2, [pc, #484]	; (8001ae0 <HAL_DMA_Abort_IT+0x294>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d009      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a77      	ldr	r2, [pc, #476]	; (8001ae4 <HAL_DMA_Abort_IT+0x298>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a76      	ldr	r2, [pc, #472]	; (8001ae8 <HAL_DMA_Abort_IT+0x29c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_DMA_Abort_IT+0xcc>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_DMA_Abort_IT+0xce>
 8001918:	2300      	movs	r3, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d065      	beq.n	80019ea <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a60      	ldr	r2, [pc, #384]	; (8001aac <HAL_DMA_Abort_IT+0x260>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d04a      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_DMA_Abort_IT+0x264>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d045      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <HAL_DMA_Abort_IT+0x268>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d040      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5b      	ldr	r2, [pc, #364]	; (8001ab8 <HAL_DMA_Abort_IT+0x26c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d03b      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_DMA_Abort_IT+0x270>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d036      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_DMA_Abort_IT+0x274>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d031      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <HAL_DMA_Abort_IT+0x278>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d02c      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <HAL_DMA_Abort_IT+0x27c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d027      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a54      	ldr	r2, [pc, #336]	; (8001acc <HAL_DMA_Abort_IT+0x280>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d022      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_DMA_Abort_IT+0x284>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d01d      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_DMA_Abort_IT+0x288>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d018      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4f      	ldr	r2, [pc, #316]	; (8001ad8 <HAL_DMA_Abort_IT+0x28c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a4e      	ldr	r2, [pc, #312]	; (8001adc <HAL_DMA_Abort_IT+0x290>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00e      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_DMA_Abort_IT+0x294>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d009      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <HAL_DMA_Abort_IT+0x298>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d004      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x17a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <HAL_DMA_Abort_IT+0x29c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d108      	bne.n	80019d8 <HAL_DMA_Abort_IT+0x18c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e147      	b.n	8001c68 <HAL_DMA_Abort_IT+0x41c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e13e      	b.n	8001c68 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 020e 	bic.w	r2, r2, #14
 80019f8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a2b      	ldr	r2, [pc, #172]	; (8001aac <HAL_DMA_Abort_IT+0x260>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d04a      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a29      	ldr	r2, [pc, #164]	; (8001ab0 <HAL_DMA_Abort_IT+0x264>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d045      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <HAL_DMA_Abort_IT+0x268>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d040      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <HAL_DMA_Abort_IT+0x26c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d03b      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_DMA_Abort_IT+0x270>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d036      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <HAL_DMA_Abort_IT+0x274>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d031      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <HAL_DMA_Abort_IT+0x278>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d02c      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <HAL_DMA_Abort_IT+0x27c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d027      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_DMA_Abort_IT+0x280>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d022      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_DMA_Abort_IT+0x284>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01d      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_DMA_Abort_IT+0x288>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d018      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_DMA_Abort_IT+0x28c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_DMA_Abort_IT+0x290>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d00e      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_DMA_Abort_IT+0x294>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d009      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <HAL_DMA_Abort_IT+0x298>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x24e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_DMA_Abort_IT+0x29c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d128      	bne.n	8001aec <HAL_DMA_Abort_IT+0x2a0>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e027      	b.n	8001afc <HAL_DMA_Abort_IT+0x2b0>
 8001aac:	40020010 	.word	0x40020010
 8001ab0:	40020028 	.word	0x40020028
 8001ab4:	40020040 	.word	0x40020040
 8001ab8:	40020058 	.word	0x40020058
 8001abc:	40020070 	.word	0x40020070
 8001ac0:	40020088 	.word	0x40020088
 8001ac4:	400200a0 	.word	0x400200a0
 8001ac8:	400200b8 	.word	0x400200b8
 8001acc:	40020410 	.word	0x40020410
 8001ad0:	40020428 	.word	0x40020428
 8001ad4:	40020440 	.word	0x40020440
 8001ad8:	40020458 	.word	0x40020458
 8001adc:	40020470 	.word	0x40020470
 8001ae0:	40020488 	.word	0x40020488
 8001ae4:	400204a0 	.word	0x400204a0
 8001ae8:	400204b8 	.word	0x400204b8
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a5c      	ldr	r2, [pc, #368]	; (8001c74 <HAL_DMA_Abort_IT+0x428>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d072      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a5b      	ldr	r2, [pc, #364]	; (8001c78 <HAL_DMA_Abort_IT+0x42c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d06d      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <HAL_DMA_Abort_IT+0x430>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d068      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_DMA_Abort_IT+0x434>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d063      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a56      	ldr	r2, [pc, #344]	; (8001c84 <HAL_DMA_Abort_IT+0x438>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d05e      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a55      	ldr	r2, [pc, #340]	; (8001c88 <HAL_DMA_Abort_IT+0x43c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d059      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a53      	ldr	r2, [pc, #332]	; (8001c8c <HAL_DMA_Abort_IT+0x440>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d054      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <HAL_DMA_Abort_IT+0x444>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04f      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a50      	ldr	r2, [pc, #320]	; (8001c94 <HAL_DMA_Abort_IT+0x448>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d04a      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a4f      	ldr	r2, [pc, #316]	; (8001c98 <HAL_DMA_Abort_IT+0x44c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d045      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4d      	ldr	r2, [pc, #308]	; (8001c9c <HAL_DMA_Abort_IT+0x450>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d040      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a4c      	ldr	r2, [pc, #304]	; (8001ca0 <HAL_DMA_Abort_IT+0x454>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d03b      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4a      	ldr	r2, [pc, #296]	; (8001ca4 <HAL_DMA_Abort_IT+0x458>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d036      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <HAL_DMA_Abort_IT+0x45c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d031      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_DMA_Abort_IT+0x460>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d02c      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a46      	ldr	r2, [pc, #280]	; (8001cb0 <HAL_DMA_Abort_IT+0x464>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d027      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a44      	ldr	r2, [pc, #272]	; (8001cb4 <HAL_DMA_Abort_IT+0x468>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d022      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a43      	ldr	r2, [pc, #268]	; (8001cb8 <HAL_DMA_Abort_IT+0x46c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d01d      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a41      	ldr	r2, [pc, #260]	; (8001cbc <HAL_DMA_Abort_IT+0x470>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d018      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a40      	ldr	r2, [pc, #256]	; (8001cc0 <HAL_DMA_Abort_IT+0x474>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3e      	ldr	r2, [pc, #248]	; (8001cc4 <HAL_DMA_Abort_IT+0x478>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00e      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3d      	ldr	r2, [pc, #244]	; (8001cc8 <HAL_DMA_Abort_IT+0x47c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3b      	ldr	r2, [pc, #236]	; (8001ccc <HAL_DMA_Abort_IT+0x480>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d004      	beq.n	8001bec <HAL_DMA_Abort_IT+0x3a0>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <HAL_DMA_Abort_IT+0x484>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_DMA_Abort_IT+0x3a4>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_DMA_Abort_IT+0x3a6>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d028      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40020010 	.word	0x40020010
 8001c78:	40020028 	.word	0x40020028
 8001c7c:	40020040 	.word	0x40020040
 8001c80:	40020058 	.word	0x40020058
 8001c84:	40020070 	.word	0x40020070
 8001c88:	40020088 	.word	0x40020088
 8001c8c:	400200a0 	.word	0x400200a0
 8001c90:	400200b8 	.word	0x400200b8
 8001c94:	40020410 	.word	0x40020410
 8001c98:	40020428 	.word	0x40020428
 8001c9c:	40020440 	.word	0x40020440
 8001ca0:	40020458 	.word	0x40020458
 8001ca4:	40020470 	.word	0x40020470
 8001ca8:	40020488 	.word	0x40020488
 8001cac:	400204a0 	.word	0x400204a0
 8001cb0:	400204b8 	.word	0x400204b8
 8001cb4:	58025408 	.word	0x58025408
 8001cb8:	5802541c 	.word	0x5802541c
 8001cbc:	58025430 	.word	0x58025430
 8001cc0:	58025444 	.word	0x58025444
 8001cc4:	58025458 	.word	0x58025458
 8001cc8:	5802546c 	.word	0x5802546c
 8001ccc:	58025480 	.word	0x58025480
 8001cd0:	58025494 	.word	0x58025494

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ce2:	4b89      	ldr	r3, [pc, #548]	; (8001f08 <HAL_GPIO_Init+0x234>)
 8001ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ce6:	e194      	b.n	8002012 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2101      	movs	r1, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8186 	beq.w	800200c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d00b      	beq.n	8001d20 <HAL_GPIO_Init+0x4c>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d007      	beq.n	8001d20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d14:	2b11      	cmp	r3, #17
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d130      	bne.n	8001d82 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d56:	2201      	movs	r2, #1
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 0201 	and.w	r2, r3, #1
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0xee>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b12      	cmp	r3, #18
 8001dc0:	d123      	bne.n	8001e0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	69b9      	ldr	r1, [r7, #24]
 8001e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0203 	and.w	r2, r3, #3
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80e0 	beq.w	800200c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <HAL_GPIO_Init+0x238>)
 8001e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e52:	4a2e      	ldr	r2, [pc, #184]	; (8001f0c <HAL_GPIO_Init+0x238>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_GPIO_Init+0x238>)
 8001e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6a:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <HAL_GPIO_Init+0x23c>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <HAL_GPIO_Init+0x240>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d052      	beq.n	8001f3c <HAL_GPIO_Init+0x268>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_GPIO_Init+0x244>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d031      	beq.n	8001f02 <HAL_GPIO_Init+0x22e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_GPIO_Init+0x248>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x22a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_GPIO_Init+0x24c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x226>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_GPIO_Init+0x250>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x222>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_GPIO_Init+0x254>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x21e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_GPIO_Init+0x258>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x21a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_GPIO_Init+0x25c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x216>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_GPIO_Init+0x260>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x212>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_GPIO_Init+0x264>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001ede:	2309      	movs	r3, #9
 8001ee0:	e02d      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	e02b      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e029      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001eea:	2307      	movs	r3, #7
 8001eec:	e027      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e025      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e023      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e021      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e01f      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e01d      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e01b      	b.n	8001f3e <HAL_GPIO_Init+0x26a>
 8001f06:	bf00      	nop
 8001f08:	58000080 	.word	0x58000080
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	58000400 	.word	0x58000400
 8001f14:	58020000 	.word	0x58020000
 8001f18:	58020400 	.word	0x58020400
 8001f1c:	58020800 	.word	0x58020800
 8001f20:	58020c00 	.word	0x58020c00
 8001f24:	58021000 	.word	0x58021000
 8001f28:	58021400 	.word	0x58021400
 8001f2c:	58021800 	.word	0x58021800
 8001f30:	58021c00 	.word	0x58021c00
 8001f34:	58022000 	.word	0x58022000
 8001f38:	58022400 	.word	0x58022400
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	f002 0203 	and.w	r2, r2, #3
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	4093      	lsls	r3, r2
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f4e:	4938      	ldr	r1, [pc, #224]	; (8002030 <HAL_GPIO_Init+0x35c>)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	f47f ae63 	bne.w	8001ce8 <HAL_GPIO_Init+0x14>
  }
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	3724      	adds	r7, #36	; 0x24
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	58000400 	.word	0x58000400

08002034 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_HSEM_FastTake+0x2c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3320      	adds	r3, #32
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_HSEM_FastTake+0x30>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d101      	bne.n	8002050 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	58026400 	.word	0x58026400
 8002064:	80000300 	.word	0x80000300

08002068 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002072:	4906      	ldr	r1, [pc, #24]	; (800208c <HAL_HSEM_Release+0x24>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	58026400 	.word	0x58026400

08002090 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	b08f      	sub	sp, #60	; 0x3c
 8002094:	af0a      	add	r7, sp, #40	; 0x28
 8002096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e116      	b.n	80022d0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d106      	bne.n	80020c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7fe fdb9 	bl	8000c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2203      	movs	r2, #3
 80020c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 f905 	bl	80062f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	687e      	ldr	r6, [r7, #4]
 80020ee:	466d      	mov	r5, sp
 80020f0:	f106 0410 	add.w	r4, r6, #16
 80020f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002100:	e885 0003 	stmia.w	r5, {r0, r1}
 8002104:	1d33      	adds	r3, r6, #4
 8002106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002108:	6838      	ldr	r0, [r7, #0]
 800210a:	f004 f883 	bl	8006214 <USB_CoreInit>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d7      	b.n	80022d0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f004 f8f3 	bl	8006312 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e04a      	b.n	80021c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	333d      	adds	r3, #61	; 0x3d
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	333c      	adds	r3, #60	; 0x3c
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	b298      	uxth	r0, r3
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3342      	adds	r3, #66	; 0x42
 800216e:	4602      	mov	r2, r0
 8002170:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	333f      	adds	r3, #63	; 0x3f
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3344      	adds	r3, #68	; 0x44
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3348      	adds	r3, #72	; 0x48
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3350      	adds	r3, #80	; 0x50
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3af      	bcc.n	8002132 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e044      	b.n	8002262 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d3b5      	bcc.n	80021d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	687e      	ldr	r6, [r7, #4]
 8002274:	466d      	mov	r5, sp
 8002276:	f106 0410 	add.w	r4, r6, #16
 800227a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002282:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002286:	e885 0003 	stmia.w	r5, {r0, r1}
 800228a:	1d33      	adds	r3, r6, #4
 800228c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f004 f86a 	bl	8006368 <USB_DevInit>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e014      	b.n	80022d0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f80a 	bl	80022d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f004 fa0c 	bl	80066e6 <USB_DevDisconnect>

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_PCDEx_ActivateLPM+0x44>)
 8002308:	4313      	orrs	r3, r2
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	10000003 	.word	0x10000003

08002320 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	2b06      	cmp	r3, #6
 8002332:	d00a      	beq.n	800234a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e040      	b.n	80023c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e03e      	b.n	80023c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002352:	491f      	ldr	r1, [pc, #124]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4313      	orrs	r3, r2
 8002358:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800235a:	f7fe fe0d 	bl	8000f78 <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002360:	e009      	b.n	8002376 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002362:	f7fe fe09 	bl	8000f78 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002370:	d901      	bls.n	8002376 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e028      	b.n	80023c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	d1ee      	bne.n	8002362 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b1e      	cmp	r3, #30
 8002388:	d008      	beq.n	800239c <HAL_PWREx_ConfigSupply+0x7c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b2e      	cmp	r3, #46	; 0x2e
 800238e:	d005      	beq.n	800239c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b1d      	cmp	r3, #29
 8002394:	d002      	beq.n	800239c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b2d      	cmp	r3, #45	; 0x2d
 800239a:	d114      	bne.n	80023c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800239c:	f7fe fdec 	bl	8000f78 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023a2:	e009      	b.n	80023b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023a4:	f7fe fde8 	bl	8000f78 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b2:	d901      	bls.n	80023b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e007      	b.n	80023c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d1ee      	bne.n	80023a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	58024800 	.word	0x58024800

080023d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	58024800 	.word	0x58024800

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e3ff      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002414:	4b99      	ldr	r3, [pc, #612]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800241e:	4b97      	ldr	r3, [pc, #604]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	2b10      	cmp	r3, #16
 8002428:	d007      	beq.n	800243a <HAL_RCC_OscConfig+0x46>
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	2b18      	cmp	r3, #24
 800242e:	d110      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b90      	ldr	r3, [pc, #576]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d06c      	beq.n	8002520 <HAL_RCC_OscConfig+0x12c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d168      	bne.n	8002520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e3d9      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x76>
 800245c:	4b87      	ldr	r3, [pc, #540]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a86      	ldr	r2, [pc, #536]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b82      	ldr	r3, [pc, #520]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a81      	ldr	r2, [pc, #516]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b7f      	ldr	r3, [pc, #508]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7e      	ldr	r2, [pc, #504]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xbc>
 8002496:	4b79      	ldr	r3, [pc, #484]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a78      	ldr	r2, [pc, #480]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 80024b0:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a71      	ldr	r2, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fd52 	bl	8000f78 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fd4e 	bl	8000f78 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e38d      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ea:	4b64      	ldr	r3, [pc, #400]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe4>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fd3e 	bl	8000f78 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fd3a 	bl	8000f78 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e379      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002512:	4b5a      	ldr	r3, [pc, #360]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x10c>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80ae 	beq.w	800268c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002530:	4b52      	ldr	r3, [pc, #328]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002538:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253a:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_RCC_OscConfig+0x162>
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	2b18      	cmp	r3, #24
 800254a:	d13a      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1ce>
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d135      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002556:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x17a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e34b      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	f7fe fd33 	bl	8000fd8 <HAL_GetREVID>
 8002572:	4603      	mov	r3, r0
 8002574:	f241 0203 	movw	r2, #4099	; 0x1003
 8002578:	4293      	cmp	r3, r2
 800257a:	d817      	bhi.n	80025ac <HAL_RCC_OscConfig+0x1b8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d108      	bne.n	8002596 <HAL_RCC_OscConfig+0x1a2>
 8002584:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800258c:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800258e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002592:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002594:	e07a      	b.n	800268c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	031b      	lsls	r3, r3, #12
 80025a4:	4935      	ldr	r1, [pc, #212]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025aa:	e06f      	b.n	800268c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b33      	ldr	r3, [pc, #204]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	4930      	ldr	r1, [pc, #192]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c0:	e064      	b.n	800268c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d045      	beq.n	8002656 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0219 	bic.w	r2, r3, #25
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	4929      	ldr	r1, [pc, #164]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fccc 	bl	8000f78 <HAL_GetTick>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe fcc8 	bl	8000f78 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e307      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCC_OscConfig+0x288>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	f7fe fce9 	bl	8000fd8 <HAL_GetREVID>
 8002606:	4603      	mov	r3, r0
 8002608:	f241 0203 	movw	r2, #4099	; 0x1003
 800260c:	4293      	cmp	r3, r2
 800260e:	d817      	bhi.n	8002640 <HAL_RCC_OscConfig+0x24c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	d108      	bne.n	800262a <HAL_RCC_OscConfig+0x236>
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002620:	4a16      	ldr	r2, [pc, #88]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002626:	6053      	str	r3, [r2, #4]
 8002628:	e030      	b.n	800268c <HAL_RCC_OscConfig+0x298>
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	031b      	lsls	r3, r3, #12
 8002638:	4910      	ldr	r1, [pc, #64]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
 800263e:	e025      	b.n	800268c <HAL_RCC_OscConfig+0x298>
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	490b      	ldr	r1, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
 8002654:	e01a      	b.n	800268c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_OscConfig+0x288>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_RCC_OscConfig+0x288>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fc89 	bl	8000f78 <HAL_GetTick>
 8002666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266a:	f7fe fc85 	bl	8000f78 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d903      	bls.n	8002680 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e2c4      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
 800267c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002680:	4ba4      	ldr	r3, [pc, #656]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ee      	bne.n	800266a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a9 	beq.w	80027ec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269a:	4b9e      	ldr	r3, [pc, #632]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026a4:	4b9b      	ldr	r3, [pc, #620]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d007      	beq.n	80026c0 <HAL_RCC_OscConfig+0x2cc>
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b18      	cmp	r3, #24
 80026b4:	d13a      	bne.n	800272c <HAL_RCC_OscConfig+0x338>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d135      	bne.n	800272c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026c0:	4b94      	ldr	r3, [pc, #592]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x2e4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e296      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026d8:	f7fe fc7e 	bl	8000fd8 <HAL_GetREVID>
 80026dc:	4603      	mov	r3, r0
 80026de:	f241 0203 	movw	r2, #4099	; 0x1003
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d817      	bhi.n	8002716 <HAL_RCC_OscConfig+0x322>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d108      	bne.n	8002700 <HAL_RCC_OscConfig+0x30c>
 80026ee:	4b89      	ldr	r3, [pc, #548]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026f6:	4a87      	ldr	r2, [pc, #540]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80026f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026fe:	e075      	b.n	80027ec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002700:	4b84      	ldr	r3, [pc, #528]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	069b      	lsls	r3, r3, #26
 800270e:	4981      	ldr	r1, [pc, #516]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002714:	e06a      	b.n	80027ec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002716:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	497b      	ldr	r1, [pc, #492]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002726:	4313      	orrs	r3, r2
 8002728:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800272a:	e05f      	b.n	80027ec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d042      	beq.n	80027ba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002734:	4b77      	ldr	r3, [pc, #476]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a76      	ldr	r2, [pc, #472]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 800273a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fc1a 	bl	8000f78 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002748:	f7fe fc16 	bl	8000f78 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e255      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800275a:	4b6e      	ldr	r3, [pc, #440]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002766:	f7fe fc37 	bl	8000fd8 <HAL_GetREVID>
 800276a:	4603      	mov	r3, r0
 800276c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002770:	4293      	cmp	r3, r2
 8002772:	d817      	bhi.n	80027a4 <HAL_RCC_OscConfig+0x3b0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	2b20      	cmp	r3, #32
 800277a:	d108      	bne.n	800278e <HAL_RCC_OscConfig+0x39a>
 800277c:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002784:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002786:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800278a:	6053      	str	r3, [r2, #4]
 800278c:	e02e      	b.n	80027ec <HAL_RCC_OscConfig+0x3f8>
 800278e:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	069b      	lsls	r3, r3, #26
 800279c:	495d      	ldr	r1, [pc, #372]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
 80027a2:	e023      	b.n	80027ec <HAL_RCC_OscConfig+0x3f8>
 80027a4:	4b5b      	ldr	r3, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	4958      	ldr	r1, [pc, #352]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60cb      	str	r3, [r1, #12]
 80027b8:	e018      	b.n	80027ec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027ba:	4b56      	ldr	r3, [pc, #344]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a55      	ldr	r2, [pc, #340]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80027c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fbd7 	bl	8000f78 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027ce:	f7fe fbd3 	bl	8000f78 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e212      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027e0:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d036      	beq.n	8002866 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d019      	beq.n	8002834 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002800:	4b44      	ldr	r3, [pc, #272]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002804:	4a43      	ldr	r2, [pc, #268]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7fe fbb4 	bl	8000f78 <HAL_GetTick>
 8002810:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002814:	f7fe fbb0 	bl	8000f78 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1ef      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x420>
 8002832:	e018      	b.n	8002866 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002834:	4b37      	ldr	r3, [pc, #220]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	4a36      	ldr	r2, [pc, #216]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fb9a 	bl	8000f78 <HAL_GetTick>
 8002844:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fb96 	bl	8000f78 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1d5      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800285a:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d036      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a25      	ldr	r2, [pc, #148]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 8002880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002884:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002886:	f7fe fb77 	bl	8000f78 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800288e:	f7fe fb73 	bl	8000f78 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1b2      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x49a>
 80028ac:	e018      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80028b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fb5d 	bl	8000f78 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028c2:	f7fe fb59 	bl	8000f78 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e198      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <HAL_RCC_OscConfig+0x520>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8085 	beq.w	80029f8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_RCC_OscConfig+0x524>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_RCC_OscConfig+0x524>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028fa:	f7fe fb3d 	bl	8000f78 <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002900:	e00c      	b.n	800291c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7fe fb39 	bl	8000f78 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d905      	bls.n	800291c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e178      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
 8002914:	58024400 	.word	0x58024400
 8002918:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800291c:	4b96      	ldr	r3, [pc, #600]	; (8002b78 <HAL_RCC_OscConfig+0x784>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ec      	beq.n	8002902 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x54a>
 8002930:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a91      	ldr	r2, [pc, #580]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
 800293c:	e02d      	b.n	800299a <HAL_RCC_OscConfig+0x5a6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x56c>
 8002946:	4b8d      	ldr	r3, [pc, #564]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a8c      	ldr	r2, [pc, #560]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a89      	ldr	r2, [pc, #548]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
 800295e:	e01c      	b.n	800299a <HAL_RCC_OscConfig+0x5a6>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d10c      	bne.n	8002982 <HAL_RCC_OscConfig+0x58e>
 8002968:	4b84      	ldr	r3, [pc, #528]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a83      	ldr	r2, [pc, #524]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a80      	ldr	r2, [pc, #512]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
 8002980:	e00b      	b.n	800299a <HAL_RCC_OscConfig+0x5a6>
 8002982:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a7d      	ldr	r2, [pc, #500]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a7a      	ldr	r2, [pc, #488]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d015      	beq.n	80029ce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe fae9 	bl	8000f78 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fae5 	bl	8000f78 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e122      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c0:	4b6e      	ldr	r3, [pc, #440]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ee      	beq.n	80029aa <HAL_RCC_OscConfig+0x5b6>
 80029cc:	e014      	b.n	80029f8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe fad3 	bl	8000f78 <HAL_GetTick>
 80029d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe facf 	bl	8000f78 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e10c      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ec:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ee      	bne.n	80029d6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8101 	beq.w	8002c04 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a02:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a0a:	2b18      	cmp	r3, #24
 8002a0c:	f000 80bc 	beq.w	8002b88 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	f040 8095 	bne.w	8002b44 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b58      	ldr	r3, [pc, #352]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe faa7 	bl	8000f78 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe faa3 	bl	8000f78 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0e2      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a40:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a50:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <HAL_RCC_OscConfig+0x78c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	4946      	ldr	r1, [pc, #280]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	628b      	str	r3, [r1, #40]	; 0x28
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a74:	3b01      	subs	r3, #1
 8002a76:	025b      	lsls	r3, r3, #9
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	3b01      	subs	r3, #1
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a96:	4939      	ldr	r1, [pc, #228]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a9c:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4a36      	ldr	r2, [pc, #216]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aa8:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aac:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <HAL_RCC_OscConfig+0x790>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ab4:	00d2      	lsls	r2, r2, #3
 8002ab6:	4931      	ldr	r1, [pc, #196]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002abc:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f023 020c 	bic.w	r2, r3, #12
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	492c      	ldr	r1, [pc, #176]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	f023 0202 	bic.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4928      	ldr	r1, [pc, #160]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ae0:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fa2c 	bl	8000f78 <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fa28 	bl	8000f78 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x730>
 8002b42:	e05f      	b.n	8002c04 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fa12 	bl	8000f78 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fa0e 	bl	8000f78 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e04d      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6a:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <HAL_RCC_OscConfig+0x788>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x764>
 8002b76:	e045      	b.n	8002c04 <HAL_RCC_OscConfig+0x810>
 8002b78:	58024800 	.word	0x58024800
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	fffffc0c 	.word	0xfffffc0c
 8002b84:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_OscConfig+0x81c>)
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_OscConfig+0x81c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d031      	beq.n	8002c00 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0203 	and.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d12a      	bne.n	8002c00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d122      	bne.n	8002c00 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d11a      	bne.n	8002c00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	0a5b      	lsrs	r3, r3, #9
 8002bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d111      	bne.n	8002c00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d108      	bne.n	8002c00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	0e1b      	lsrs	r3, r3, #24
 8002bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3730      	adds	r7, #48	; 0x30
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400

08002c14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e19c      	b.n	8002f62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b8a      	ldr	r3, [pc, #552]	; (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 020f 	bic.w	r2, r3, #15
 8002c3e:	4985      	ldr	r1, [pc, #532]	; (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b83      	ldr	r3, [pc, #524]	; (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e184      	b.n	8002f62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	4b7b      	ldr	r3, [pc, #492]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d908      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c74:	4b78      	ldr	r3, [pc, #480]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4975      	ldr	r1, [pc, #468]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d908      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	496a      	ldr	r1, [pc, #424]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d908      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cd0:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	495e      	ldr	r1, [pc, #376]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d908      	bls.n	8002d10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cfe:	4b56      	ldr	r3, [pc, #344]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4953      	ldr	r1, [pc, #332]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d010      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d908      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d2c:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f023 020f 	bic.w	r2, r3, #15
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4947      	ldr	r1, [pc, #284]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d055      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d4a:	4b43      	ldr	r3, [pc, #268]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	4940      	ldr	r1, [pc, #256]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d64:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d121      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0f6      	b.n	8002f62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d115      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0ea      	b.n	8002f62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d94:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0de      	b.n	8002f62 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002da4:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d6      	b.n	8002f62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f023 0207 	bic.w	r2, r3, #7
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4925      	ldr	r1, [pc, #148]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe f8d7 	bl	8000f78 <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dce:	f7fe f8d3 	bl	8000f78 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0be      	b.n	8002f62 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d1eb      	bne.n	8002dce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d010      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d208      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f023 020f 	bic.w	r2, r3, #15
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	490e      	ldr	r1, [pc, #56]	; (8002e58 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d214      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 020f 	bic.w	r2, r3, #15
 8002e3a:	4906      	ldr	r1, [pc, #24]	; (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_ClockConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e086      	b.n	8002f62 <HAL_RCC_ClockConfig+0x34e>
 8002e54:	52002000 	.word	0x52002000
 8002e58:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d208      	bcs.n	8002e8a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e78:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4939      	ldr	r1, [pc, #228]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d208      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ea6:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	492e      	ldr	r1, [pc, #184]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d208      	bcs.n	8002ee6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	4922      	ldr	r1, [pc, #136]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d208      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4917      	ldr	r1, [pc, #92]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f14:	f000 f834 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	4912      	ldr	r1, [pc, #72]	; (8002f70 <HAL_RCC_ClockConfig+0x35c>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <HAL_RCC_ClockConfig+0x358>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <HAL_RCC_ClockConfig+0x35c>)
 8002f3c:	5cd3      	ldrb	r3, [r2, r3]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_RCC_ClockConfig+0x360>)
 8002f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x364>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_RCC_ClockConfig+0x368>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd ffc4 	bl	8000ee4 <HAL_InitTick>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	08007080 	.word	0x08007080
 8002f74:	24000004 	.word	0x24000004
 8002f78:	24000000 	.word	0x24000000
 8002f7c:	24000008 	.word	0x24000008

08002f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f86:	4bb3      	ldr	r3, [pc, #716]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8e:	2b18      	cmp	r3, #24
 8002f90:	f200 8155 	bhi.w	800323e <HAL_RCC_GetSysClockFreq+0x2be>
 8002f94:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08003001 	.word	0x08003001
 8002fa0:	0800323f 	.word	0x0800323f
 8002fa4:	0800323f 	.word	0x0800323f
 8002fa8:	0800323f 	.word	0x0800323f
 8002fac:	0800323f 	.word	0x0800323f
 8002fb0:	0800323f 	.word	0x0800323f
 8002fb4:	0800323f 	.word	0x0800323f
 8002fb8:	0800323f 	.word	0x0800323f
 8002fbc:	08003027 	.word	0x08003027
 8002fc0:	0800323f 	.word	0x0800323f
 8002fc4:	0800323f 	.word	0x0800323f
 8002fc8:	0800323f 	.word	0x0800323f
 8002fcc:	0800323f 	.word	0x0800323f
 8002fd0:	0800323f 	.word	0x0800323f
 8002fd4:	0800323f 	.word	0x0800323f
 8002fd8:	0800323f 	.word	0x0800323f
 8002fdc:	0800302d 	.word	0x0800302d
 8002fe0:	0800323f 	.word	0x0800323f
 8002fe4:	0800323f 	.word	0x0800323f
 8002fe8:	0800323f 	.word	0x0800323f
 8002fec:	0800323f 	.word	0x0800323f
 8002ff0:	0800323f 	.word	0x0800323f
 8002ff4:	0800323f 	.word	0x0800323f
 8002ff8:	0800323f 	.word	0x0800323f
 8002ffc:	08003033 	.word	0x08003033
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003000:	4b94      	ldr	r3, [pc, #592]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800300c:	4b91      	ldr	r3, [pc, #580]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	08db      	lsrs	r3, r3, #3
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	4a90      	ldr	r2, [pc, #576]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800301e:	e111      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003020:	4b8d      	ldr	r3, [pc, #564]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003022:	61bb      	str	r3, [r7, #24]
    break;
 8003024:	e10e      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003026:	4b8d      	ldr	r3, [pc, #564]	; (800325c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003028:	61bb      	str	r3, [r7, #24]
    break;
 800302a:	e10b      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800302c:	4b8c      	ldr	r3, [pc, #560]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800302e:	61bb      	str	r3, [r7, #24]
    break;
 8003030:	e108      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800303c:	4b85      	ldr	r3, [pc, #532]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003046:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003048:	4b82      	ldr	r3, [pc, #520]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003052:	4b80      	ldr	r3, [pc, #512]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	08db      	lsrs	r3, r3, #3
 8003058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80e1 	beq.w	8003238 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b02      	cmp	r3, #2
 800307a:	f000 8083 	beq.w	8003184 <HAL_RCC_GetSysClockFreq+0x204>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b02      	cmp	r3, #2
 8003082:	f200 80a1 	bhi.w	80031c8 <HAL_RCC_GetSysClockFreq+0x248>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x114>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d056      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003092:	e099      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003094:	4b6f      	ldr	r3, [pc, #444]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02d      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030a0:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	4a6b      	ldr	r2, [pc, #428]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
 80030b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ca:	4b62      	ldr	r3, [pc, #392]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030da:	ed97 6a02 	vldr	s12, [r7, #8]
 80030de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003264 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80030fa:	e087      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003106:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003268 <HAL_RCC_GetSysClockFreq+0x2e8>
 800310a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310e:	4b51      	ldr	r3, [pc, #324]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003122:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003264 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800313e:	e065      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800326c <HAL_RCC_GetSysClockFreq+0x2ec>
 800314e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003152:	4b40      	ldr	r3, [pc, #256]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003162:	ed97 6a02 	vldr	s12, [r7, #8]
 8003166:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003264 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003182:	e043      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003270 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003196:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003264 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031c6:	e021      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800326c <HAL_RCC_GetSysClockFreq+0x2ec>
 80031d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003264 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800320a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	0a5b      	lsrs	r3, r3, #9
 8003212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003216:	3301      	adds	r3, #1
 8003218:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	ee07 3a90 	vmov	s15, r3
 8003220:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003224:	edd7 6a07 	vldr	s13, [r7, #28]
 8003228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800322c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003230:	ee17 3a90 	vmov	r3, s15
 8003234:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003236:	e005      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
    break;
 800323c:	e002      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003240:	61bb      	str	r3, [r7, #24]
    break;
 8003242:	bf00      	nop
  }

  return sysclockfreq;
 8003244:	69bb      	ldr	r3, [r7, #24]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	58024400 	.word	0x58024400
 8003258:	03d09000 	.word	0x03d09000
 800325c:	003d0900 	.word	0x003d0900
 8003260:	007a1200 	.word	0x007a1200
 8003264:	46000000 	.word	0x46000000
 8003268:	4c742400 	.word	0x4c742400
 800326c:	4a742400 	.word	0x4a742400
 8003270:	4af42400 	.word	0x4af42400

08003274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800327a:	f7ff fe81 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 800327e:	4602      	mov	r2, r0
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	490f      	ldr	r1, [pc, #60]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800328c:	5ccb      	ldrb	r3, [r1, r3]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80032a2:	5cd3      	ldrb	r3, [r2, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <HAL_RCC_GetHCLKFreq+0x58>)
 80032b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <HAL_RCC_GetHCLKFreq+0x58>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58024400 	.word	0x58024400
 80032c8:	08007080 	.word	0x08007080
 80032cc:	24000004 	.word	0x24000004
 80032d0:	24000000 	.word	0x24000000

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032d8:	f7ff ffcc 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4904      	ldr	r1, [pc, #16]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	58024400 	.word	0x58024400
 80032fc:	08007080 	.word	0x08007080

08003300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003304:	f7ff ffb6 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4904      	ldr	r1, [pc, #16]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	58024400 	.word	0x58024400
 8003328:	08007080 	.word	0x08007080

0800332c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003334:	2300      	movs	r3, #0
 8003336:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003338:	2300      	movs	r3, #0
 800333a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d03f      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003350:	d02a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003356:	d824      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800335c:	d018      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800335e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003362:	d81e      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336c:	d007      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800336e:	e018      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003370:	4bab      	ldr	r3, [pc, #684]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	4aaa      	ldr	r2, [pc, #680]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800337c:	e015      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	2102      	movs	r1, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f001 f9cf 	bl	8004728 <RCCEx_PLL2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800338e:	e00c      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3324      	adds	r3, #36	; 0x24
 8003394:	2102      	movs	r1, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f001 fa78 	bl	800488c <RCCEx_PLL3_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
      break;
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033b0:	4b9b      	ldr	r3, [pc, #620]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033bc:	4998      	ldr	r1, [pc, #608]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	650b      	str	r3, [r1, #80]	; 0x50
 80033c2:	e001      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d03d      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d826      	bhi.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	080033f9 	.word	0x080033f9
 80033e8:	08003407 	.word	0x08003407
 80033ec:	08003419 	.word	0x08003419
 80033f0:	08003431 	.word	0x08003431
 80033f4:	08003431 	.word	0x08003431
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f8:	4b89      	ldr	r3, [pc, #548]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	4a88      	ldr	r2, [pc, #544]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003404:	e015      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f001 f98b 	bl	8004728 <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003416:	e00c      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3324      	adds	r3, #36	; 0x24
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f001 fa34 	bl	800488c <RCCEx_PLL3_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003428:	e003      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
      break;
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003438:	4b79      	ldr	r3, [pc, #484]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800343a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343c:	f023 0207 	bic.w	r2, r3, #7
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	4976      	ldr	r1, [pc, #472]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	650b      	str	r3, [r1, #80]	; 0x50
 800344a:	e001      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d042      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003464:	d02b      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346a:	d825      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800346c:	2bc0      	cmp	r3, #192	; 0xc0
 800346e:	d028      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003470:	2bc0      	cmp	r3, #192	; 0xc0
 8003472:	d821      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d016      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003478:	2b80      	cmp	r3, #128	; 0x80
 800347a:	d81d      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d007      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003484:	e018      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003486:	4b66      	ldr	r3, [pc, #408]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	4a65      	ldr	r2, [pc, #404]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800348c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003490:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003492:	e017      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f001 f944 	bl	8004728 <RCCEx_PLL2_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80034a4:	e00e      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3324      	adds	r3, #36	; 0x24
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f9ed 	bl	800488c <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80034b6:	e005      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	75fb      	strb	r3, [r7, #23]
      break;
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80034c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034ca:	4b55      	ldr	r3, [pc, #340]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4952      	ldr	r1, [pc, #328]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	650b      	str	r3, [r1, #80]	; 0x50
 80034dc:	e001      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d049      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f8:	d030      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80034fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fe:	d82a      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003500:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003504:	d02c      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003506:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800350a:	d824      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800350c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003510:	d018      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003516:	d81e      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800351c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003520:	d007      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003522:	e018      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003530:	e017      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f001 f8f5 	bl	8004728 <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003542:	e00e      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3324      	adds	r3, #36	; 0x24
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 f99e 	bl	800488c <RCCEx_PLL3_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003554:	e005      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800355c:	bf00      	nop
 800355e:	e000      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003568:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003576:	492a      	ldr	r1, [pc, #168]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003578:	4313      	orrs	r3, r2
 800357a:	658b      	str	r3, [r1, #88]	; 0x58
 800357c:	e001      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04c      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003598:	d030      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800359a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800359e:	d82a      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035a4:	d02c      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80035a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035aa:	d824      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b0:	d018      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80035b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b6:	d81e      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80035bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c0:	d007      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80035c2:	e018      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	4a15      	ldr	r2, [pc, #84]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035d0:	e017      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 f8a5 	bl	8004728 <RCCEx_PLL2_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80035e2:	e00e      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3324      	adds	r3, #36	; 0x24
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f001 f94e 	bl	800488c <RCCEx_PLL3_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035f4:	e005      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
      break;
 80035fa:	e002      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80035fc:	bf00      	nop
 80035fe:	e000      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003616:	4902      	ldr	r1, [pc, #8]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	658b      	str	r3, [r1, #88]	; 0x58
 800361c:	e004      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800361e:	bf00      	nop
 8003620:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d032      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003638:	2b30      	cmp	r3, #48	; 0x30
 800363a:	d01c      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800363c:	2b30      	cmp	r3, #48	; 0x30
 800363e:	d817      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003640:	2b20      	cmp	r3, #32
 8003642:	d00c      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003644:	2b20      	cmp	r3, #32
 8003646:	d813      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800364c:	2b10      	cmp	r3, #16
 800364e:	d10f      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003650:	4baf      	ldr	r3, [pc, #700]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4aae      	ldr	r2, [pc, #696]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800365c:	e00e      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f85f 	bl	8004728 <RCCEx_PLL2_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800366e:	e005      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
      break;
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800367a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003682:	4ba3      	ldr	r3, [pc, #652]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003686:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368e:	49a0      	ldr	r1, [pc, #640]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003694:	e001      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d047      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ae:	d030      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80036b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b4:	d82a      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036ba:	d02c      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80036bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036c0:	d824      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c6:	d018      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036cc:	d81e      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	d007      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80036d8:	e018      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036da:	4b8d      	ldr	r3, [pc, #564]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	4a8c      	ldr	r2, [pc, #560]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036e6:	e017      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 f81a 	bl	8004728 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036f8:	e00e      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3324      	adds	r3, #36	; 0x24
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f001 f8c3 	bl	800488c <RCCEx_PLL3_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800370a:	e005      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
      break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800371e:	4b7c      	ldr	r3, [pc, #496]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	4979      	ldr	r1, [pc, #484]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	650b      	str	r3, [r1, #80]	; 0x50
 8003730:	e001      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d049      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800374a:	d02e      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003750:	d828      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003756:	d02a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003758:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800375c:	d822      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800375e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003762:	d026      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003764:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003768:	d81c      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800376a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800376e:	d010      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003774:	d816      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01d      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800377a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377e:	d111      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	2101      	movs	r1, #1
 8003786:	4618      	mov	r0, r3
 8003788:	f000 ffce 	bl	8004728 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003790:	e012      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3324      	adds	r3, #36	; 0x24
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f001 f877 	bl	800488c <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037a2:	e009      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	75fb      	strb	r3, [r7, #23]
      break;
 80037a8:	e006      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037aa:	bf00      	nop
 80037ac:	e004      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80037b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037be:	4b54      	ldr	r3, [pc, #336]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ca:	4951      	ldr	r1, [pc, #324]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	650b      	str	r3, [r1, #80]	; 0x50
 80037d0:	e001      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04b      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ec:	d02e      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80037ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f2:	d828      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f8:	d02a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d822      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003800:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003804:	d026      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003806:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800380a:	d81c      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800380c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003810:	d010      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003816:	d816      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01d      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800381c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003820:	d111      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	2101      	movs	r1, #1
 8003828:	4618      	mov	r0, r3
 800382a:	f000 ff7d 	bl	8004728 <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003832:	e012      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f001 f826 	bl	800488c <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003844:	e009      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e006      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800384c:	bf00      	nop
 800384e:	e004      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800386e:	4928      	ldr	r1, [pc, #160]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	658b      	str	r3, [r1, #88]	; 0x58
 8003874:	e001      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02f      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388e:	d00e      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003894:	d814      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800389a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389e:	d10f      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038ac:	e00c      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 ff37 	bl	8004728 <RCCEx_PLL2_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038be:	e003      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	75fb      	strb	r3, [r7, #23]
      break;
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80038c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038da:	490d      	ldr	r1, [pc, #52]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	650b      	str	r3, [r1, #80]	; 0x50
 80038e0:	e001      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d033      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d81c      	bhi.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	0800393b 	.word	0x0800393b
 8003904:	08003915 	.word	0x08003915
 8003908:	08003923 	.word	0x08003923
 800390c:	0800393b 	.word	0x0800393b
 8003910:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003914:	4bb8      	ldr	r3, [pc, #736]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	4ab7      	ldr	r2, [pc, #732]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800391a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003920:	e00c      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	2102      	movs	r1, #2
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fefd 	bl	8004728 <RCCEx_PLL2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]
      break;
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800393a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003942:	4bad      	ldr	r3, [pc, #692]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	49aa      	ldr	r1, [pc, #680]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003954:	e001      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8086 	beq.w	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003968:	4ba4      	ldr	r3, [pc, #656]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4aa3      	ldr	r2, [pc, #652]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003974:	f7fd fb00 	bl	8000f78 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800397a:	e009      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fd fafc 	bl	8000f78 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d902      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	75fb      	strb	r3, [r7, #23]
        break;
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003990:	4b9a      	ldr	r3, [pc, #616]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d166      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039a2:	4b95      	ldr	r3, [pc, #596]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039ac:	4053      	eors	r3, r2
 80039ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d013      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b6:	4b90      	ldr	r3, [pc, #576]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c0:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a8c      	ldr	r2, [pc, #560]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039cc:	4b8a      	ldr	r3, [pc, #552]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	4a89      	ldr	r2, [pc, #548]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039d8:	4a87      	ldr	r2, [pc, #540]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d115      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fd fac5 	bl	8000f78 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f0:	e00b      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fd fac1 	bl	8000f78 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d902      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	75fb      	strb	r3, [r7, #23]
            break;
 8003a08:	e005      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a0a:	4b7b      	ldr	r3, [pc, #492]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ed      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d126      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2a:	d10d      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003a2c:	4b72      	ldr	r3, [pc, #456]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a3a:	0919      	lsrs	r1, r3, #4
 8003a3c:	4b70      	ldr	r3, [pc, #448]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003a3e:	400b      	ands	r3, r1
 8003a40:	496d      	ldr	r1, [pc, #436]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	610b      	str	r3, [r1, #16]
 8003a46:	e005      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003a48:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a52:	6113      	str	r3, [r2, #16]
 8003a54:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	4965      	ldr	r1, [pc, #404]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	670b      	str	r3, [r1, #112]	; 0x70
 8003a68:	e004      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	75bb      	strb	r3, [r7, #22]
 8003a6e:	e001      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d07e      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a84:	2b28      	cmp	r3, #40	; 0x28
 8003a86:	d867      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003b5f 	.word	0x08003b5f
 8003a94:	08003b59 	.word	0x08003b59
 8003a98:	08003b59 	.word	0x08003b59
 8003a9c:	08003b59 	.word	0x08003b59
 8003aa0:	08003b59 	.word	0x08003b59
 8003aa4:	08003b59 	.word	0x08003b59
 8003aa8:	08003b59 	.word	0x08003b59
 8003aac:	08003b59 	.word	0x08003b59
 8003ab0:	08003b35 	.word	0x08003b35
 8003ab4:	08003b59 	.word	0x08003b59
 8003ab8:	08003b59 	.word	0x08003b59
 8003abc:	08003b59 	.word	0x08003b59
 8003ac0:	08003b59 	.word	0x08003b59
 8003ac4:	08003b59 	.word	0x08003b59
 8003ac8:	08003b59 	.word	0x08003b59
 8003acc:	08003b59 	.word	0x08003b59
 8003ad0:	08003b47 	.word	0x08003b47
 8003ad4:	08003b59 	.word	0x08003b59
 8003ad8:	08003b59 	.word	0x08003b59
 8003adc:	08003b59 	.word	0x08003b59
 8003ae0:	08003b59 	.word	0x08003b59
 8003ae4:	08003b59 	.word	0x08003b59
 8003ae8:	08003b59 	.word	0x08003b59
 8003aec:	08003b59 	.word	0x08003b59
 8003af0:	08003b5f 	.word	0x08003b5f
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003b59 	.word	0x08003b59
 8003afc:	08003b59 	.word	0x08003b59
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b59 	.word	0x08003b59
 8003b10:	08003b5f 	.word	0x08003b5f
 8003b14:	08003b59 	.word	0x08003b59
 8003b18:	08003b59 	.word	0x08003b59
 8003b1c:	08003b59 	.word	0x08003b59
 8003b20:	08003b59 	.word	0x08003b59
 8003b24:	08003b59 	.word	0x08003b59
 8003b28:	08003b59 	.word	0x08003b59
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b5f 	.word	0x08003b5f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fdf4 	bl	8004728 <RCCEx_PLL2_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b44:	e00c      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3324      	adds	r3, #36	; 0x24
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fe9d 	bl	800488c <RCCEx_PLL3_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b72:	4921      	ldr	r1, [pc, #132]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	654b      	str	r3, [r1, #84]	; 0x54
 8003b78:	e001      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d03e      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d820      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003b92:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b98:	08003bdb 	.word	0x08003bdb
 8003b9c:	08003bb1 	.word	0x08003bb1
 8003ba0:	08003bc3 	.word	0x08003bc3
 8003ba4:	08003bdb 	.word	0x08003bdb
 8003ba8:	08003bdb 	.word	0x08003bdb
 8003bac:	08003bdb 	.word	0x08003bdb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fdb6 	bl	8004728 <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bc0:	e00c      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3324      	adds	r3, #36	; 0x24
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fe5f 	bl	800488c <RCCEx_PLL3_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d110      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	f023 0207 	bic.w	r2, r3, #7
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	4902      	ldr	r1, [pc, #8]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	654b      	str	r3, [r1, #84]	; 0x54
 8003bf4:	e008      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003bf6:	bf00      	nop
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	58024800 	.word	0x58024800
 8003c00:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d039      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d820      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c67 	.word	0x08003c67
 8003c28:	08003c3d 	.word	0x08003c3d
 8003c2c:	08003c4f 	.word	0x08003c4f
 8003c30:	08003c67 	.word	0x08003c67
 8003c34:	08003c67 	.word	0x08003c67
 8003c38:	08003c67 	.word	0x08003c67
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fd70 	bl	8004728 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c4c:	e00c      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fe19 	bl	800488c <RCCEx_PLL3_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c5e:	e003      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
      break;
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c6e:	4bb7      	ldr	r3, [pc, #732]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	f023 0207 	bic.w	r2, r3, #7
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	49b3      	ldr	r1, [pc, #716]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	658b      	str	r3, [r1, #88]	; 0x58
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d04b      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9e:	d02e      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca4:	d828      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d02a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb0:	d822      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003cb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb6:	d026      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cbc:	d81c      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc2:	d010      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc8:	d816      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01d      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cd2:	d111      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fd24 	bl	8004728 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ce4:	e012      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3324      	adds	r3, #36	; 0x24
 8003cea:	2102      	movs	r1, #2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fdcd 	bl	800488c <RCCEx_PLL3_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003cf6:	e009      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e004      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003d02:	bf00      	nop
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d12:	4b8e      	ldr	r3, [pc, #568]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d20:	498a      	ldr	r1, [pc, #552]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	654b      	str	r3, [r1, #84]	; 0x54
 8003d26:	e001      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d04b      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d42:	d02e      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003d44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d48:	d828      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	d02a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d822      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d5a:	d026      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d60:	d81c      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d66:	d010      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6c:	d816      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d01d      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d76:	d111      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fcd2 	bl	8004728 <RCCEx_PLL2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d88:	e012      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3324      	adds	r3, #36	; 0x24
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fd7b 	bl	800488c <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d9a:	e009      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003da0:	e006      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003db6:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc4:	4961      	ldr	r1, [pc, #388]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	658b      	str	r3, [r1, #88]	; 0x58
 8003dca:	e001      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d04b      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003de6:	d02e      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003de8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dec:	d828      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df2:	d02a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df8:	d822      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003dfa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dfe:	d026      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003e00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e04:	d81c      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0a:	d010      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e10:	d816      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01d      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1a:	d111      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fc80 	bl	8004728 <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e2c:	e012      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3324      	adds	r3, #36	; 0x24
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fd29 	bl	800488c <RCCEx_PLL3_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e3e:	e009      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e46:	bf00      	nop
 8003e48:	e004      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e002      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e5a:	4b3c      	ldr	r3, [pc, #240]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e68:	4938      	ldr	r1, [pc, #224]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e6e:	e001      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3324      	adds	r3, #36	; 0x24
 8003e90:	2102      	movs	r1, #2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fcfa 	bl	800488c <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb0:	4926      	ldr	r1, [pc, #152]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3324      	adds	r3, #36	; 0x24
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fcd9 	bl	800488c <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef2:	4916      	ldr	r1, [pc, #88]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d036      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f0e:	d01f      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f14:	d817      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003f20:	e011      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fbfd 	bl	8004728 <RCCEx_PLL2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f32:	e00e      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fca6 	bl	800488c <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f44:	e005      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4a:	e002      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003f4c:	58024400 	.word	0x58024400
      break;
 8003f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f58:	4b93      	ldr	r3, [pc, #588]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f66:	4990      	ldr	r1, [pc, #576]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	658b      	str	r3, [r1, #88]	; 0x58
 8003f6c:	e001      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d033      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f88:	d01c      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f8e:	d816      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f94:	d003      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f9a:	d007      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003f9c:	e00f      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9e:	4b82      	ldr	r3, [pc, #520]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4a81      	ldr	r2, [pc, #516]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003faa:	e00c      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3324      	adds	r3, #36	; 0x24
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fc6a 	bl	800488c <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fcc:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fda:	4973      	ldr	r1, [pc, #460]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	654b      	str	r3, [r1, #84]	; 0x54
 8003fe0:	e001      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d029      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffe:	d007      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004000:	e00f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004002:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	4a68      	ldr	r2, [pc, #416]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800400e:	e00b      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	2102      	movs	r1, #2
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fb86 	bl	8004728 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
      break;
 8004026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800402e:	4b5e      	ldr	r3, [pc, #376]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	495b      	ldr	r1, [pc, #364]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004040:	e001      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	; 0x24
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fc17 	bl	800488c <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d030      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407c:	d017      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800407e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004082:	d811      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004088:	d013      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800408a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408e:	d80b      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004098:	d106      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409a:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	4a42      	ldr	r2, [pc, #264]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80040a6:	e007      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
      break;
 80040ac:	e004      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80040b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040be:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ca:	4937      	ldr	r1, [pc, #220]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	654b      	str	r3, [r1, #84]	; 0x54
 80040d0:	e001      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040e2:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	492e      	ldr	r1, [pc, #184]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004100:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800410e:	4926      	ldr	r1, [pc, #152]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004120:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412c:	491e      	ldr	r1, [pc, #120]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004144:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004148:	6113      	str	r3, [r2, #16]
 800414a:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004154:	4914      	ldr	r1, [pc, #80]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	da08      	bge.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416e:	490e      	ldr	r1, [pc, #56]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004170:	4313      	orrs	r3, r2
 8004172:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	4906      	ldr	r1, [pc, #24]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004194:	7dbb      	ldrb	r3, [r7, #22]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	58024400 	.word	0x58024400

080041ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041b0:	f7ff f860 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4904      	ldr	r1, [pc, #16]	; (80041d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	58024400 	.word	0x58024400
 80041d4:	08007080 	.word	0x08007080

080041d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041e0:	4ba1      	ldr	r3, [pc, #644]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80041ea:	4b9f      	ldr	r3, [pc, #636]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	0b1b      	lsrs	r3, r3, #12
 80041f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041f6:	4b9c      	ldr	r3, [pc, #624]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004202:	4b99      	ldr	r3, [pc, #612]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	08db      	lsrs	r3, r3, #3
 8004208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8111 	beq.w	8004448 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b02      	cmp	r3, #2
 800422a:	f000 8083 	beq.w	8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b02      	cmp	r3, #2
 8004232:	f200 80a1 	bhi.w	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d056      	beq.n	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004242:	e099      	b.n	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004244:	4b88      	ldr	r3, [pc, #544]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02d      	beq.n	80042ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004250:	4b85      	ldr	r3, [pc, #532]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	08db      	lsrs	r3, r3, #3
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	4a84      	ldr	r2, [pc, #528]	; (800446c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
 8004260:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427a:	4b7b      	ldr	r3, [pc, #492]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428a:	ed97 6a03 	vldr	s12, [r7, #12]
 800428e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042aa:	e087      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b6a      	ldr	r3, [pc, #424]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042ee:	e065      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b59      	ldr	r3, [pc, #356]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a03 	vldr	s12, [r7, #12]
 8004316:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004332:	e043      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800447c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b48      	ldr	r3, [pc, #288]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a03 	vldr	s12, [r7, #12]
 800435a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004376:	e021      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b37      	ldr	r3, [pc, #220]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a03 	vldr	s12, [r7, #12]
 800439e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043bc:	4b2a      	ldr	r3, [pc, #168]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	0a5b      	lsrs	r3, r3, #9
 80043c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e2:	ee17 2a90 	vmov	r2, s15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80043ea:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004400:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004404:	edd7 6a07 	vldr	s13, [r7, #28]
 8004408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004410:	ee17 2a90 	vmov	r2, s15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004418:	4b13      	ldr	r3, [pc, #76]	; (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	0e1b      	lsrs	r3, r3, #24
 800441e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800442e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004432:	edd7 6a07 	vldr	s13, [r7, #28]
 8004436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800443e:	ee17 2a90 	vmov	r2, s15
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004446:	e008      	b.n	800445a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	bf00      	nop
 800445c:	3724      	adds	r7, #36	; 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58024400 	.word	0x58024400
 800446c:	03d09000 	.word	0x03d09000
 8004470:	46000000 	.word	0x46000000
 8004474:	4c742400 	.word	0x4c742400
 8004478:	4a742400 	.word	0x4a742400
 800447c:	4af42400 	.word	0x4af42400

08004480 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	; 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004488:	4ba1      	ldr	r3, [pc, #644]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004492:	4b9f      	ldr	r3, [pc, #636]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	0d1b      	lsrs	r3, r3, #20
 8004498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800449e:	4b9c      	ldr	r3, [pc, #624]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044aa:	4b99      	ldr	r3, [pc, #612]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	08db      	lsrs	r3, r3, #3
 80044b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8111 	beq.w	80046f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	f000 8083 	beq.w	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	f200 80a1 	bhi.w	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d056      	beq.n	8004598 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80044ea:	e099      	b.n	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ec:	4b88      	ldr	r3, [pc, #544]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02d      	beq.n	8004554 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044f8:	4b85      	ldr	r3, [pc, #532]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	08db      	lsrs	r3, r3, #3
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	4a84      	ldr	r2, [pc, #528]	; (8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004522:	4b7b      	ldr	r3, [pc, #492]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004532:	ed97 6a03 	vldr	s12, [r7, #12]
 8004536:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800453a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004552:	e087      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800471c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004566:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004576:	ed97 6a03 	vldr	s12, [r7, #12]
 800457a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800457e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800458a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004596:	e065      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b59      	ldr	r3, [pc, #356]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80045be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045da:	e043      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b48      	ldr	r3, [pc, #288]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800461e:	e021      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b37      	ldr	r3, [pc, #220]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004662:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	0a5b      	lsrs	r3, r3, #9
 800466a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800467a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800467e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800468a:	ee17 2a90 	vmov	r2, s15
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004692:	4b1f      	ldr	r3, [pc, #124]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b8:	ee17 2a90 	vmov	r2, s15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	0e1b      	lsrs	r3, r3, #24
 80046c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046da:	edd7 6a07 	vldr	s13, [r7, #28]
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e6:	ee17 2a90 	vmov	r2, s15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046ee:	e008      	b.n	8004702 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
}
 8004702:	bf00      	nop
 8004704:	3724      	adds	r7, #36	; 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	58024400 	.word	0x58024400
 8004714:	03d09000 	.word	0x03d09000
 8004718:	46000000 	.word	0x46000000
 800471c:	4c742400 	.word	0x4c742400
 8004720:	4a742400 	.word	0x4a742400
 8004724:	4af42400 	.word	0x4af42400

08004728 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004736:	4b53      	ldr	r3, [pc, #332]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b03      	cmp	r3, #3
 8004740:	d101      	bne.n	8004746 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e099      	b.n	800487a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004746:	4b4f      	ldr	r3, [pc, #316]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a4e      	ldr	r2, [pc, #312]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800474c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004752:	f7fc fc11 	bl	8000f78 <HAL_GetTick>
 8004756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004758:	e008      	b.n	800476c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800475a:	f7fc fc0d 	bl	8000f78 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e086      	b.n	800487a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800476c:	4b45      	ldr	r3, [pc, #276]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f0      	bne.n	800475a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004778:	4b42      	ldr	r3, [pc, #264]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	493f      	ldr	r1, [pc, #252]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004788:	4313      	orrs	r3, r2
 800478a:	628b      	str	r3, [r1, #40]	; 0x28
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	3b01      	subs	r3, #1
 8004792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	3b01      	subs	r3, #1
 800479c:	025b      	lsls	r3, r3, #9
 800479e:	b29b      	uxth	r3, r3
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	041b      	lsls	r3, r3, #16
 80047aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	061b      	lsls	r3, r3, #24
 80047b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047bc:	4931      	ldr	r1, [pc, #196]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047c2:	4b30      	ldr	r3, [pc, #192]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	492d      	ldr	r1, [pc, #180]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047d4:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	f023 0220 	bic.w	r2, r3, #32
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	4928      	ldr	r1, [pc, #160]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047e6:	4b27      	ldr	r3, [pc, #156]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	4a26      	ldr	r2, [pc, #152]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047ec:	f023 0310 	bic.w	r3, r3, #16
 80047f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <RCCEx_PLL2_Config+0x160>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	69d2      	ldr	r2, [r2, #28]
 80047fe:	00d2      	lsls	r2, r2, #3
 8004800:	4920      	ldr	r1, [pc, #128]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004802:	4313      	orrs	r3, r2
 8004804:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800480c:	f043 0310 	orr.w	r3, r3, #16
 8004810:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800481e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004822:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004824:	e00f      	b.n	8004846 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d106      	bne.n	800483a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800482c:	4b15      	ldr	r3, [pc, #84]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004836:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004838:	e005      	b.n	8004846 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	4a11      	ldr	r2, [pc, #68]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004844:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a0e      	ldr	r2, [pc, #56]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800484c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004852:	f7fc fb91 	bl	8000f78 <HAL_GetTick>
 8004856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004858:	e008      	b.n	800486c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800485a:	f7fc fb8d 	bl	8000f78 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e006      	b.n	800487a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <RCCEx_PLL2_Config+0x15c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400
 8004888:	ffff0007 	.word	0xffff0007

0800488c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800489a:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d101      	bne.n	80048aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e099      	b.n	80049de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048aa:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a4e      	ldr	r2, [pc, #312]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b6:	f7fc fb5f 	bl	8000f78 <HAL_GetTick>
 80048ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048bc:	e008      	b.n	80048d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048be:	f7fc fb5b 	bl	8000f78 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e086      	b.n	80049de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048d0:	4b45      	ldr	r3, [pc, #276]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048dc:	4b42      	ldr	r3, [pc, #264]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	051b      	lsls	r3, r3, #20
 80048ea:	493f      	ldr	r1, [pc, #252]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	628b      	str	r3, [r1, #40]	; 0x28
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	3b01      	subs	r3, #1
 8004900:	025b      	lsls	r3, r3, #9
 8004902:	b29b      	uxth	r3, r3
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	3b01      	subs	r3, #1
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004920:	4931      	ldr	r1, [pc, #196]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004926:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	492d      	ldr	r1, [pc, #180]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004934:	4313      	orrs	r3, r2
 8004936:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	4928      	ldr	r1, [pc, #160]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800494a:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004954:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004956:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495a:	4b24      	ldr	r3, [pc, #144]	; (80049ec <RCCEx_PLL3_Config+0x160>)
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	69d2      	ldr	r2, [r2, #28]
 8004962:	00d2      	lsls	r2, r2, #3
 8004964:	4920      	ldr	r1, [pc, #128]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004982:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004988:	e00f      	b.n	80049aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d106      	bne.n	800499e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004996:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800499a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800499c:	e005      	b.n	80049aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fc fadf 	bl	8000f78 <HAL_GetTick>
 80049ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049bc:	e008      	b.n	80049d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049be:	f7fc fadb 	bl	8000f78 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	58024400 	.word	0x58024400
 80049ec:	ffff0007 	.word	0xffff0007

080049f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e042      	b.n	8004a88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d106      	bne.n	8004a1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7fc f89f 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2224      	movs	r2, #36	; 0x24
 8004a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fb9c 	bl	8005170 <UART_SetConfig>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e022      	b.n	8004a88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f001 f8f0 	bl	8005c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f001 f977 	bl	8005d74 <UART_CheckIdleState>
 8004a86:	4603      	mov	r3, r0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	f040 8083 	bne.w	8004bb2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_UART_Transmit+0x28>
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e07b      	b.n	8004bb4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Transmit+0x3a>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e074      	b.n	8004bb4 <HAL_UART_Transmit+0x124>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2221      	movs	r2, #33	; 0x21
 8004ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae2:	f7fc fa49 	bl	8000f78 <HAL_GetTick>
 8004ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b00:	d108      	bne.n	8004b14 <HAL_UART_Transmit+0x84>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	e003      	b.n	8004b1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b24:	e02c      	b.n	8004b80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f001 f96a 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e039      	b.n	8004bb4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e007      	b.n	8004b6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1cc      	bne.n	8004b26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f001 f937 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e006      	b.n	8004bb4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e000      	b.n	8004bb4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
  }
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	f640 030f 	movw	r3, #2063	; 0x80f
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d118      	bne.n	8004c1e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d013      	beq.n	8004c1e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8282 	beq.w	8005118 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
      }
      return;
 8004c1c:	e27c      	b.n	8005118 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80ef 	beq.w	8004e04 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4b73      	ldr	r3, [pc, #460]	; (8004df8 <HAL_UART_IRQHandler+0x23c>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4b72      	ldr	r3, [pc, #456]	; (8004dfc <HAL_UART_IRQHandler+0x240>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80e4 	beq.w	8004e04 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d010      	beq.n	8004c68 <HAL_UART_IRQHandler+0xac>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00b      	beq.n	8004c68 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2201      	movs	r2, #1
 8004c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d010      	beq.n	8004c94 <HAL_UART_IRQHandler+0xd8>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00b      	beq.n	8004c94 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2202      	movs	r2, #2
 8004c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c8a:	f043 0204 	orr.w	r2, r3, #4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d010      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x104>
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2204      	movs	r2, #4
 8004cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb6:	f043 0202 	orr.w	r2, r3, #2
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d015      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d104      	bne.n	8004cde <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4b48      	ldr	r3, [pc, #288]	; (8004df8 <HAL_UART_IRQHandler+0x23c>)
 8004cd8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cec:	f043 0208 	orr.w	r2, r3, #8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d011      	beq.n	8004d24 <HAL_UART_IRQHandler+0x168>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 81f6 	beq.w	800511c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d011      	beq.n	8004d5e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d004      	beq.n	8004d7e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d031      	beq.n	8004de2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 f8c4 	bl	8005f0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d123      	bne.n	8004dda <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d013      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <HAL_UART_IRQHandler+0x244>)
 8004db0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc fd48 	bl	800184c <HAL_DMA_Abort_IT>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d017      	beq.n	8004df2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	e00f      	b.n	8004df2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9b6 	bl	8005144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e00b      	b.n	8004df2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9b2 	bl	8005144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e007      	b.n	8004df2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f9ae 	bl	8005144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004df0:	e194      	b.n	800511c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df2:	bf00      	nop
    return;
 8004df4:	e192      	b.n	800511c <HAL_UART_IRQHandler+0x560>
 8004df6:	bf00      	nop
 8004df8:	10000001 	.word	0x10000001
 8004dfc:	04000120 	.word	0x04000120
 8004e00:	08005f71 	.word	0x08005f71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	f040 810f 	bne.w	800502c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8109 	beq.w	800502c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8103 	beq.w	800502c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	f040 80bb 	bne.w	8004fb4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a96      	ldr	r2, [pc, #600]	; (80050a0 <HAL_UART_IRQHandler+0x4e4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d059      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a94      	ldr	r2, [pc, #592]	; (80050a4 <HAL_UART_IRQHandler+0x4e8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d053      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a92      	ldr	r2, [pc, #584]	; (80050a8 <HAL_UART_IRQHandler+0x4ec>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d04d      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a90      	ldr	r2, [pc, #576]	; (80050ac <HAL_UART_IRQHandler+0x4f0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d047      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a8e      	ldr	r2, [pc, #568]	; (80050b0 <HAL_UART_IRQHandler+0x4f4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d041      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a8c      	ldr	r2, [pc, #560]	; (80050b4 <HAL_UART_IRQHandler+0x4f8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d03b      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a8a      	ldr	r2, [pc, #552]	; (80050b8 <HAL_UART_IRQHandler+0x4fc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d035      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a88      	ldr	r2, [pc, #544]	; (80050bc <HAL_UART_IRQHandler+0x500>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02f      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a86      	ldr	r2, [pc, #536]	; (80050c0 <HAL_UART_IRQHandler+0x504>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d029      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a84      	ldr	r2, [pc, #528]	; (80050c4 <HAL_UART_IRQHandler+0x508>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d023      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a82      	ldr	r2, [pc, #520]	; (80050c8 <HAL_UART_IRQHandler+0x50c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01d      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a80      	ldr	r2, [pc, #512]	; (80050cc <HAL_UART_IRQHandler+0x510>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d017      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a7e      	ldr	r2, [pc, #504]	; (80050d0 <HAL_UART_IRQHandler+0x514>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d011      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a7c      	ldr	r2, [pc, #496]	; (80050d4 <HAL_UART_IRQHandler+0x518>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00b      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a7a      	ldr	r2, [pc, #488]	; (80050d8 <HAL_UART_IRQHandler+0x51c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d005      	beq.n	8004efe <HAL_UART_IRQHandler+0x342>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a78      	ldr	r2, [pc, #480]	; (80050dc <HAL_UART_IRQHandler+0x520>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d105      	bne.n	8004f0a <HAL_UART_IRQHandler+0x34e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	e004      	b.n	8004f14 <HAL_UART_IRQHandler+0x358>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004f16:	893b      	ldrh	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8101 	beq.w	8005120 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f24:	893a      	ldrh	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	f080 80fa 	bcs.w	8005120 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	893a      	ldrh	r2, [r7, #8]
 8004f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3e:	d02b      	beq.n	8004f98 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0210 	bic.w	r2, r2, #16
 8004f8c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fc f93c 	bl	8001210 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f8d3 	bl	8005158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fb2:	e0b5      	b.n	8005120 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80a8 	beq.w	8005124 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8004fd4:	897b      	ldrh	r3, [r7, #10]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80a4 	beq.w	8005124 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fea:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6899      	ldr	r1, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <HAL_UART_IRQHandler+0x524>)
 8004ff8:	400b      	ands	r3, r1
 8004ffa:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0210 	bic.w	r2, r2, #16
 800501e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005020:	897b      	ldrh	r3, [r7, #10]
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f897 	bl	8005158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800502a:	e07b      	b.n	8005124 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <HAL_UART_IRQHandler+0x496>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 ffc0 	bl	8005fd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005050:	e06b      	b.n	800512a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	d012      	beq.n	8005082 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005074:	2b00      	cmp	r3, #0
 8005076:	d057      	beq.n	8005128 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
    }
    return;
 8005080:	e052      	b.n	8005128 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d02b      	beq.n	80050e4 <HAL_UART_IRQHandler+0x528>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d026      	beq.n	80050e4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 ff80 	bl	8005f9c <UART_EndTransmit_IT>
    return;
 800509c:	e045      	b.n	800512a <HAL_UART_IRQHandler+0x56e>
 800509e:	bf00      	nop
 80050a0:	40020010 	.word	0x40020010
 80050a4:	40020028 	.word	0x40020028
 80050a8:	40020040 	.word	0x40020040
 80050ac:	40020058 	.word	0x40020058
 80050b0:	40020070 	.word	0x40020070
 80050b4:	40020088 	.word	0x40020088
 80050b8:	400200a0 	.word	0x400200a0
 80050bc:	400200b8 	.word	0x400200b8
 80050c0:	40020410 	.word	0x40020410
 80050c4:	40020428 	.word	0x40020428
 80050c8:	40020440 	.word	0x40020440
 80050cc:	40020458 	.word	0x40020458
 80050d0:	40020470 	.word	0x40020470
 80050d4:	40020488 	.word	0x40020488
 80050d8:	400204a0 	.word	0x400204a0
 80050dc:	400204b8 	.word	0x400204b8
 80050e0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_UART_IRQHandler+0x544>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 ff7d 	bl	8005ff8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fe:	e014      	b.n	800512a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00f      	beq.n	800512a <HAL_UART_IRQHandler+0x56e>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	da0c      	bge.n	800512a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 ff67 	bl	8005fe4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005116:	e008      	b.n	800512a <HAL_UART_IRQHandler+0x56e>
      return;
 8005118:	bf00      	nop
 800511a:	e006      	b.n	800512a <HAL_UART_IRQHandler+0x56e>
    return;
 800511c:	bf00      	nop
 800511e:	e004      	b.n	800512a <HAL_UART_IRQHandler+0x56e>
      return;
 8005120:	bf00      	nop
 8005122:	e002      	b.n	800512a <HAL_UART_IRQHandler+0x56e>
      return;
 8005124:	bf00      	nop
 8005126:	e000      	b.n	800512a <HAL_UART_IRQHandler+0x56e>
    return;
 8005128:	bf00      	nop
  }
}
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005170:	b5b0      	push	{r4, r5, r7, lr}
 8005172:	b08e      	sub	sp, #56	; 0x38
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	4313      	orrs	r3, r2
 8005194:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4bbf      	ldr	r3, [pc, #764]	; (800549c <UART_SetConfig+0x32c>)
 800519e:	4013      	ands	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051a6:	430b      	orrs	r3, r1
 80051a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4ab5      	ldr	r2, [pc, #724]	; (80054a0 <UART_SetConfig+0x330>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d6:	4313      	orrs	r3, r2
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	4bb0      	ldr	r3, [pc, #704]	; (80054a4 <UART_SetConfig+0x334>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051ea:	430b      	orrs	r3, r1
 80051ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f023 010f 	bic.w	r1, r3, #15
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4aa7      	ldr	r2, [pc, #668]	; (80054a8 <UART_SetConfig+0x338>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d176      	bne.n	80052fc <UART_SetConfig+0x18c>
 800520e:	4ba7      	ldr	r3, [pc, #668]	; (80054ac <UART_SetConfig+0x33c>)
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005216:	2b28      	cmp	r3, #40	; 0x28
 8005218:	d86c      	bhi.n	80052f4 <UART_SetConfig+0x184>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0xb0>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	080052c5 	.word	0x080052c5
 8005224:	080052f5 	.word	0x080052f5
 8005228:	080052f5 	.word	0x080052f5
 800522c:	080052f5 	.word	0x080052f5
 8005230:	080052f5 	.word	0x080052f5
 8005234:	080052f5 	.word	0x080052f5
 8005238:	080052f5 	.word	0x080052f5
 800523c:	080052f5 	.word	0x080052f5
 8005240:	080052cd 	.word	0x080052cd
 8005244:	080052f5 	.word	0x080052f5
 8005248:	080052f5 	.word	0x080052f5
 800524c:	080052f5 	.word	0x080052f5
 8005250:	080052f5 	.word	0x080052f5
 8005254:	080052f5 	.word	0x080052f5
 8005258:	080052f5 	.word	0x080052f5
 800525c:	080052f5 	.word	0x080052f5
 8005260:	080052d5 	.word	0x080052d5
 8005264:	080052f5 	.word	0x080052f5
 8005268:	080052f5 	.word	0x080052f5
 800526c:	080052f5 	.word	0x080052f5
 8005270:	080052f5 	.word	0x080052f5
 8005274:	080052f5 	.word	0x080052f5
 8005278:	080052f5 	.word	0x080052f5
 800527c:	080052f5 	.word	0x080052f5
 8005280:	080052dd 	.word	0x080052dd
 8005284:	080052f5 	.word	0x080052f5
 8005288:	080052f5 	.word	0x080052f5
 800528c:	080052f5 	.word	0x080052f5
 8005290:	080052f5 	.word	0x080052f5
 8005294:	080052f5 	.word	0x080052f5
 8005298:	080052f5 	.word	0x080052f5
 800529c:	080052f5 	.word	0x080052f5
 80052a0:	080052e5 	.word	0x080052e5
 80052a4:	080052f5 	.word	0x080052f5
 80052a8:	080052f5 	.word	0x080052f5
 80052ac:	080052f5 	.word	0x080052f5
 80052b0:	080052f5 	.word	0x080052f5
 80052b4:	080052f5 	.word	0x080052f5
 80052b8:	080052f5 	.word	0x080052f5
 80052bc:	080052f5 	.word	0x080052f5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	e222      	b.n	8005712 <UART_SetConfig+0x5a2>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d2:	e21e      	b.n	8005712 <UART_SetConfig+0x5a2>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052da:	e21a      	b.n	8005712 <UART_SetConfig+0x5a2>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e2:	e216      	b.n	8005712 <UART_SetConfig+0x5a2>
 80052e4:	2320      	movs	r3, #32
 80052e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ea:	e212      	b.n	8005712 <UART_SetConfig+0x5a2>
 80052ec:	2340      	movs	r3, #64	; 0x40
 80052ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f2:	e20e      	b.n	8005712 <UART_SetConfig+0x5a2>
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fa:	e20a      	b.n	8005712 <UART_SetConfig+0x5a2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a6b      	ldr	r2, [pc, #428]	; (80054b0 <UART_SetConfig+0x340>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d130      	bne.n	8005368 <UART_SetConfig+0x1f8>
 8005306:	4b69      	ldr	r3, [pc, #420]	; (80054ac <UART_SetConfig+0x33c>)
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b05      	cmp	r3, #5
 8005310:	d826      	bhi.n	8005360 <UART_SetConfig+0x1f0>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x1a8>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005331 	.word	0x08005331
 800531c:	08005339 	.word	0x08005339
 8005320:	08005341 	.word	0x08005341
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005336:	e1ec      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533e:	e1e8      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005346:	e1e4      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534e:	e1e0      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005350:	2320      	movs	r3, #32
 8005352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005356:	e1dc      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005358:	2340      	movs	r3, #64	; 0x40
 800535a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535e:	e1d8      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005366:	e1d4      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a51      	ldr	r2, [pc, #324]	; (80054b4 <UART_SetConfig+0x344>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d130      	bne.n	80053d4 <UART_SetConfig+0x264>
 8005372:	4b4e      	ldr	r3, [pc, #312]	; (80054ac <UART_SetConfig+0x33c>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b05      	cmp	r3, #5
 800537c:	d826      	bhi.n	80053cc <UART_SetConfig+0x25c>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0x214>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053ad 	.word	0x080053ad
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e1b6      	b.n	8005712 <UART_SetConfig+0x5a2>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053aa:	e1b2      	b.n	8005712 <UART_SetConfig+0x5a2>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e1ae      	b.n	8005712 <UART_SetConfig+0x5a2>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ba:	e1aa      	b.n	8005712 <UART_SetConfig+0x5a2>
 80053bc:	2320      	movs	r3, #32
 80053be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c2:	e1a6      	b.n	8005712 <UART_SetConfig+0x5a2>
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ca:	e1a2      	b.n	8005712 <UART_SetConfig+0x5a2>
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d2:	e19e      	b.n	8005712 <UART_SetConfig+0x5a2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a37      	ldr	r2, [pc, #220]	; (80054b8 <UART_SetConfig+0x348>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d130      	bne.n	8005440 <UART_SetConfig+0x2d0>
 80053de:	4b33      	ldr	r3, [pc, #204]	; (80054ac <UART_SetConfig+0x33c>)
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d826      	bhi.n	8005438 <UART_SetConfig+0x2c8>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x280>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005409 	.word	0x08005409
 80053f4:	08005411 	.word	0x08005411
 80053f8:	08005419 	.word	0x08005419
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	2300      	movs	r3, #0
 800540a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540e:	e180      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005410:	2304      	movs	r3, #4
 8005412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005416:	e17c      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541e:	e178      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005420:	2310      	movs	r3, #16
 8005422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005426:	e174      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005428:	2320      	movs	r3, #32
 800542a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542e:	e170      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005430:	2340      	movs	r3, #64	; 0x40
 8005432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005436:	e16c      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543e:	e168      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <UART_SetConfig+0x34c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d142      	bne.n	80054d0 <UART_SetConfig+0x360>
 800544a:	4b18      	ldr	r3, [pc, #96]	; (80054ac <UART_SetConfig+0x33c>)
 800544c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	2b05      	cmp	r3, #5
 8005454:	d838      	bhi.n	80054c8 <UART_SetConfig+0x358>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x2ec>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	08005475 	.word	0x08005475
 8005460:	0800547d 	.word	0x0800547d
 8005464:	08005485 	.word	0x08005485
 8005468:	0800548d 	.word	0x0800548d
 800546c:	08005495 	.word	0x08005495
 8005470:	080054c1 	.word	0x080054c1
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547a:	e14a      	b.n	8005712 <UART_SetConfig+0x5a2>
 800547c:	2304      	movs	r3, #4
 800547e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005482:	e146      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005484:	2308      	movs	r3, #8
 8005486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548a:	e142      	b.n	8005712 <UART_SetConfig+0x5a2>
 800548c:	2310      	movs	r3, #16
 800548e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005492:	e13e      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005494:	2320      	movs	r3, #32
 8005496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800549a:	e13a      	b.n	8005712 <UART_SetConfig+0x5a2>
 800549c:	cfff69f3 	.word	0xcfff69f3
 80054a0:	58000c00 	.word	0x58000c00
 80054a4:	11fff4ff 	.word	0x11fff4ff
 80054a8:	40011000 	.word	0x40011000
 80054ac:	58024400 	.word	0x58024400
 80054b0:	40004400 	.word	0x40004400
 80054b4:	40004800 	.word	0x40004800
 80054b8:	40004c00 	.word	0x40004c00
 80054bc:	40005000 	.word	0x40005000
 80054c0:	2340      	movs	r3, #64	; 0x40
 80054c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054c6:	e124      	b.n	8005712 <UART_SetConfig+0x5a2>
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ce:	e120      	b.n	8005712 <UART_SetConfig+0x5a2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4acc      	ldr	r2, [pc, #816]	; (8005808 <UART_SetConfig+0x698>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d176      	bne.n	80055c8 <UART_SetConfig+0x458>
 80054da:	4bcc      	ldr	r3, [pc, #816]	; (800580c <UART_SetConfig+0x69c>)
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e2:	2b28      	cmp	r3, #40	; 0x28
 80054e4:	d86c      	bhi.n	80055c0 <UART_SetConfig+0x450>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x37c>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005591 	.word	0x08005591
 80054f0:	080055c1 	.word	0x080055c1
 80054f4:	080055c1 	.word	0x080055c1
 80054f8:	080055c1 	.word	0x080055c1
 80054fc:	080055c1 	.word	0x080055c1
 8005500:	080055c1 	.word	0x080055c1
 8005504:	080055c1 	.word	0x080055c1
 8005508:	080055c1 	.word	0x080055c1
 800550c:	08005599 	.word	0x08005599
 8005510:	080055c1 	.word	0x080055c1
 8005514:	080055c1 	.word	0x080055c1
 8005518:	080055c1 	.word	0x080055c1
 800551c:	080055c1 	.word	0x080055c1
 8005520:	080055c1 	.word	0x080055c1
 8005524:	080055c1 	.word	0x080055c1
 8005528:	080055c1 	.word	0x080055c1
 800552c:	080055a1 	.word	0x080055a1
 8005530:	080055c1 	.word	0x080055c1
 8005534:	080055c1 	.word	0x080055c1
 8005538:	080055c1 	.word	0x080055c1
 800553c:	080055c1 	.word	0x080055c1
 8005540:	080055c1 	.word	0x080055c1
 8005544:	080055c1 	.word	0x080055c1
 8005548:	080055c1 	.word	0x080055c1
 800554c:	080055a9 	.word	0x080055a9
 8005550:	080055c1 	.word	0x080055c1
 8005554:	080055c1 	.word	0x080055c1
 8005558:	080055c1 	.word	0x080055c1
 800555c:	080055c1 	.word	0x080055c1
 8005560:	080055c1 	.word	0x080055c1
 8005564:	080055c1 	.word	0x080055c1
 8005568:	080055c1 	.word	0x080055c1
 800556c:	080055b1 	.word	0x080055b1
 8005570:	080055c1 	.word	0x080055c1
 8005574:	080055c1 	.word	0x080055c1
 8005578:	080055c1 	.word	0x080055c1
 800557c:	080055c1 	.word	0x080055c1
 8005580:	080055c1 	.word	0x080055c1
 8005584:	080055c1 	.word	0x080055c1
 8005588:	080055c1 	.word	0x080055c1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e0bc      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559e:	e0b8      	b.n	8005712 <UART_SetConfig+0x5a2>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a6:	e0b4      	b.n	8005712 <UART_SetConfig+0x5a2>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ae:	e0b0      	b.n	8005712 <UART_SetConfig+0x5a2>
 80055b0:	2320      	movs	r3, #32
 80055b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b6:	e0ac      	b.n	8005712 <UART_SetConfig+0x5a2>
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055be:	e0a8      	b.n	8005712 <UART_SetConfig+0x5a2>
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c6:	e0a4      	b.n	8005712 <UART_SetConfig+0x5a2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a90      	ldr	r2, [pc, #576]	; (8005810 <UART_SetConfig+0x6a0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d130      	bne.n	8005634 <UART_SetConfig+0x4c4>
 80055d2:	4b8e      	ldr	r3, [pc, #568]	; (800580c <UART_SetConfig+0x69c>)
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d826      	bhi.n	800562c <UART_SetConfig+0x4bc>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <UART_SetConfig+0x474>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055fd 	.word	0x080055fd
 80055e8:	08005605 	.word	0x08005605
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005625 	.word	0x08005625
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e086      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e082      	b.n	8005712 <UART_SetConfig+0x5a2>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e07e      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e07a      	b.n	8005712 <UART_SetConfig+0x5a2>
 800561c:	2320      	movs	r3, #32
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e076      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e072      	b.n	8005712 <UART_SetConfig+0x5a2>
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005632:	e06e      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a76      	ldr	r2, [pc, #472]	; (8005814 <UART_SetConfig+0x6a4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d130      	bne.n	80056a0 <UART_SetConfig+0x530>
 800563e:	4b73      	ldr	r3, [pc, #460]	; (800580c <UART_SetConfig+0x69c>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	2b05      	cmp	r3, #5
 8005648:	d826      	bhi.n	8005698 <UART_SetConfig+0x528>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x4e0>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005669 	.word	0x08005669
 8005654:	08005671 	.word	0x08005671
 8005658:	08005679 	.word	0x08005679
 800565c:	08005681 	.word	0x08005681
 8005660:	08005689 	.word	0x08005689
 8005664:	08005691 	.word	0x08005691
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e050      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005676:	e04c      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567e:	e048      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005686:	e044      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005688:	2320      	movs	r3, #32
 800568a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568e:	e040      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005696:	e03c      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569e:	e038      	b.n	8005712 <UART_SetConfig+0x5a2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a5c      	ldr	r2, [pc, #368]	; (8005818 <UART_SetConfig+0x6a8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d130      	bne.n	800570c <UART_SetConfig+0x59c>
 80056aa:	4b58      	ldr	r3, [pc, #352]	; (800580c <UART_SetConfig+0x69c>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d826      	bhi.n	8005704 <UART_SetConfig+0x594>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <UART_SetConfig+0x54c>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056d5 	.word	0x080056d5
 80056c0:	080056dd 	.word	0x080056dd
 80056c4:	080056e5 	.word	0x080056e5
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	080056f5 	.word	0x080056f5
 80056d0:	080056fd 	.word	0x080056fd
 80056d4:	2302      	movs	r3, #2
 80056d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056da:	e01a      	b.n	8005712 <UART_SetConfig+0x5a2>
 80056dc:	2304      	movs	r3, #4
 80056de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e2:	e016      	b.n	8005712 <UART_SetConfig+0x5a2>
 80056e4:	2308      	movs	r3, #8
 80056e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ea:	e012      	b.n	8005712 <UART_SetConfig+0x5a2>
 80056ec:	2310      	movs	r3, #16
 80056ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f2:	e00e      	b.n	8005712 <UART_SetConfig+0x5a2>
 80056f4:	2320      	movs	r3, #32
 80056f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fa:	e00a      	b.n	8005712 <UART_SetConfig+0x5a2>
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005702:	e006      	b.n	8005712 <UART_SetConfig+0x5a2>
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570a:	e002      	b.n	8005712 <UART_SetConfig+0x5a2>
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a40      	ldr	r2, [pc, #256]	; (8005818 <UART_SetConfig+0x6a8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	f040 80ef 	bne.w	80058fc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800571e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005722:	2b20      	cmp	r3, #32
 8005724:	dc46      	bgt.n	80057b4 <UART_SetConfig+0x644>
 8005726:	2b02      	cmp	r3, #2
 8005728:	f2c0 8081 	blt.w	800582e <UART_SetConfig+0x6be>
 800572c:	3b02      	subs	r3, #2
 800572e:	2b1e      	cmp	r3, #30
 8005730:	d87d      	bhi.n	800582e <UART_SetConfig+0x6be>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <UART_SetConfig+0x5c8>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	080057bb 	.word	0x080057bb
 800573c:	0800582f 	.word	0x0800582f
 8005740:	080057c3 	.word	0x080057c3
 8005744:	0800582f 	.word	0x0800582f
 8005748:	0800582f 	.word	0x0800582f
 800574c:	0800582f 	.word	0x0800582f
 8005750:	080057d3 	.word	0x080057d3
 8005754:	0800582f 	.word	0x0800582f
 8005758:	0800582f 	.word	0x0800582f
 800575c:	0800582f 	.word	0x0800582f
 8005760:	0800582f 	.word	0x0800582f
 8005764:	0800582f 	.word	0x0800582f
 8005768:	0800582f 	.word	0x0800582f
 800576c:	0800582f 	.word	0x0800582f
 8005770:	080057e3 	.word	0x080057e3
 8005774:	0800582f 	.word	0x0800582f
 8005778:	0800582f 	.word	0x0800582f
 800577c:	0800582f 	.word	0x0800582f
 8005780:	0800582f 	.word	0x0800582f
 8005784:	0800582f 	.word	0x0800582f
 8005788:	0800582f 	.word	0x0800582f
 800578c:	0800582f 	.word	0x0800582f
 8005790:	0800582f 	.word	0x0800582f
 8005794:	0800582f 	.word	0x0800582f
 8005798:	0800582f 	.word	0x0800582f
 800579c:	0800582f 	.word	0x0800582f
 80057a0:	0800582f 	.word	0x0800582f
 80057a4:	0800582f 	.word	0x0800582f
 80057a8:	0800582f 	.word	0x0800582f
 80057ac:	0800582f 	.word	0x0800582f
 80057b0:	08005821 	.word	0x08005821
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d036      	beq.n	8005826 <UART_SetConfig+0x6b6>
 80057b8:	e039      	b.n	800582e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057ba:	f7fe fcf7 	bl	80041ac <HAL_RCCEx_GetD3PCLK1Freq>
 80057be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80057c0:	e03b      	b.n	800583a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fd06 	bl	80041d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057d0:	e033      	b.n	800583a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057d2:	f107 0308 	add.w	r3, r7, #8
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fe52 	bl	8004480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057e0:	e02b      	b.n	800583a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <UART_SetConfig+0x69c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d009      	beq.n	8005802 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <UART_SetConfig+0x69c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	08db      	lsrs	r3, r3, #3
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	4a08      	ldr	r2, [pc, #32]	; (800581c <UART_SetConfig+0x6ac>)
 80057fa:	fa22 f303 	lsr.w	r3, r2, r3
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005800:	e01b      	b.n	800583a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <UART_SetConfig+0x6ac>)
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005806:	e018      	b.n	800583a <UART_SetConfig+0x6ca>
 8005808:	40011400 	.word	0x40011400
 800580c:	58024400 	.word	0x58024400
 8005810:	40007800 	.word	0x40007800
 8005814:	40007c00 	.word	0x40007c00
 8005818:	58000c00 	.word	0x58000c00
 800581c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005820:	4bc4      	ldr	r3, [pc, #784]	; (8005b34 <UART_SetConfig+0x9c4>)
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005824:	e009      	b.n	800583a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800582c:	e005      	b.n	800583a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 81da 	beq.w	8005bf6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	4abc      	ldr	r2, [pc, #752]	; (8005b38 <UART_SetConfig+0x9c8>)
 8005848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800584c:	461a      	mov	r2, r3
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005850:	fbb3 f3f2 	udiv	r3, r3, r2
 8005854:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4413      	add	r3, r2
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	429a      	cmp	r2, r3
 8005864:	d305      	bcc.n	8005872 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800586c:	6a3a      	ldr	r2, [r7, #32]
 800586e:	429a      	cmp	r2, r3
 8005870:	d903      	bls.n	800587a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005878:	e1bd      	b.n	8005bf6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	4618      	mov	r0, r3
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	4aac      	ldr	r2, [pc, #688]	; (8005b38 <UART_SetConfig+0x9c8>)
 8005888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800588c:	b29a      	uxth	r2, r3
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	f7fa fd75 	bl	8000380 <__aeabi_uldivmod>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4610      	mov	r0, r2
 800589c:	4619      	mov	r1, r3
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	020b      	lsls	r3, r1, #8
 80058a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058ac:	0202      	lsls	r2, r0, #8
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	6849      	ldr	r1, [r1, #4]
 80058b2:	0849      	lsrs	r1, r1, #1
 80058b4:	4608      	mov	r0, r1
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	1814      	adds	r4, r2, r0
 80058bc:	eb43 0501 	adc.w	r5, r3, r1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	461a      	mov	r2, r3
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fa fd57 	bl	8000380 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4613      	mov	r3, r2
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e0:	d308      	bcc.n	80058f4 <UART_SetConfig+0x784>
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e8:	d204      	bcs.n	80058f4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	e180      	b.n	8005bf6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80058fa:	e17c      	b.n	8005bf6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005904:	f040 80bf 	bne.w	8005a86 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800590c:	2b20      	cmp	r3, #32
 800590e:	dc49      	bgt.n	80059a4 <UART_SetConfig+0x834>
 8005910:	2b00      	cmp	r3, #0
 8005912:	db7c      	blt.n	8005a0e <UART_SetConfig+0x89e>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d87a      	bhi.n	8005a0e <UART_SetConfig+0x89e>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <UART_SetConfig+0x7b0>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	080059ab 	.word	0x080059ab
 8005924:	080059b3 	.word	0x080059b3
 8005928:	08005a0f 	.word	0x08005a0f
 800592c:	08005a0f 	.word	0x08005a0f
 8005930:	080059bb 	.word	0x080059bb
 8005934:	08005a0f 	.word	0x08005a0f
 8005938:	08005a0f 	.word	0x08005a0f
 800593c:	08005a0f 	.word	0x08005a0f
 8005940:	080059cb 	.word	0x080059cb
 8005944:	08005a0f 	.word	0x08005a0f
 8005948:	08005a0f 	.word	0x08005a0f
 800594c:	08005a0f 	.word	0x08005a0f
 8005950:	08005a0f 	.word	0x08005a0f
 8005954:	08005a0f 	.word	0x08005a0f
 8005958:	08005a0f 	.word	0x08005a0f
 800595c:	08005a0f 	.word	0x08005a0f
 8005960:	080059db 	.word	0x080059db
 8005964:	08005a0f 	.word	0x08005a0f
 8005968:	08005a0f 	.word	0x08005a0f
 800596c:	08005a0f 	.word	0x08005a0f
 8005970:	08005a0f 	.word	0x08005a0f
 8005974:	08005a0f 	.word	0x08005a0f
 8005978:	08005a0f 	.word	0x08005a0f
 800597c:	08005a0f 	.word	0x08005a0f
 8005980:	08005a0f 	.word	0x08005a0f
 8005984:	08005a0f 	.word	0x08005a0f
 8005988:	08005a0f 	.word	0x08005a0f
 800598c:	08005a0f 	.word	0x08005a0f
 8005990:	08005a0f 	.word	0x08005a0f
 8005994:	08005a0f 	.word	0x08005a0f
 8005998:	08005a0f 	.word	0x08005a0f
 800599c:	08005a0f 	.word	0x08005a0f
 80059a0:	08005a01 	.word	0x08005a01
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d02e      	beq.n	8005a06 <UART_SetConfig+0x896>
 80059a8:	e031      	b.n	8005a0e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059aa:	f7fd fc93 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 80059ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80059b0:	e033      	b.n	8005a1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b2:	f7fd fca5 	bl	8003300 <HAL_RCC_GetPCLK2Freq>
 80059b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80059b8:	e02f      	b.n	8005a1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ba:	f107 0314 	add.w	r3, r7, #20
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fc0a 	bl	80041d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059c8:	e027      	b.n	8005a1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ca:	f107 0308 	add.w	r3, r7, #8
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fd56 	bl	8004480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059d8:	e01f      	b.n	8005a1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059da:	4b58      	ldr	r3, [pc, #352]	; (8005b3c <UART_SetConfig+0x9cc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059e6:	4b55      	ldr	r3, [pc, #340]	; (8005b3c <UART_SetConfig+0x9cc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	4a53      	ldr	r2, [pc, #332]	; (8005b40 <UART_SetConfig+0x9d0>)
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059f8:	e00f      	b.n	8005a1a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80059fa:	4b51      	ldr	r3, [pc, #324]	; (8005b40 <UART_SetConfig+0x9d0>)
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059fe:	e00c      	b.n	8005a1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a00:	4b4c      	ldr	r3, [pc, #304]	; (8005b34 <UART_SetConfig+0x9c4>)
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a0c:	e005      	b.n	8005a1a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005a18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80ea 	beq.w	8005bf6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	4a44      	ldr	r2, [pc, #272]	; (8005b38 <UART_SetConfig+0x9c8>)
 8005a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a34:	005a      	lsls	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	2b0f      	cmp	r3, #15
 8005a4e:	d916      	bls.n	8005a7e <UART_SetConfig+0x90e>
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a56:	d212      	bcs.n	8005a7e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f023 030f 	bic.w	r3, r3, #15
 8005a60:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a70:	4313      	orrs	r3, r2
 8005a72:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a7a:	60da      	str	r2, [r3, #12]
 8005a7c:	e0bb      	b.n	8005bf6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a84:	e0b7      	b.n	8005bf6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	dc4a      	bgt.n	8005b24 <UART_SetConfig+0x9b4>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f2c0 8086 	blt.w	8005ba0 <UART_SetConfig+0xa30>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	f200 8083 	bhi.w	8005ba0 <UART_SetConfig+0xa30>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <UART_SetConfig+0x930>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005b2b 	.word	0x08005b2b
 8005aa4:	08005b45 	.word	0x08005b45
 8005aa8:	08005ba1 	.word	0x08005ba1
 8005aac:	08005ba1 	.word	0x08005ba1
 8005ab0:	08005b4d 	.word	0x08005b4d
 8005ab4:	08005ba1 	.word	0x08005ba1
 8005ab8:	08005ba1 	.word	0x08005ba1
 8005abc:	08005ba1 	.word	0x08005ba1
 8005ac0:	08005b5d 	.word	0x08005b5d
 8005ac4:	08005ba1 	.word	0x08005ba1
 8005ac8:	08005ba1 	.word	0x08005ba1
 8005acc:	08005ba1 	.word	0x08005ba1
 8005ad0:	08005ba1 	.word	0x08005ba1
 8005ad4:	08005ba1 	.word	0x08005ba1
 8005ad8:	08005ba1 	.word	0x08005ba1
 8005adc:	08005ba1 	.word	0x08005ba1
 8005ae0:	08005b6d 	.word	0x08005b6d
 8005ae4:	08005ba1 	.word	0x08005ba1
 8005ae8:	08005ba1 	.word	0x08005ba1
 8005aec:	08005ba1 	.word	0x08005ba1
 8005af0:	08005ba1 	.word	0x08005ba1
 8005af4:	08005ba1 	.word	0x08005ba1
 8005af8:	08005ba1 	.word	0x08005ba1
 8005afc:	08005ba1 	.word	0x08005ba1
 8005b00:	08005ba1 	.word	0x08005ba1
 8005b04:	08005ba1 	.word	0x08005ba1
 8005b08:	08005ba1 	.word	0x08005ba1
 8005b0c:	08005ba1 	.word	0x08005ba1
 8005b10:	08005ba1 	.word	0x08005ba1
 8005b14:	08005ba1 	.word	0x08005ba1
 8005b18:	08005ba1 	.word	0x08005ba1
 8005b1c:	08005ba1 	.word	0x08005ba1
 8005b20:	08005b93 	.word	0x08005b93
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d037      	beq.n	8005b98 <UART_SetConfig+0xa28>
 8005b28:	e03a      	b.n	8005ba0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2a:	f7fd fbd3 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 8005b2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b30:	e03c      	b.n	8005bac <UART_SetConfig+0xa3c>
 8005b32:	bf00      	nop
 8005b34:	003d0900 	.word	0x003d0900
 8005b38:	08007090 	.word	0x08007090
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7fd fbdc 	bl	8003300 <HAL_RCC_GetPCLK2Freq>
 8005b48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b4a:	e02f      	b.n	8005bac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b4c:	f107 0314 	add.w	r3, r7, #20
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe fb41 	bl	80041d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b5a:	e027      	b.n	8005bac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b5c:	f107 0308 	add.w	r3, r7, #8
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe fc8d 	bl	8004480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b6a:	e01f      	b.n	8005bac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b6c:	4b2c      	ldr	r3, [pc, #176]	; (8005c20 <UART_SetConfig+0xab0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b78:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <UART_SetConfig+0xab0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	08db      	lsrs	r3, r3, #3
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	4a28      	ldr	r2, [pc, #160]	; (8005c24 <UART_SetConfig+0xab4>)
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b8a:	e00f      	b.n	8005bac <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b25      	ldr	r3, [pc, #148]	; (8005c24 <UART_SetConfig+0xab4>)
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b90:	e00c      	b.n	8005bac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b92:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <UART_SetConfig+0xab8>)
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b96:	e009      	b.n	8005bac <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b9e:	e005      	b.n	8005bac <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005baa:	bf00      	nop
    }

    if (pclk != 0U)
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d021      	beq.n	8005bf6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <UART_SetConfig+0xabc>)
 8005bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	441a      	add	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d908      	bls.n	8005bf0 <UART_SetConfig+0xa80>
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be4:	d204      	bcs.n	8005bf0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bec:	60da      	str	r2, [r3, #12]
 8005bee:	e002      	b.n	8005bf6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3738      	adds	r7, #56	; 0x38
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	58024400 	.word	0x58024400
 8005c24:	03d09000 	.word	0x03d09000
 8005c28:	003d0900 	.word	0x003d0900
 8005c2c:	08007090 	.word	0x08007090

08005c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2e:	d10a      	bne.n	8005d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d84:	f7fb f8f8 	bl	8000f78 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d10e      	bne.n	8005db6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f82f 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e025      	b.n	8005e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d10e      	bne.n	8005de2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f819 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e00f      	b.n	8005e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4613      	mov	r3, r2
 8005e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1a:	e062      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	d05e      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e24:	f7fb f8a8 	bl	8000f78 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d302      	bcc.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d11d      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e045      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d02e      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e92:	d126      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005eac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e00f      	b.n	8005f02 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4013      	ands	r3, r2
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d08d      	beq.n	8005e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f22:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6899      	ldr	r1, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <UART_EndRxTransfer+0x60>)
 8005f30:	400b      	ands	r3, r1
 8005f32:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d107      	bne.n	8005f4c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0210 	bic.w	r2, r2, #16
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	effffffe 	.word	0xeffffffe

08005f70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff f8d8 	bl	8005144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff f8b4 	bl	8005130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_UARTEx_DisableFifoMode+0x16>
 800601e:	2302      	movs	r3, #2
 8006020:	e027      	b.n	8006072 <HAL_UARTEx_DisableFifoMode+0x66>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2224      	movs	r2, #36	; 0x24
 800602e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0201 	bic.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006050:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006092:	2302      	movs	r3, #2
 8006094:	e02d      	b.n	80060f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2224      	movs	r2, #36	; 0x24
 80060a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f850 	bl	8006178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800610e:	2302      	movs	r3, #2
 8006110:	e02d      	b.n	800616e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2224      	movs	r2, #36	; 0x24
 800611e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f812 	bl	8006178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006184:	2b00      	cmp	r3, #0
 8006186:	d108      	bne.n	800619a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006198:	e031      	b.n	80061fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800619a:	2310      	movs	r3, #16
 800619c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800619e:	2310      	movs	r3, #16
 80061a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	0e5b      	lsrs	r3, r3, #25
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	0f5b      	lsrs	r3, r3, #29
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061c2:	7bbb      	ldrb	r3, [r7, #14]
 80061c4:	7b3a      	ldrb	r2, [r7, #12]
 80061c6:	4911      	ldr	r1, [pc, #68]	; (800620c <UARTEx_SetNbDataToProcess+0x94>)
 80061c8:	5c8a      	ldrb	r2, [r1, r2]
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ce:	7b3a      	ldrb	r2, [r7, #12]
 80061d0:	490f      	ldr	r1, [pc, #60]	; (8006210 <UARTEx_SetNbDataToProcess+0x98>)
 80061d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	7b7a      	ldrb	r2, [r7, #13]
 80061e4:	4909      	ldr	r1, [pc, #36]	; (800620c <UARTEx_SetNbDataToProcess+0x94>)
 80061e6:	5c8a      	ldrb	r2, [r1, r2]
 80061e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061ec:	7b7a      	ldrb	r2, [r7, #13]
 80061ee:	4908      	ldr	r1, [pc, #32]	; (8006210 <UARTEx_SetNbDataToProcess+0x98>)
 80061f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	080070a8 	.word	0x080070a8
 8006210:	080070b0 	.word	0x080070b0

08006214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006214:	b084      	sub	sp, #16
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	f107 001c 	add.w	r0, r7, #28
 8006222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	2b01      	cmp	r3, #1
 800622a:	d120      	bne.n	800626e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	4b2a      	ldr	r3, [pc, #168]	; (80062e8 <USB_CoreInit+0xd4>)
 800623e:	4013      	ands	r3, r2
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d105      	bne.n	8006262 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa60 	bl	8006728 <USB_CoreReset>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
 800626c:	e01a      	b.n	80062a4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa54 	bl	8006728 <USB_CoreReset>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
 8006296:	e005      	b.n	80062a4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d116      	bne.n	80062d8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062b8:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <USB_CoreInit+0xd8>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f043 0206 	orr.w	r2, r3, #6
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e4:	b004      	add	sp, #16
 80062e6:	4770      	bx	lr
 80062e8:	ffbdffbf 	.word	0xffbdffbf
 80062ec:	03ee0000 	.word	0x03ee0000

080062f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 0201 	bic.w	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d106      	bne.n	800633e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
 800633c:	e00b      	b.n	8006356 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]
 8006350:	e001      	b.n	8006356 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e003      	b.n	800635e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006356:	2032      	movs	r0, #50	; 0x32
 8006358:	f7fa fe1a 	bl	8000f90 <HAL_Delay>

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006368:	b084      	sub	sp, #16
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	e009      	b.n	800639c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	3340      	adds	r3, #64	; 0x40
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	2200      	movs	r2, #0
 8006394:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	3301      	adds	r3, #1
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b0e      	cmp	r3, #14
 80063a0:	d9f2      	bls.n	8006388 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11c      	bne.n	80063e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b6:	f043 0302 	orr.w	r3, r3, #2
 80063ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	e005      	b.n	80063ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063f4:	461a      	mov	r2, r3
 80063f6:	2300      	movs	r3, #0
 80063f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006400:	4619      	mov	r1, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	461a      	mov	r2, r3
 800640a:	680b      	ldr	r3, [r1, #0]
 800640c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	2b01      	cmp	r3, #1
 8006412:	d10c      	bne.n	800642e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800641a:	2100      	movs	r1, #0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f949 	bl	80066b4 <USB_SetDevSpeed>
 8006422:	e008      	b.n	8006436 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006424:	2101      	movs	r1, #1
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f944 	bl	80066b4 <USB_SetDevSpeed>
 800642c:	e003      	b.n	8006436 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800642e:	2103      	movs	r1, #3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f93f 	bl	80066b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006436:	2110      	movs	r1, #16
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f8f3 	bl	8006624 <USB_FlushTxFifo>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f911 	bl	8006670 <USB_FlushRxFifo>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645e:	461a      	mov	r2, r3
 8006460:	2300      	movs	r3, #0
 8006462:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646a:	461a      	mov	r2, r3
 800646c:	2300      	movs	r3, #0
 800646e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	461a      	mov	r2, r3
 8006478:	2300      	movs	r3, #0
 800647a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800647c:	2300      	movs	r3, #0
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	e043      	b.n	800650a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006498:	d118      	bne.n	80064cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	461a      	mov	r2, r3
 80064ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	e013      	b.n	80064de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c2:	461a      	mov	r2, r3
 80064c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e008      	b.n	80064de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	461a      	mov	r2, r3
 80064da:	2300      	movs	r3, #0
 80064dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ea:	461a      	mov	r2, r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	461a      	mov	r2, r3
 80064fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006502:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	3301      	adds	r3, #1
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	429a      	cmp	r2, r3
 8006510:	d3b7      	bcc.n	8006482 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006512:	2300      	movs	r3, #0
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	e043      	b.n	80065a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800652a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800652e:	d118      	bne.n	8006562 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006542:	461a      	mov	r2, r3
 8006544:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e013      	b.n	8006574 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	461a      	mov	r2, r3
 800655a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	e008      	b.n	8006574 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656e:	461a      	mov	r2, r3
 8006570:	2300      	movs	r3, #0
 8006572:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	461a      	mov	r2, r3
 8006582:	2300      	movs	r3, #0
 8006584:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	461a      	mov	r2, r3
 8006594:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006598:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	3301      	adds	r3, #1
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d3b7      	bcc.n	8006518 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f043 0210 	orr.w	r2, r3, #16
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	4b0e      	ldr	r3, [pc, #56]	; (800661c <USB_DevInit+0x2b4>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f043 0208 	orr.w	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d105      	bne.n	800660c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699a      	ldr	r2, [r3, #24]
 8006604:	4b06      	ldr	r3, [pc, #24]	; (8006620 <USB_DevInit+0x2b8>)
 8006606:	4313      	orrs	r3, r2
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006618:	b004      	add	sp, #16
 800661a:	4770      	bx	lr
 800661c:	803c3800 	.word	0x803c3800
 8006620:	40000004 	.word	0x40000004

08006624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	019b      	lsls	r3, r3, #6
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a09      	ldr	r2, [pc, #36]	; (800666c <USB_FlushTxFifo+0x48>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e006      	b.n	800665e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b20      	cmp	r3, #32
 800665a:	d0f0      	beq.n	800663e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	00030d40 	.word	0x00030d40

08006670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2210      	movs	r2, #16
 8006680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <USB_FlushRxFifo+0x40>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d901      	bls.n	8006694 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e006      	b.n	80066a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b10      	cmp	r3, #16
 800669e:	d0f0      	beq.n	8006682 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	00030d40 	.word	0x00030d40

080066b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066d4:	4313      	orrs	r3, r2
 80066d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006700:	f023 0303 	bic.w	r3, r3, #3
 8006704:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006714:	f043 0302 	orr.w	r3, r3, #2
 8006718:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3301      	adds	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a13      	ldr	r2, [pc, #76]	; (800678c <USB_CoreReset+0x64>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d901      	bls.n	8006746 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e01b      	b.n	800677e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	daf2      	bge.n	8006734 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f043 0201 	orr.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a09      	ldr	r2, [pc, #36]	; (800678c <USB_CoreReset+0x64>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e006      	b.n	800677e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d0f0      	beq.n	800675e <USB_CoreReset+0x36>

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	00030d40 	.word	0x00030d40

08006790 <__errno>:
 8006790:	4b01      	ldr	r3, [pc, #4]	; (8006798 <__errno+0x8>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	24000010 	.word	0x24000010

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4d0d      	ldr	r5, [pc, #52]	; (80067d4 <__libc_init_array+0x38>)
 80067a0:	4c0d      	ldr	r4, [pc, #52]	; (80067d8 <__libc_init_array+0x3c>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	2600      	movs	r6, #0
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	4d0b      	ldr	r5, [pc, #44]	; (80067dc <__libc_init_array+0x40>)
 80067ae:	4c0c      	ldr	r4, [pc, #48]	; (80067e0 <__libc_init_array+0x44>)
 80067b0:	f000 fc4e 	bl	8007050 <_init>
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	2600      	movs	r6, #0
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	080070f4 	.word	0x080070f4
 80067d8:	080070f4 	.word	0x080070f4
 80067dc:	080070f4 	.word	0x080070f4
 80067e0:	080070f8 	.word	0x080070f8

080067e4 <memset>:
 80067e4:	4402      	add	r2, r0
 80067e6:	4603      	mov	r3, r0
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d100      	bne.n	80067ee <memset+0xa>
 80067ec:	4770      	bx	lr
 80067ee:	f803 1b01 	strb.w	r1, [r3], #1
 80067f2:	e7f9      	b.n	80067e8 <memset+0x4>

080067f4 <siprintf>:
 80067f4:	b40e      	push	{r1, r2, r3}
 80067f6:	b500      	push	{lr}
 80067f8:	b09c      	sub	sp, #112	; 0x70
 80067fa:	ab1d      	add	r3, sp, #116	; 0x74
 80067fc:	9002      	str	r0, [sp, #8]
 80067fe:	9006      	str	r0, [sp, #24]
 8006800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006804:	4809      	ldr	r0, [pc, #36]	; (800682c <siprintf+0x38>)
 8006806:	9107      	str	r1, [sp, #28]
 8006808:	9104      	str	r1, [sp, #16]
 800680a:	4909      	ldr	r1, [pc, #36]	; (8006830 <siprintf+0x3c>)
 800680c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	6800      	ldr	r0, [r0, #0]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	a902      	add	r1, sp, #8
 8006818:	f000 f868 	bl	80068ec <_svfiprintf_r>
 800681c:	9b02      	ldr	r3, [sp, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	b01c      	add	sp, #112	; 0x70
 8006824:	f85d eb04 	ldr.w	lr, [sp], #4
 8006828:	b003      	add	sp, #12
 800682a:	4770      	bx	lr
 800682c:	24000010 	.word	0x24000010
 8006830:	ffff0208 	.word	0xffff0208

08006834 <__ssputs_r>:
 8006834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006838:	688e      	ldr	r6, [r1, #8]
 800683a:	429e      	cmp	r6, r3
 800683c:	4682      	mov	sl, r0
 800683e:	460c      	mov	r4, r1
 8006840:	4690      	mov	r8, r2
 8006842:	461f      	mov	r7, r3
 8006844:	d838      	bhi.n	80068b8 <__ssputs_r+0x84>
 8006846:	898a      	ldrh	r2, [r1, #12]
 8006848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800684c:	d032      	beq.n	80068b4 <__ssputs_r+0x80>
 800684e:	6825      	ldr	r5, [r4, #0]
 8006850:	6909      	ldr	r1, [r1, #16]
 8006852:	eba5 0901 	sub.w	r9, r5, r1
 8006856:	6965      	ldr	r5, [r4, #20]
 8006858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800685c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006860:	3301      	adds	r3, #1
 8006862:	444b      	add	r3, r9
 8006864:	106d      	asrs	r5, r5, #1
 8006866:	429d      	cmp	r5, r3
 8006868:	bf38      	it	cc
 800686a:	461d      	movcc	r5, r3
 800686c:	0553      	lsls	r3, r2, #21
 800686e:	d531      	bpl.n	80068d4 <__ssputs_r+0xa0>
 8006870:	4629      	mov	r1, r5
 8006872:	f000 fb47 	bl	8006f04 <_malloc_r>
 8006876:	4606      	mov	r6, r0
 8006878:	b950      	cbnz	r0, 8006890 <__ssputs_r+0x5c>
 800687a:	230c      	movs	r3, #12
 800687c:	f8ca 3000 	str.w	r3, [sl]
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006890:	6921      	ldr	r1, [r4, #16]
 8006892:	464a      	mov	r2, r9
 8006894:	f000 fabe 	bl	8006e14 <memcpy>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	6126      	str	r6, [r4, #16]
 80068a6:	6165      	str	r5, [r4, #20]
 80068a8:	444e      	add	r6, r9
 80068aa:	eba5 0509 	sub.w	r5, r5, r9
 80068ae:	6026      	str	r6, [r4, #0]
 80068b0:	60a5      	str	r5, [r4, #8]
 80068b2:	463e      	mov	r6, r7
 80068b4:	42be      	cmp	r6, r7
 80068b6:	d900      	bls.n	80068ba <__ssputs_r+0x86>
 80068b8:	463e      	mov	r6, r7
 80068ba:	4632      	mov	r2, r6
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	4641      	mov	r1, r8
 80068c0:	f000 fab6 	bl	8006e30 <memmove>
 80068c4:	68a3      	ldr	r3, [r4, #8]
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	1b9b      	subs	r3, r3, r6
 80068ca:	4432      	add	r2, r6
 80068cc:	60a3      	str	r3, [r4, #8]
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	2000      	movs	r0, #0
 80068d2:	e7db      	b.n	800688c <__ssputs_r+0x58>
 80068d4:	462a      	mov	r2, r5
 80068d6:	f000 fb6f 	bl	8006fb8 <_realloc_r>
 80068da:	4606      	mov	r6, r0
 80068dc:	2800      	cmp	r0, #0
 80068de:	d1e1      	bne.n	80068a4 <__ssputs_r+0x70>
 80068e0:	6921      	ldr	r1, [r4, #16]
 80068e2:	4650      	mov	r0, sl
 80068e4:	f000 fabe 	bl	8006e64 <_free_r>
 80068e8:	e7c7      	b.n	800687a <__ssputs_r+0x46>
	...

080068ec <_svfiprintf_r>:
 80068ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	4698      	mov	r8, r3
 80068f2:	898b      	ldrh	r3, [r1, #12]
 80068f4:	061b      	lsls	r3, r3, #24
 80068f6:	b09d      	sub	sp, #116	; 0x74
 80068f8:	4607      	mov	r7, r0
 80068fa:	460d      	mov	r5, r1
 80068fc:	4614      	mov	r4, r2
 80068fe:	d50e      	bpl.n	800691e <_svfiprintf_r+0x32>
 8006900:	690b      	ldr	r3, [r1, #16]
 8006902:	b963      	cbnz	r3, 800691e <_svfiprintf_r+0x32>
 8006904:	2140      	movs	r1, #64	; 0x40
 8006906:	f000 fafd 	bl	8006f04 <_malloc_r>
 800690a:	6028      	str	r0, [r5, #0]
 800690c:	6128      	str	r0, [r5, #16]
 800690e:	b920      	cbnz	r0, 800691a <_svfiprintf_r+0x2e>
 8006910:	230c      	movs	r3, #12
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
 8006918:	e0d1      	b.n	8006abe <_svfiprintf_r+0x1d2>
 800691a:	2340      	movs	r3, #64	; 0x40
 800691c:	616b      	str	r3, [r5, #20]
 800691e:	2300      	movs	r3, #0
 8006920:	9309      	str	r3, [sp, #36]	; 0x24
 8006922:	2320      	movs	r3, #32
 8006924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006928:	f8cd 800c 	str.w	r8, [sp, #12]
 800692c:	2330      	movs	r3, #48	; 0x30
 800692e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ad8 <_svfiprintf_r+0x1ec>
 8006932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006936:	f04f 0901 	mov.w	r9, #1
 800693a:	4623      	mov	r3, r4
 800693c:	469a      	mov	sl, r3
 800693e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006942:	b10a      	cbz	r2, 8006948 <_svfiprintf_r+0x5c>
 8006944:	2a25      	cmp	r2, #37	; 0x25
 8006946:	d1f9      	bne.n	800693c <_svfiprintf_r+0x50>
 8006948:	ebba 0b04 	subs.w	fp, sl, r4
 800694c:	d00b      	beq.n	8006966 <_svfiprintf_r+0x7a>
 800694e:	465b      	mov	r3, fp
 8006950:	4622      	mov	r2, r4
 8006952:	4629      	mov	r1, r5
 8006954:	4638      	mov	r0, r7
 8006956:	f7ff ff6d 	bl	8006834 <__ssputs_r>
 800695a:	3001      	adds	r0, #1
 800695c:	f000 80aa 	beq.w	8006ab4 <_svfiprintf_r+0x1c8>
 8006960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006962:	445a      	add	r2, fp
 8006964:	9209      	str	r2, [sp, #36]	; 0x24
 8006966:	f89a 3000 	ldrb.w	r3, [sl]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80a2 	beq.w	8006ab4 <_svfiprintf_r+0x1c8>
 8006970:	2300      	movs	r3, #0
 8006972:	f04f 32ff 	mov.w	r2, #4294967295
 8006976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800697a:	f10a 0a01 	add.w	sl, sl, #1
 800697e:	9304      	str	r3, [sp, #16]
 8006980:	9307      	str	r3, [sp, #28]
 8006982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006986:	931a      	str	r3, [sp, #104]	; 0x68
 8006988:	4654      	mov	r4, sl
 800698a:	2205      	movs	r2, #5
 800698c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006990:	4851      	ldr	r0, [pc, #324]	; (8006ad8 <_svfiprintf_r+0x1ec>)
 8006992:	f7f9 fca5 	bl	80002e0 <memchr>
 8006996:	9a04      	ldr	r2, [sp, #16]
 8006998:	b9d8      	cbnz	r0, 80069d2 <_svfiprintf_r+0xe6>
 800699a:	06d0      	lsls	r0, r2, #27
 800699c:	bf44      	itt	mi
 800699e:	2320      	movmi	r3, #32
 80069a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a4:	0711      	lsls	r1, r2, #28
 80069a6:	bf44      	itt	mi
 80069a8:	232b      	movmi	r3, #43	; 0x2b
 80069aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ae:	f89a 3000 	ldrb.w	r3, [sl]
 80069b2:	2b2a      	cmp	r3, #42	; 0x2a
 80069b4:	d015      	beq.n	80069e2 <_svfiprintf_r+0xf6>
 80069b6:	9a07      	ldr	r2, [sp, #28]
 80069b8:	4654      	mov	r4, sl
 80069ba:	2000      	movs	r0, #0
 80069bc:	f04f 0c0a 	mov.w	ip, #10
 80069c0:	4621      	mov	r1, r4
 80069c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c6:	3b30      	subs	r3, #48	; 0x30
 80069c8:	2b09      	cmp	r3, #9
 80069ca:	d94e      	bls.n	8006a6a <_svfiprintf_r+0x17e>
 80069cc:	b1b0      	cbz	r0, 80069fc <_svfiprintf_r+0x110>
 80069ce:	9207      	str	r2, [sp, #28]
 80069d0:	e014      	b.n	80069fc <_svfiprintf_r+0x110>
 80069d2:	eba0 0308 	sub.w	r3, r0, r8
 80069d6:	fa09 f303 	lsl.w	r3, r9, r3
 80069da:	4313      	orrs	r3, r2
 80069dc:	9304      	str	r3, [sp, #16]
 80069de:	46a2      	mov	sl, r4
 80069e0:	e7d2      	b.n	8006988 <_svfiprintf_r+0x9c>
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	1d19      	adds	r1, r3, #4
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	9103      	str	r1, [sp, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bfbb      	ittet	lt
 80069ee:	425b      	neglt	r3, r3
 80069f0:	f042 0202 	orrlt.w	r2, r2, #2
 80069f4:	9307      	strge	r3, [sp, #28]
 80069f6:	9307      	strlt	r3, [sp, #28]
 80069f8:	bfb8      	it	lt
 80069fa:	9204      	strlt	r2, [sp, #16]
 80069fc:	7823      	ldrb	r3, [r4, #0]
 80069fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006a00:	d10c      	bne.n	8006a1c <_svfiprintf_r+0x130>
 8006a02:	7863      	ldrb	r3, [r4, #1]
 8006a04:	2b2a      	cmp	r3, #42	; 0x2a
 8006a06:	d135      	bne.n	8006a74 <_svfiprintf_r+0x188>
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	1d1a      	adds	r2, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	9203      	str	r2, [sp, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bfb8      	it	lt
 8006a14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a18:	3402      	adds	r4, #2
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ae8 <_svfiprintf_r+0x1fc>
 8006a20:	7821      	ldrb	r1, [r4, #0]
 8006a22:	2203      	movs	r2, #3
 8006a24:	4650      	mov	r0, sl
 8006a26:	f7f9 fc5b 	bl	80002e0 <memchr>
 8006a2a:	b140      	cbz	r0, 8006a3e <_svfiprintf_r+0x152>
 8006a2c:	2340      	movs	r3, #64	; 0x40
 8006a2e:	eba0 000a 	sub.w	r0, r0, sl
 8006a32:	fa03 f000 	lsl.w	r0, r3, r0
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	4303      	orrs	r3, r0
 8006a3a:	3401      	adds	r4, #1
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a42:	4826      	ldr	r0, [pc, #152]	; (8006adc <_svfiprintf_r+0x1f0>)
 8006a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a48:	2206      	movs	r2, #6
 8006a4a:	f7f9 fc49 	bl	80002e0 <memchr>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d038      	beq.n	8006ac4 <_svfiprintf_r+0x1d8>
 8006a52:	4b23      	ldr	r3, [pc, #140]	; (8006ae0 <_svfiprintf_r+0x1f4>)
 8006a54:	bb1b      	cbnz	r3, 8006a9e <_svfiprintf_r+0x1b2>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	3307      	adds	r3, #7
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	3308      	adds	r3, #8
 8006a60:	9303      	str	r3, [sp, #12]
 8006a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a64:	4433      	add	r3, r6
 8006a66:	9309      	str	r3, [sp, #36]	; 0x24
 8006a68:	e767      	b.n	800693a <_svfiprintf_r+0x4e>
 8006a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a6e:	460c      	mov	r4, r1
 8006a70:	2001      	movs	r0, #1
 8006a72:	e7a5      	b.n	80069c0 <_svfiprintf_r+0xd4>
 8006a74:	2300      	movs	r3, #0
 8006a76:	3401      	adds	r4, #1
 8006a78:	9305      	str	r3, [sp, #20]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f04f 0c0a 	mov.w	ip, #10
 8006a80:	4620      	mov	r0, r4
 8006a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a86:	3a30      	subs	r2, #48	; 0x30
 8006a88:	2a09      	cmp	r2, #9
 8006a8a:	d903      	bls.n	8006a94 <_svfiprintf_r+0x1a8>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0c5      	beq.n	8006a1c <_svfiprintf_r+0x130>
 8006a90:	9105      	str	r1, [sp, #20]
 8006a92:	e7c3      	b.n	8006a1c <_svfiprintf_r+0x130>
 8006a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a98:	4604      	mov	r4, r0
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e7f0      	b.n	8006a80 <_svfiprintf_r+0x194>
 8006a9e:	ab03      	add	r3, sp, #12
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <_svfiprintf_r+0x1f8>)
 8006aa6:	a904      	add	r1, sp, #16
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f3af 8000 	nop.w
 8006aae:	1c42      	adds	r2, r0, #1
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	d1d6      	bne.n	8006a62 <_svfiprintf_r+0x176>
 8006ab4:	89ab      	ldrh	r3, [r5, #12]
 8006ab6:	065b      	lsls	r3, r3, #25
 8006ab8:	f53f af2c 	bmi.w	8006914 <_svfiprintf_r+0x28>
 8006abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006abe:	b01d      	add	sp, #116	; 0x74
 8006ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac4:	ab03      	add	r3, sp, #12
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <_svfiprintf_r+0x1f8>)
 8006acc:	a904      	add	r1, sp, #16
 8006ace:	4638      	mov	r0, r7
 8006ad0:	f000 f87a 	bl	8006bc8 <_printf_i>
 8006ad4:	e7eb      	b.n	8006aae <_svfiprintf_r+0x1c2>
 8006ad6:	bf00      	nop
 8006ad8:	080070b8 	.word	0x080070b8
 8006adc:	080070c2 	.word	0x080070c2
 8006ae0:	00000000 	.word	0x00000000
 8006ae4:	08006835 	.word	0x08006835
 8006ae8:	080070be 	.word	0x080070be

08006aec <_printf_common>:
 8006aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af0:	4616      	mov	r6, r2
 8006af2:	4699      	mov	r9, r3
 8006af4:	688a      	ldr	r2, [r1, #8]
 8006af6:	690b      	ldr	r3, [r1, #16]
 8006af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006afc:	4293      	cmp	r3, r2
 8006afe:	bfb8      	it	lt
 8006b00:	4613      	movlt	r3, r2
 8006b02:	6033      	str	r3, [r6, #0]
 8006b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b08:	4607      	mov	r7, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	b10a      	cbz	r2, 8006b12 <_printf_common+0x26>
 8006b0e:	3301      	adds	r3, #1
 8006b10:	6033      	str	r3, [r6, #0]
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	0699      	lsls	r1, r3, #26
 8006b16:	bf42      	ittt	mi
 8006b18:	6833      	ldrmi	r3, [r6, #0]
 8006b1a:	3302      	addmi	r3, #2
 8006b1c:	6033      	strmi	r3, [r6, #0]
 8006b1e:	6825      	ldr	r5, [r4, #0]
 8006b20:	f015 0506 	ands.w	r5, r5, #6
 8006b24:	d106      	bne.n	8006b34 <_printf_common+0x48>
 8006b26:	f104 0a19 	add.w	sl, r4, #25
 8006b2a:	68e3      	ldr	r3, [r4, #12]
 8006b2c:	6832      	ldr	r2, [r6, #0]
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	dc26      	bgt.n	8006b82 <_printf_common+0x96>
 8006b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b38:	1e13      	subs	r3, r2, #0
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	bf18      	it	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	0692      	lsls	r2, r2, #26
 8006b42:	d42b      	bmi.n	8006b9c <_printf_common+0xb0>
 8006b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b48:	4649      	mov	r1, r9
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	47c0      	blx	r8
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d01e      	beq.n	8006b90 <_printf_common+0xa4>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	68e5      	ldr	r5, [r4, #12]
 8006b56:	6832      	ldr	r2, [r6, #0]
 8006b58:	f003 0306 	and.w	r3, r3, #6
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	bf08      	it	eq
 8006b60:	1aad      	subeq	r5, r5, r2
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	6922      	ldr	r2, [r4, #16]
 8006b66:	bf0c      	ite	eq
 8006b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b6c:	2500      	movne	r5, #0
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	bfc4      	itt	gt
 8006b72:	1a9b      	subgt	r3, r3, r2
 8006b74:	18ed      	addgt	r5, r5, r3
 8006b76:	2600      	movs	r6, #0
 8006b78:	341a      	adds	r4, #26
 8006b7a:	42b5      	cmp	r5, r6
 8006b7c:	d11a      	bne.n	8006bb4 <_printf_common+0xc8>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e008      	b.n	8006b94 <_printf_common+0xa8>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4652      	mov	r2, sl
 8006b86:	4649      	mov	r1, r9
 8006b88:	4638      	mov	r0, r7
 8006b8a:	47c0      	blx	r8
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d103      	bne.n	8006b98 <_printf_common+0xac>
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b98:	3501      	adds	r5, #1
 8006b9a:	e7c6      	b.n	8006b2a <_printf_common+0x3e>
 8006b9c:	18e1      	adds	r1, r4, r3
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	2030      	movs	r0, #48	; 0x30
 8006ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ba6:	4422      	add	r2, r4
 8006ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	e7c7      	b.n	8006b44 <_printf_common+0x58>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4649      	mov	r1, r9
 8006bba:	4638      	mov	r0, r7
 8006bbc:	47c0      	blx	r8
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d0e6      	beq.n	8006b90 <_printf_common+0xa4>
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7d9      	b.n	8006b7a <_printf_common+0x8e>
	...

08006bc8 <_printf_i>:
 8006bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	460c      	mov	r4, r1
 8006bce:	4691      	mov	r9, r2
 8006bd0:	7e27      	ldrb	r7, [r4, #24]
 8006bd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bd4:	2f78      	cmp	r7, #120	; 0x78
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	469a      	mov	sl, r3
 8006bda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bde:	d807      	bhi.n	8006bf0 <_printf_i+0x28>
 8006be0:	2f62      	cmp	r7, #98	; 0x62
 8006be2:	d80a      	bhi.n	8006bfa <_printf_i+0x32>
 8006be4:	2f00      	cmp	r7, #0
 8006be6:	f000 80d8 	beq.w	8006d9a <_printf_i+0x1d2>
 8006bea:	2f58      	cmp	r7, #88	; 0x58
 8006bec:	f000 80a3 	beq.w	8006d36 <_printf_i+0x16e>
 8006bf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bf8:	e03a      	b.n	8006c70 <_printf_i+0xa8>
 8006bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bfe:	2b15      	cmp	r3, #21
 8006c00:	d8f6      	bhi.n	8006bf0 <_printf_i+0x28>
 8006c02:	a001      	add	r0, pc, #4	; (adr r0, 8006c08 <_printf_i+0x40>)
 8006c04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c08:	08006c61 	.word	0x08006c61
 8006c0c:	08006c75 	.word	0x08006c75
 8006c10:	08006bf1 	.word	0x08006bf1
 8006c14:	08006bf1 	.word	0x08006bf1
 8006c18:	08006bf1 	.word	0x08006bf1
 8006c1c:	08006bf1 	.word	0x08006bf1
 8006c20:	08006c75 	.word	0x08006c75
 8006c24:	08006bf1 	.word	0x08006bf1
 8006c28:	08006bf1 	.word	0x08006bf1
 8006c2c:	08006bf1 	.word	0x08006bf1
 8006c30:	08006bf1 	.word	0x08006bf1
 8006c34:	08006d81 	.word	0x08006d81
 8006c38:	08006ca5 	.word	0x08006ca5
 8006c3c:	08006d63 	.word	0x08006d63
 8006c40:	08006bf1 	.word	0x08006bf1
 8006c44:	08006bf1 	.word	0x08006bf1
 8006c48:	08006da3 	.word	0x08006da3
 8006c4c:	08006bf1 	.word	0x08006bf1
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006bf1 	.word	0x08006bf1
 8006c58:	08006bf1 	.word	0x08006bf1
 8006c5c:	08006d6b 	.word	0x08006d6b
 8006c60:	680b      	ldr	r3, [r1, #0]
 8006c62:	1d1a      	adds	r2, r3, #4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	600a      	str	r2, [r1, #0]
 8006c68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0a3      	b.n	8006dbc <_printf_i+0x1f4>
 8006c74:	6825      	ldr	r5, [r4, #0]
 8006c76:	6808      	ldr	r0, [r1, #0]
 8006c78:	062e      	lsls	r6, r5, #24
 8006c7a:	f100 0304 	add.w	r3, r0, #4
 8006c7e:	d50a      	bpl.n	8006c96 <_printf_i+0xce>
 8006c80:	6805      	ldr	r5, [r0, #0]
 8006c82:	600b      	str	r3, [r1, #0]
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	da03      	bge.n	8006c90 <_printf_i+0xc8>
 8006c88:	232d      	movs	r3, #45	; 0x2d
 8006c8a:	426d      	negs	r5, r5
 8006c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c90:	485e      	ldr	r0, [pc, #376]	; (8006e0c <_printf_i+0x244>)
 8006c92:	230a      	movs	r3, #10
 8006c94:	e019      	b.n	8006cca <_printf_i+0x102>
 8006c96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c9a:	6805      	ldr	r5, [r0, #0]
 8006c9c:	600b      	str	r3, [r1, #0]
 8006c9e:	bf18      	it	ne
 8006ca0:	b22d      	sxthne	r5, r5
 8006ca2:	e7ef      	b.n	8006c84 <_printf_i+0xbc>
 8006ca4:	680b      	ldr	r3, [r1, #0]
 8006ca6:	6825      	ldr	r5, [r4, #0]
 8006ca8:	1d18      	adds	r0, r3, #4
 8006caa:	6008      	str	r0, [r1, #0]
 8006cac:	0628      	lsls	r0, r5, #24
 8006cae:	d501      	bpl.n	8006cb4 <_printf_i+0xec>
 8006cb0:	681d      	ldr	r5, [r3, #0]
 8006cb2:	e002      	b.n	8006cba <_printf_i+0xf2>
 8006cb4:	0669      	lsls	r1, r5, #25
 8006cb6:	d5fb      	bpl.n	8006cb0 <_printf_i+0xe8>
 8006cb8:	881d      	ldrh	r5, [r3, #0]
 8006cba:	4854      	ldr	r0, [pc, #336]	; (8006e0c <_printf_i+0x244>)
 8006cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8006cbe:	bf0c      	ite	eq
 8006cc0:	2308      	moveq	r3, #8
 8006cc2:	230a      	movne	r3, #10
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cca:	6866      	ldr	r6, [r4, #4]
 8006ccc:	60a6      	str	r6, [r4, #8]
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	bfa2      	ittt	ge
 8006cd2:	6821      	ldrge	r1, [r4, #0]
 8006cd4:	f021 0104 	bicge.w	r1, r1, #4
 8006cd8:	6021      	strge	r1, [r4, #0]
 8006cda:	b90d      	cbnz	r5, 8006ce0 <_printf_i+0x118>
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	d04d      	beq.n	8006d7c <_printf_i+0x1b4>
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8006cea:	5dc7      	ldrb	r7, [r0, r7]
 8006cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cf0:	462f      	mov	r7, r5
 8006cf2:	42bb      	cmp	r3, r7
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	d9f4      	bls.n	8006ce2 <_printf_i+0x11a>
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d10b      	bne.n	8006d14 <_printf_i+0x14c>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	07df      	lsls	r7, r3, #31
 8006d00:	d508      	bpl.n	8006d14 <_printf_i+0x14c>
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	6861      	ldr	r1, [r4, #4]
 8006d06:	4299      	cmp	r1, r3
 8006d08:	bfde      	ittt	le
 8006d0a:	2330      	movle	r3, #48	; 0x30
 8006d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d14:	1b92      	subs	r2, r2, r6
 8006d16:	6122      	str	r2, [r4, #16]
 8006d18:	f8cd a000 	str.w	sl, [sp]
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	aa03      	add	r2, sp, #12
 8006d20:	4621      	mov	r1, r4
 8006d22:	4640      	mov	r0, r8
 8006d24:	f7ff fee2 	bl	8006aec <_printf_common>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d14c      	bne.n	8006dc6 <_printf_i+0x1fe>
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	b004      	add	sp, #16
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	4835      	ldr	r0, [pc, #212]	; (8006e0c <_printf_i+0x244>)
 8006d38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	680e      	ldr	r6, [r1, #0]
 8006d40:	061f      	lsls	r7, r3, #24
 8006d42:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d46:	600e      	str	r6, [r1, #0]
 8006d48:	d514      	bpl.n	8006d74 <_printf_i+0x1ac>
 8006d4a:	07d9      	lsls	r1, r3, #31
 8006d4c:	bf44      	itt	mi
 8006d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d52:	6023      	strmi	r3, [r4, #0]
 8006d54:	b91d      	cbnz	r5, 8006d5e <_printf_i+0x196>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	f023 0320 	bic.w	r3, r3, #32
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	2310      	movs	r3, #16
 8006d60:	e7b0      	b.n	8006cc4 <_printf_i+0xfc>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	f043 0320 	orr.w	r3, r3, #32
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	2378      	movs	r3, #120	; 0x78
 8006d6c:	4828      	ldr	r0, [pc, #160]	; (8006e10 <_printf_i+0x248>)
 8006d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d72:	e7e3      	b.n	8006d3c <_printf_i+0x174>
 8006d74:	065e      	lsls	r6, r3, #25
 8006d76:	bf48      	it	mi
 8006d78:	b2ad      	uxthmi	r5, r5
 8006d7a:	e7e6      	b.n	8006d4a <_printf_i+0x182>
 8006d7c:	4616      	mov	r6, r2
 8006d7e:	e7bb      	b.n	8006cf8 <_printf_i+0x130>
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	6826      	ldr	r6, [r4, #0]
 8006d84:	6960      	ldr	r0, [r4, #20]
 8006d86:	1d1d      	adds	r5, r3, #4
 8006d88:	600d      	str	r5, [r1, #0]
 8006d8a:	0635      	lsls	r5, r6, #24
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	d501      	bpl.n	8006d94 <_printf_i+0x1cc>
 8006d90:	6018      	str	r0, [r3, #0]
 8006d92:	e002      	b.n	8006d9a <_printf_i+0x1d2>
 8006d94:	0671      	lsls	r1, r6, #25
 8006d96:	d5fb      	bpl.n	8006d90 <_printf_i+0x1c8>
 8006d98:	8018      	strh	r0, [r3, #0]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	4616      	mov	r6, r2
 8006da0:	e7ba      	b.n	8006d18 <_printf_i+0x150>
 8006da2:	680b      	ldr	r3, [r1, #0]
 8006da4:	1d1a      	adds	r2, r3, #4
 8006da6:	600a      	str	r2, [r1, #0]
 8006da8:	681e      	ldr	r6, [r3, #0]
 8006daa:	6862      	ldr	r2, [r4, #4]
 8006dac:	2100      	movs	r1, #0
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7f9 fa96 	bl	80002e0 <memchr>
 8006db4:	b108      	cbz	r0, 8006dba <_printf_i+0x1f2>
 8006db6:	1b80      	subs	r0, r0, r6
 8006db8:	6060      	str	r0, [r4, #4]
 8006dba:	6863      	ldr	r3, [r4, #4]
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc4:	e7a8      	b.n	8006d18 <_printf_i+0x150>
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	4632      	mov	r2, r6
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4640      	mov	r0, r8
 8006dce:	47d0      	blx	sl
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d0ab      	beq.n	8006d2c <_printf_i+0x164>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	079b      	lsls	r3, r3, #30
 8006dd8:	d413      	bmi.n	8006e02 <_printf_i+0x23a>
 8006dda:	68e0      	ldr	r0, [r4, #12]
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	4298      	cmp	r0, r3
 8006de0:	bfb8      	it	lt
 8006de2:	4618      	movlt	r0, r3
 8006de4:	e7a4      	b.n	8006d30 <_printf_i+0x168>
 8006de6:	2301      	movs	r3, #1
 8006de8:	4632      	mov	r2, r6
 8006dea:	4649      	mov	r1, r9
 8006dec:	4640      	mov	r0, r8
 8006dee:	47d0      	blx	sl
 8006df0:	3001      	adds	r0, #1
 8006df2:	d09b      	beq.n	8006d2c <_printf_i+0x164>
 8006df4:	3501      	adds	r5, #1
 8006df6:	68e3      	ldr	r3, [r4, #12]
 8006df8:	9903      	ldr	r1, [sp, #12]
 8006dfa:	1a5b      	subs	r3, r3, r1
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	dcf2      	bgt.n	8006de6 <_printf_i+0x21e>
 8006e00:	e7eb      	b.n	8006dda <_printf_i+0x212>
 8006e02:	2500      	movs	r5, #0
 8006e04:	f104 0619 	add.w	r6, r4, #25
 8006e08:	e7f5      	b.n	8006df6 <_printf_i+0x22e>
 8006e0a:	bf00      	nop
 8006e0c:	080070c9 	.word	0x080070c9
 8006e10:	080070da 	.word	0x080070da

08006e14 <memcpy>:
 8006e14:	440a      	add	r2, r1
 8006e16:	4291      	cmp	r1, r2
 8006e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e1c:	d100      	bne.n	8006e20 <memcpy+0xc>
 8006e1e:	4770      	bx	lr
 8006e20:	b510      	push	{r4, lr}
 8006e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e2a:	4291      	cmp	r1, r2
 8006e2c:	d1f9      	bne.n	8006e22 <memcpy+0xe>
 8006e2e:	bd10      	pop	{r4, pc}

08006e30 <memmove>:
 8006e30:	4288      	cmp	r0, r1
 8006e32:	b510      	push	{r4, lr}
 8006e34:	eb01 0402 	add.w	r4, r1, r2
 8006e38:	d902      	bls.n	8006e40 <memmove+0x10>
 8006e3a:	4284      	cmp	r4, r0
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	d807      	bhi.n	8006e50 <memmove+0x20>
 8006e40:	1e43      	subs	r3, r0, #1
 8006e42:	42a1      	cmp	r1, r4
 8006e44:	d008      	beq.n	8006e58 <memmove+0x28>
 8006e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e4e:	e7f8      	b.n	8006e42 <memmove+0x12>
 8006e50:	4402      	add	r2, r0
 8006e52:	4601      	mov	r1, r0
 8006e54:	428a      	cmp	r2, r1
 8006e56:	d100      	bne.n	8006e5a <memmove+0x2a>
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e62:	e7f7      	b.n	8006e54 <memmove+0x24>

08006e64 <_free_r>:
 8006e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e66:	2900      	cmp	r1, #0
 8006e68:	d048      	beq.n	8006efc <_free_r+0x98>
 8006e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e6e:	9001      	str	r0, [sp, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f1a1 0404 	sub.w	r4, r1, #4
 8006e76:	bfb8      	it	lt
 8006e78:	18e4      	addlt	r4, r4, r3
 8006e7a:	f000 f8d3 	bl	8007024 <__malloc_lock>
 8006e7e:	4a20      	ldr	r2, [pc, #128]	; (8006f00 <_free_r+0x9c>)
 8006e80:	9801      	ldr	r0, [sp, #4]
 8006e82:	6813      	ldr	r3, [r2, #0]
 8006e84:	4615      	mov	r5, r2
 8006e86:	b933      	cbnz	r3, 8006e96 <_free_r+0x32>
 8006e88:	6063      	str	r3, [r4, #4]
 8006e8a:	6014      	str	r4, [r2, #0]
 8006e8c:	b003      	add	sp, #12
 8006e8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e92:	f000 b8cd 	b.w	8007030 <__malloc_unlock>
 8006e96:	42a3      	cmp	r3, r4
 8006e98:	d90b      	bls.n	8006eb2 <_free_r+0x4e>
 8006e9a:	6821      	ldr	r1, [r4, #0]
 8006e9c:	1862      	adds	r2, r4, r1
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	bf04      	itt	eq
 8006ea2:	681a      	ldreq	r2, [r3, #0]
 8006ea4:	685b      	ldreq	r3, [r3, #4]
 8006ea6:	6063      	str	r3, [r4, #4]
 8006ea8:	bf04      	itt	eq
 8006eaa:	1852      	addeq	r2, r2, r1
 8006eac:	6022      	streq	r2, [r4, #0]
 8006eae:	602c      	str	r4, [r5, #0]
 8006eb0:	e7ec      	b.n	8006e8c <_free_r+0x28>
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	b10b      	cbz	r3, 8006ebc <_free_r+0x58>
 8006eb8:	42a3      	cmp	r3, r4
 8006eba:	d9fa      	bls.n	8006eb2 <_free_r+0x4e>
 8006ebc:	6811      	ldr	r1, [r2, #0]
 8006ebe:	1855      	adds	r5, r2, r1
 8006ec0:	42a5      	cmp	r5, r4
 8006ec2:	d10b      	bne.n	8006edc <_free_r+0x78>
 8006ec4:	6824      	ldr	r4, [r4, #0]
 8006ec6:	4421      	add	r1, r4
 8006ec8:	1854      	adds	r4, r2, r1
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	6011      	str	r1, [r2, #0]
 8006ece:	d1dd      	bne.n	8006e8c <_free_r+0x28>
 8006ed0:	681c      	ldr	r4, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	6053      	str	r3, [r2, #4]
 8006ed6:	4421      	add	r1, r4
 8006ed8:	6011      	str	r1, [r2, #0]
 8006eda:	e7d7      	b.n	8006e8c <_free_r+0x28>
 8006edc:	d902      	bls.n	8006ee4 <_free_r+0x80>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	6003      	str	r3, [r0, #0]
 8006ee2:	e7d3      	b.n	8006e8c <_free_r+0x28>
 8006ee4:	6825      	ldr	r5, [r4, #0]
 8006ee6:	1961      	adds	r1, r4, r5
 8006ee8:	428b      	cmp	r3, r1
 8006eea:	bf04      	itt	eq
 8006eec:	6819      	ldreq	r1, [r3, #0]
 8006eee:	685b      	ldreq	r3, [r3, #4]
 8006ef0:	6063      	str	r3, [r4, #4]
 8006ef2:	bf04      	itt	eq
 8006ef4:	1949      	addeq	r1, r1, r5
 8006ef6:	6021      	streq	r1, [r4, #0]
 8006ef8:	6054      	str	r4, [r2, #4]
 8006efa:	e7c7      	b.n	8006e8c <_free_r+0x28>
 8006efc:	b003      	add	sp, #12
 8006efe:	bd30      	pop	{r4, r5, pc}
 8006f00:	24000094 	.word	0x24000094

08006f04 <_malloc_r>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	1ccd      	adds	r5, r1, #3
 8006f08:	f025 0503 	bic.w	r5, r5, #3
 8006f0c:	3508      	adds	r5, #8
 8006f0e:	2d0c      	cmp	r5, #12
 8006f10:	bf38      	it	cc
 8006f12:	250c      	movcc	r5, #12
 8006f14:	2d00      	cmp	r5, #0
 8006f16:	4606      	mov	r6, r0
 8006f18:	db01      	blt.n	8006f1e <_malloc_r+0x1a>
 8006f1a:	42a9      	cmp	r1, r5
 8006f1c:	d903      	bls.n	8006f26 <_malloc_r+0x22>
 8006f1e:	230c      	movs	r3, #12
 8006f20:	6033      	str	r3, [r6, #0]
 8006f22:	2000      	movs	r0, #0
 8006f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f26:	f000 f87d 	bl	8007024 <__malloc_lock>
 8006f2a:	4921      	ldr	r1, [pc, #132]	; (8006fb0 <_malloc_r+0xac>)
 8006f2c:	680a      	ldr	r2, [r1, #0]
 8006f2e:	4614      	mov	r4, r2
 8006f30:	b99c      	cbnz	r4, 8006f5a <_malloc_r+0x56>
 8006f32:	4f20      	ldr	r7, [pc, #128]	; (8006fb4 <_malloc_r+0xb0>)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	b923      	cbnz	r3, 8006f42 <_malloc_r+0x3e>
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f000 f862 	bl	8007004 <_sbrk_r>
 8006f40:	6038      	str	r0, [r7, #0]
 8006f42:	4629      	mov	r1, r5
 8006f44:	4630      	mov	r0, r6
 8006f46:	f000 f85d 	bl	8007004 <_sbrk_r>
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	d123      	bne.n	8006f96 <_malloc_r+0x92>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	6033      	str	r3, [r6, #0]
 8006f52:	4630      	mov	r0, r6
 8006f54:	f000 f86c 	bl	8007030 <__malloc_unlock>
 8006f58:	e7e3      	b.n	8006f22 <_malloc_r+0x1e>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	1b5b      	subs	r3, r3, r5
 8006f5e:	d417      	bmi.n	8006f90 <_malloc_r+0x8c>
 8006f60:	2b0b      	cmp	r3, #11
 8006f62:	d903      	bls.n	8006f6c <_malloc_r+0x68>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	441c      	add	r4, r3
 8006f68:	6025      	str	r5, [r4, #0]
 8006f6a:	e004      	b.n	8006f76 <_malloc_r+0x72>
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	42a2      	cmp	r2, r4
 8006f70:	bf0c      	ite	eq
 8006f72:	600b      	streq	r3, [r1, #0]
 8006f74:	6053      	strne	r3, [r2, #4]
 8006f76:	4630      	mov	r0, r6
 8006f78:	f000 f85a 	bl	8007030 <__malloc_unlock>
 8006f7c:	f104 000b 	add.w	r0, r4, #11
 8006f80:	1d23      	adds	r3, r4, #4
 8006f82:	f020 0007 	bic.w	r0, r0, #7
 8006f86:	1ac2      	subs	r2, r0, r3
 8006f88:	d0cc      	beq.n	8006f24 <_malloc_r+0x20>
 8006f8a:	1a1b      	subs	r3, r3, r0
 8006f8c:	50a3      	str	r3, [r4, r2]
 8006f8e:	e7c9      	b.n	8006f24 <_malloc_r+0x20>
 8006f90:	4622      	mov	r2, r4
 8006f92:	6864      	ldr	r4, [r4, #4]
 8006f94:	e7cc      	b.n	8006f30 <_malloc_r+0x2c>
 8006f96:	1cc4      	adds	r4, r0, #3
 8006f98:	f024 0403 	bic.w	r4, r4, #3
 8006f9c:	42a0      	cmp	r0, r4
 8006f9e:	d0e3      	beq.n	8006f68 <_malloc_r+0x64>
 8006fa0:	1a21      	subs	r1, r4, r0
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f000 f82e 	bl	8007004 <_sbrk_r>
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d1dd      	bne.n	8006f68 <_malloc_r+0x64>
 8006fac:	e7cf      	b.n	8006f4e <_malloc_r+0x4a>
 8006fae:	bf00      	nop
 8006fb0:	24000094 	.word	0x24000094
 8006fb4:	24000098 	.word	0x24000098

08006fb8 <_realloc_r>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	4607      	mov	r7, r0
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	460e      	mov	r6, r1
 8006fc0:	b921      	cbnz	r1, 8006fcc <_realloc_r+0x14>
 8006fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	f7ff bf9c 	b.w	8006f04 <_malloc_r>
 8006fcc:	b922      	cbnz	r2, 8006fd8 <_realloc_r+0x20>
 8006fce:	f7ff ff49 	bl	8006e64 <_free_r>
 8006fd2:	4625      	mov	r5, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd8:	f000 f830 	bl	800703c <_malloc_usable_size_r>
 8006fdc:	42a0      	cmp	r0, r4
 8006fde:	d20f      	bcs.n	8007000 <_realloc_r+0x48>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f7ff ff8e 	bl	8006f04 <_malloc_r>
 8006fe8:	4605      	mov	r5, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d0f2      	beq.n	8006fd4 <_realloc_r+0x1c>
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	f7ff ff0f 	bl	8006e14 <memcpy>
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f7ff ff33 	bl	8006e64 <_free_r>
 8006ffe:	e7e9      	b.n	8006fd4 <_realloc_r+0x1c>
 8007000:	4635      	mov	r5, r6
 8007002:	e7e7      	b.n	8006fd4 <_realloc_r+0x1c>

08007004 <_sbrk_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d06      	ldr	r5, [pc, #24]	; (8007020 <_sbrk_r+0x1c>)
 8007008:	2300      	movs	r3, #0
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	602b      	str	r3, [r5, #0]
 8007010:	f7f9 fecc 	bl	8000dac <_sbrk>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_sbrk_r+0x1a>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_sbrk_r+0x1a>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	24000538 	.word	0x24000538

08007024 <__malloc_lock>:
 8007024:	4801      	ldr	r0, [pc, #4]	; (800702c <__malloc_lock+0x8>)
 8007026:	f000 b811 	b.w	800704c <__retarget_lock_acquire_recursive>
 800702a:	bf00      	nop
 800702c:	24000540 	.word	0x24000540

08007030 <__malloc_unlock>:
 8007030:	4801      	ldr	r0, [pc, #4]	; (8007038 <__malloc_unlock+0x8>)
 8007032:	f000 b80c 	b.w	800704e <__retarget_lock_release_recursive>
 8007036:	bf00      	nop
 8007038:	24000540 	.word	0x24000540

0800703c <_malloc_usable_size_r>:
 800703c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007040:	1f18      	subs	r0, r3, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	bfbc      	itt	lt
 8007046:	580b      	ldrlt	r3, [r1, r0]
 8007048:	18c0      	addlt	r0, r0, r3
 800704a:	4770      	bx	lr

0800704c <__retarget_lock_acquire_recursive>:
 800704c:	4770      	bx	lr

0800704e <__retarget_lock_release_recursive>:
 800704e:	4770      	bx	lr

08007050 <_init>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	bf00      	nop
 8007054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007056:	bc08      	pop	{r3}
 8007058:	469e      	mov	lr, r3
 800705a:	4770      	bx	lr

0800705c <_fini>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr
