
SBSFU_Appli_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08015400  08015400  00005400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002980  080155f8  080155f8  000055f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08017f78  08017f78  00007f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018628  08018628  00010190  2**0
                  CONTENTS
  4 .ARM          00000008  08018628  08018628  00008628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018630  08018630  00010190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018630  08018630  00008630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08018638  08018638  00008638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000100  08018640  00010100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .testprotection 00000004  20000000  20000000  00020000  2**2
                  ALLOC
 10 .bss          000000d0  20000190  080186d0  00010190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  080186d0  00010260  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  00010190  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000ea9c  00000000  00000000  000101c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00010160  00000000  00000000  0001ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dd0  00000000  00000000  0002edc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009b0  00000000  00000000  00031b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00101f37  00000000  00000000  00032548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000be8  00000000  00000000  00134480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00005777  00000000  00000000  00135068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002936a  00000000  00000000  0013a7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00163b49  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000020f0  00000000  00000000  00163b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080155f8 <__do_global_dtors_aux>:
 80155f8:	b510      	push	{r4, lr}
 80155fa:	4c05      	ldr	r4, [pc, #20]	; (8015610 <__do_global_dtors_aux+0x18>)
 80155fc:	7823      	ldrb	r3, [r4, #0]
 80155fe:	b933      	cbnz	r3, 801560e <__do_global_dtors_aux+0x16>
 8015600:	4b04      	ldr	r3, [pc, #16]	; (8015614 <__do_global_dtors_aux+0x1c>)
 8015602:	b113      	cbz	r3, 801560a <__do_global_dtors_aux+0x12>
 8015604:	4804      	ldr	r0, [pc, #16]	; (8015618 <__do_global_dtors_aux+0x20>)
 8015606:	e000      	b.n	801560a <__do_global_dtors_aux+0x12>
 8015608:	bf00      	nop
 801560a:	2301      	movs	r3, #1
 801560c:	7023      	strb	r3, [r4, #0]
 801560e:	bd10      	pop	{r4, pc}
 8015610:	20000190 	.word	0x20000190
 8015614:	00000000 	.word	0x00000000
 8015618:	08017f2c 	.word	0x08017f2c

0801561c <frame_dummy>:
 801561c:	b508      	push	{r3, lr}
 801561e:	4b03      	ldr	r3, [pc, #12]	; (801562c <frame_dummy+0x10>)
 8015620:	b11b      	cbz	r3, 801562a <frame_dummy+0xe>
 8015622:	4903      	ldr	r1, [pc, #12]	; (8015630 <frame_dummy+0x14>)
 8015624:	4803      	ldr	r0, [pc, #12]	; (8015634 <frame_dummy+0x18>)
 8015626:	e000      	b.n	801562a <frame_dummy+0xe>
 8015628:	bf00      	nop
 801562a:	bd08      	pop	{r3, pc}
 801562c:	00000000 	.word	0x00000000
 8015630:	20000194 	.word	0x20000194
 8015634:	08017f2c 	.word	0x08017f2c

08015638 <__aeabi_uldivmod>:
 8015638:	b953      	cbnz	r3, 8015650 <__aeabi_uldivmod+0x18>
 801563a:	b94a      	cbnz	r2, 8015650 <__aeabi_uldivmod+0x18>
 801563c:	2900      	cmp	r1, #0
 801563e:	bf08      	it	eq
 8015640:	2800      	cmpeq	r0, #0
 8015642:	bf1c      	itt	ne
 8015644:	f04f 31ff 	movne.w	r1, #4294967295
 8015648:	f04f 30ff 	movne.w	r0, #4294967295
 801564c:	f000 b980 	b.w	8015950 <__aeabi_idiv0>
 8015650:	f1ad 0c08 	sub.w	ip, sp, #8
 8015654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8015658:	f000 f806 	bl	8015668 <__udivmoddi4>
 801565c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015664:	b004      	add	sp, #16
 8015666:	4770      	bx	lr

08015668 <__udivmoddi4>:
 8015668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801566c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801566e:	4604      	mov	r4, r0
 8015670:	4688      	mov	r8, r1
 8015672:	2b00      	cmp	r3, #0
 8015674:	f040 8084 	bne.w	8015780 <__udivmoddi4+0x118>
 8015678:	428a      	cmp	r2, r1
 801567a:	4617      	mov	r7, r2
 801567c:	d943      	bls.n	8015706 <__udivmoddi4+0x9e>
 801567e:	fab2 f282 	clz	r2, r2
 8015682:	b142      	cbz	r2, 8015696 <__udivmoddi4+0x2e>
 8015684:	f1c2 0020 	rsb	r0, r2, #32
 8015688:	4091      	lsls	r1, r2
 801568a:	4097      	lsls	r7, r2
 801568c:	fa24 f000 	lsr.w	r0, r4, r0
 8015690:	4094      	lsls	r4, r2
 8015692:	ea40 0801 	orr.w	r8, r0, r1
 8015696:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801569a:	0c23      	lsrs	r3, r4, #16
 801569c:	fa1f fe87 	uxth.w	lr, r7
 80156a0:	fbb8 f6fc 	udiv	r6, r8, ip
 80156a4:	fb0c 8116 	mls	r1, ip, r6, r8
 80156a8:	fb06 f00e 	mul.w	r0, r6, lr
 80156ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80156b0:	4298      	cmp	r0, r3
 80156b2:	d907      	bls.n	80156c4 <__udivmoddi4+0x5c>
 80156b4:	18fb      	adds	r3, r7, r3
 80156b6:	f106 31ff 	add.w	r1, r6, #4294967295
 80156ba:	d202      	bcs.n	80156c2 <__udivmoddi4+0x5a>
 80156bc:	4298      	cmp	r0, r3
 80156be:	f200 8131 	bhi.w	8015924 <__udivmoddi4+0x2bc>
 80156c2:	460e      	mov	r6, r1
 80156c4:	1a19      	subs	r1, r3, r0
 80156c6:	b2a3      	uxth	r3, r4
 80156c8:	fbb1 f0fc 	udiv	r0, r1, ip
 80156cc:	fb0c 1110 	mls	r1, ip, r0, r1
 80156d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80156d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80156d8:	45a6      	cmp	lr, r4
 80156da:	d907      	bls.n	80156ec <__udivmoddi4+0x84>
 80156dc:	193c      	adds	r4, r7, r4
 80156de:	f100 33ff 	add.w	r3, r0, #4294967295
 80156e2:	d202      	bcs.n	80156ea <__udivmoddi4+0x82>
 80156e4:	45a6      	cmp	lr, r4
 80156e6:	f200 811a 	bhi.w	801591e <__udivmoddi4+0x2b6>
 80156ea:	4618      	mov	r0, r3
 80156ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80156f0:	eba4 040e 	sub.w	r4, r4, lr
 80156f4:	2600      	movs	r6, #0
 80156f6:	b11d      	cbz	r5, 8015700 <__udivmoddi4+0x98>
 80156f8:	40d4      	lsrs	r4, r2
 80156fa:	2300      	movs	r3, #0
 80156fc:	e9c5 4300 	strd	r4, r3, [r5]
 8015700:	4631      	mov	r1, r6
 8015702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015706:	b902      	cbnz	r2, 801570a <__udivmoddi4+0xa2>
 8015708:	deff      	udf	#255	; 0xff
 801570a:	fab2 f282 	clz	r2, r2
 801570e:	2a00      	cmp	r2, #0
 8015710:	d152      	bne.n	80157b8 <__udivmoddi4+0x150>
 8015712:	1bcb      	subs	r3, r1, r7
 8015714:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8015718:	fa1f f887 	uxth.w	r8, r7
 801571c:	2601      	movs	r6, #1
 801571e:	0c21      	lsrs	r1, r4, #16
 8015720:	fbb3 fcfe 	udiv	ip, r3, lr
 8015724:	fb0e 301c 	mls	r0, lr, ip, r3
 8015728:	fb08 f90c 	mul.w	r9, r8, ip
 801572c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015730:	4589      	cmp	r9, r1
 8015732:	d90b      	bls.n	801574c <__udivmoddi4+0xe4>
 8015734:	1879      	adds	r1, r7, r1
 8015736:	f10c 33ff 	add.w	r3, ip, #4294967295
 801573a:	bf2c      	ite	cs
 801573c:	2001      	movcs	r0, #1
 801573e:	2000      	movcc	r0, #0
 8015740:	4589      	cmp	r9, r1
 8015742:	d902      	bls.n	801574a <__udivmoddi4+0xe2>
 8015744:	2800      	cmp	r0, #0
 8015746:	f000 80f0 	beq.w	801592a <__udivmoddi4+0x2c2>
 801574a:	469c      	mov	ip, r3
 801574c:	eba1 0109 	sub.w	r1, r1, r9
 8015750:	b2a3      	uxth	r3, r4
 8015752:	fbb1 f0fe 	udiv	r0, r1, lr
 8015756:	fb0e 1110 	mls	r1, lr, r0, r1
 801575a:	fb08 f800 	mul.w	r8, r8, r0
 801575e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8015762:	45a0      	cmp	r8, r4
 8015764:	d907      	bls.n	8015776 <__udivmoddi4+0x10e>
 8015766:	193c      	adds	r4, r7, r4
 8015768:	f100 33ff 	add.w	r3, r0, #4294967295
 801576c:	d202      	bcs.n	8015774 <__udivmoddi4+0x10c>
 801576e:	45a0      	cmp	r8, r4
 8015770:	f200 80d2 	bhi.w	8015918 <__udivmoddi4+0x2b0>
 8015774:	4618      	mov	r0, r3
 8015776:	eba4 0408 	sub.w	r4, r4, r8
 801577a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 801577e:	e7ba      	b.n	80156f6 <__udivmoddi4+0x8e>
 8015780:	428b      	cmp	r3, r1
 8015782:	d909      	bls.n	8015798 <__udivmoddi4+0x130>
 8015784:	2d00      	cmp	r5, #0
 8015786:	f000 80be 	beq.w	8015906 <__udivmoddi4+0x29e>
 801578a:	2600      	movs	r6, #0
 801578c:	e9c5 0100 	strd	r0, r1, [r5]
 8015790:	4630      	mov	r0, r6
 8015792:	4631      	mov	r1, r6
 8015794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015798:	fab3 f683 	clz	r6, r3
 801579c:	2e00      	cmp	r6, #0
 801579e:	d14d      	bne.n	801583c <__udivmoddi4+0x1d4>
 80157a0:	428b      	cmp	r3, r1
 80157a2:	f0c0 80b3 	bcc.w	801590c <__udivmoddi4+0x2a4>
 80157a6:	4282      	cmp	r2, r0
 80157a8:	f240 80b0 	bls.w	801590c <__udivmoddi4+0x2a4>
 80157ac:	4630      	mov	r0, r6
 80157ae:	2d00      	cmp	r5, #0
 80157b0:	d0a6      	beq.n	8015700 <__udivmoddi4+0x98>
 80157b2:	e9c5 4800 	strd	r4, r8, [r5]
 80157b6:	e7a3      	b.n	8015700 <__udivmoddi4+0x98>
 80157b8:	4097      	lsls	r7, r2
 80157ba:	f1c2 0320 	rsb	r3, r2, #32
 80157be:	fa01 f002 	lsl.w	r0, r1, r2
 80157c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80157c6:	40d9      	lsrs	r1, r3
 80157c8:	fa24 f303 	lsr.w	r3, r4, r3
 80157cc:	fa1f f887 	uxth.w	r8, r7
 80157d0:	4094      	lsls	r4, r2
 80157d2:	4303      	orrs	r3, r0
 80157d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80157d8:	0c1e      	lsrs	r6, r3, #16
 80157da:	fb0e 1110 	mls	r1, lr, r0, r1
 80157de:	fb00 fc08 	mul.w	ip, r0, r8
 80157e2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80157e6:	458c      	cmp	ip, r1
 80157e8:	d90e      	bls.n	8015808 <__udivmoddi4+0x1a0>
 80157ea:	1879      	adds	r1, r7, r1
 80157ec:	f100 36ff 	add.w	r6, r0, #4294967295
 80157f0:	bf2c      	ite	cs
 80157f2:	f04f 0901 	movcs.w	r9, #1
 80157f6:	f04f 0900 	movcc.w	r9, #0
 80157fa:	458c      	cmp	ip, r1
 80157fc:	d903      	bls.n	8015806 <__udivmoddi4+0x19e>
 80157fe:	f1b9 0f00 	cmp.w	r9, #0
 8015802:	f000 8096 	beq.w	8015932 <__udivmoddi4+0x2ca>
 8015806:	4630      	mov	r0, r6
 8015808:	eba1 010c 	sub.w	r1, r1, ip
 801580c:	b29b      	uxth	r3, r3
 801580e:	fbb1 f6fe 	udiv	r6, r1, lr
 8015812:	fb0e 1116 	mls	r1, lr, r6, r1
 8015816:	fb06 fc08 	mul.w	ip, r6, r8
 801581a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 801581e:	458c      	cmp	ip, r1
 8015820:	d907      	bls.n	8015832 <__udivmoddi4+0x1ca>
 8015822:	1879      	adds	r1, r7, r1
 8015824:	f106 33ff 	add.w	r3, r6, #4294967295
 8015828:	d202      	bcs.n	8015830 <__udivmoddi4+0x1c8>
 801582a:	458c      	cmp	ip, r1
 801582c:	f200 8088 	bhi.w	8015940 <__udivmoddi4+0x2d8>
 8015830:	461e      	mov	r6, r3
 8015832:	eba1 030c 	sub.w	r3, r1, ip
 8015836:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 801583a:	e770      	b.n	801571e <__udivmoddi4+0xb6>
 801583c:	f1c6 0720 	rsb	r7, r6, #32
 8015840:	fa03 f406 	lsl.w	r4, r3, r6
 8015844:	fa02 fc06 	lsl.w	ip, r2, r6
 8015848:	fa01 fe06 	lsl.w	lr, r1, r6
 801584c:	40fa      	lsrs	r2, r7
 801584e:	fa20 f807 	lsr.w	r8, r0, r7
 8015852:	40f9      	lsrs	r1, r7
 8015854:	fa00 f306 	lsl.w	r3, r0, r6
 8015858:	4322      	orrs	r2, r4
 801585a:	ea48 040e 	orr.w	r4, r8, lr
 801585e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8015862:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8015866:	fa1f f982 	uxth.w	r9, r2
 801586a:	fbb1 faf8 	udiv	sl, r1, r8
 801586e:	fb08 111a 	mls	r1, r8, sl, r1
 8015872:	fb0a f009 	mul.w	r0, sl, r9
 8015876:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 801587a:	4570      	cmp	r0, lr
 801587c:	d90e      	bls.n	801589c <__udivmoddi4+0x234>
 801587e:	eb12 0e0e 	adds.w	lr, r2, lr
 8015882:	f10a 31ff 	add.w	r1, sl, #4294967295
 8015886:	bf2c      	ite	cs
 8015888:	f04f 0b01 	movcs.w	fp, #1
 801588c:	f04f 0b00 	movcc.w	fp, #0
 8015890:	4570      	cmp	r0, lr
 8015892:	d902      	bls.n	801589a <__udivmoddi4+0x232>
 8015894:	f1bb 0f00 	cmp.w	fp, #0
 8015898:	d04e      	beq.n	8015938 <__udivmoddi4+0x2d0>
 801589a:	468a      	mov	sl, r1
 801589c:	ebae 0e00 	sub.w	lr, lr, r0
 80158a0:	b2a4      	uxth	r4, r4
 80158a2:	fbbe f0f8 	udiv	r0, lr, r8
 80158a6:	fb08 ee10 	mls	lr, r8, r0, lr
 80158aa:	fb00 f909 	mul.w	r9, r0, r9
 80158ae:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80158b2:	45f1      	cmp	r9, lr
 80158b4:	d907      	bls.n	80158c6 <__udivmoddi4+0x25e>
 80158b6:	eb12 0e0e 	adds.w	lr, r2, lr
 80158ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80158be:	d201      	bcs.n	80158c4 <__udivmoddi4+0x25c>
 80158c0:	45f1      	cmp	r9, lr
 80158c2:	d840      	bhi.n	8015946 <__udivmoddi4+0x2de>
 80158c4:	4608      	mov	r0, r1
 80158c6:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80158ca:	ebae 0e09 	sub.w	lr, lr, r9
 80158ce:	fba0 890c 	umull	r8, r9, r0, ip
 80158d2:	45ce      	cmp	lr, r9
 80158d4:	4641      	mov	r1, r8
 80158d6:	464c      	mov	r4, r9
 80158d8:	d302      	bcc.n	80158e0 <__udivmoddi4+0x278>
 80158da:	d106      	bne.n	80158ea <__udivmoddi4+0x282>
 80158dc:	4543      	cmp	r3, r8
 80158de:	d204      	bcs.n	80158ea <__udivmoddi4+0x282>
 80158e0:	3801      	subs	r0, #1
 80158e2:	ebb8 010c 	subs.w	r1, r8, ip
 80158e6:	eb69 0402 	sbc.w	r4, r9, r2
 80158ea:	b37d      	cbz	r5, 801594c <__udivmoddi4+0x2e4>
 80158ec:	1a5a      	subs	r2, r3, r1
 80158ee:	eb6e 0e04 	sbc.w	lr, lr, r4
 80158f2:	40f2      	lsrs	r2, r6
 80158f4:	fa0e f707 	lsl.w	r7, lr, r7
 80158f8:	fa2e f306 	lsr.w	r3, lr, r6
 80158fc:	2600      	movs	r6, #0
 80158fe:	4317      	orrs	r7, r2
 8015900:	e9c5 7300 	strd	r7, r3, [r5]
 8015904:	e6fc      	b.n	8015700 <__udivmoddi4+0x98>
 8015906:	462e      	mov	r6, r5
 8015908:	4628      	mov	r0, r5
 801590a:	e6f9      	b.n	8015700 <__udivmoddi4+0x98>
 801590c:	1a84      	subs	r4, r0, r2
 801590e:	eb61 0103 	sbc.w	r1, r1, r3
 8015912:	2001      	movs	r0, #1
 8015914:	4688      	mov	r8, r1
 8015916:	e74a      	b.n	80157ae <__udivmoddi4+0x146>
 8015918:	3802      	subs	r0, #2
 801591a:	443c      	add	r4, r7
 801591c:	e72b      	b.n	8015776 <__udivmoddi4+0x10e>
 801591e:	3802      	subs	r0, #2
 8015920:	443c      	add	r4, r7
 8015922:	e6e3      	b.n	80156ec <__udivmoddi4+0x84>
 8015924:	3e02      	subs	r6, #2
 8015926:	443b      	add	r3, r7
 8015928:	e6cc      	b.n	80156c4 <__udivmoddi4+0x5c>
 801592a:	f1ac 0c02 	sub.w	ip, ip, #2
 801592e:	4439      	add	r1, r7
 8015930:	e70c      	b.n	801574c <__udivmoddi4+0xe4>
 8015932:	3802      	subs	r0, #2
 8015934:	4439      	add	r1, r7
 8015936:	e767      	b.n	8015808 <__udivmoddi4+0x1a0>
 8015938:	f1aa 0a02 	sub.w	sl, sl, #2
 801593c:	4496      	add	lr, r2
 801593e:	e7ad      	b.n	801589c <__udivmoddi4+0x234>
 8015940:	3e02      	subs	r6, #2
 8015942:	4439      	add	r1, r7
 8015944:	e775      	b.n	8015832 <__udivmoddi4+0x1ca>
 8015946:	3802      	subs	r0, #2
 8015948:	4496      	add	lr, r2
 801594a:	e7bc      	b.n	80158c6 <__udivmoddi4+0x25e>
 801594c:	462e      	mov	r6, r5
 801594e:	e6d7      	b.n	8015700 <__udivmoddi4+0x98>

08015950 <__aeabi_idiv0>:
 8015950:	4770      	bx	lr
 8015952:	bf00      	nop

08015954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8015954:	f8df d034 	ldr.w	sp, [pc, #52]	; 801598c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8015958:	f000 fb36 	bl	8015fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801595c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801595e:	e003      	b.n	8015968 <LoopCopyDataInit>

08015960 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8015960:	4b0b      	ldr	r3, [pc, #44]	; (8015990 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8015962:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8015964:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8015966:	3104      	adds	r1, #4

08015968 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8015968:	480a      	ldr	r0, [pc, #40]	; (8015994 <LoopForever+0xa>)
	ldr	r3, =_edata
 801596a:	4b0b      	ldr	r3, [pc, #44]	; (8015998 <LoopForever+0xe>)
	adds	r2, r0, r1
 801596c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801596e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8015970:	d3f6      	bcc.n	8015960 <CopyDataInit>
	ldr	r2, =_sbss
 8015972:	4a0a      	ldr	r2, [pc, #40]	; (801599c <LoopForever+0x12>)
	b	LoopFillZerobss
 8015974:	e002      	b.n	801597c <LoopFillZerobss>

08015976 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8015976:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8015978:	f842 3b04 	str.w	r3, [r2], #4

0801597c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801597c:	4b08      	ldr	r3, [pc, #32]	; (80159a0 <LoopForever+0x16>)
	cmp	r2, r3
 801597e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8015980:	d3f9      	bcc.n	8015976 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8015982:	f001 f9ef 	bl	8016d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8015986:	f000 f90f 	bl	8015ba8 <main>

0801598a <LoopForever>:

LoopForever:
    b LoopForever
 801598a:	e7fe      	b.n	801598a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 801598c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8015990:	08018640 	.word	0x08018640
	ldr	r0, =_sdata
 8015994:	20000100 	.word	0x20000100
	ldr	r3, =_edata
 8015998:	20000190 	.word	0x20000190
	ldr	r2, =_sbss
 801599c:	20000190 	.word	0x20000190
	ldr	r3, = _ebss
 80159a0:	20000260 	.word	0x20000260

080159a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80159a4:	e7fe      	b.n	80159a4 <ADC1_2_IRQHandler>
	...

080159a8 <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef  COM_Init(void)
{
 80159a8:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 80159aa:	4b10      	ldr	r3, [pc, #64]	; (80159ec <COM_Init+0x44>)
 80159ac:	2202      	movs	r2, #2
 80159ae:	6818      	ldr	r0, [r3, #0]
 80159b0:	2300      	movs	r3, #0
 80159b2:	6880      	ldr	r0, [r0, #8]
 80159b4:	4619      	mov	r1, r3
 80159b6:	f001 fa8f 	bl	8016ed8 <setvbuf>
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  UartHandle.Instance = COM_UART;
  UartHandle.Init.BaudRate = 115200U;
 80159ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  UartHandle.Instance = COM_UART;
 80159be:	480c      	ldr	r0, [pc, #48]	; (80159f0 <COM_Init+0x48>)
  UartHandle.Init.BaudRate = 115200U;
 80159c0:	4a0c      	ldr	r2, [pc, #48]	; (80159f4 <COM_Init+0x4c>)
 80159c2:	e9c0 2300 	strd	r2, r3, [r0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80159c6:	2300      	movs	r3, #0
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 80159c8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 80159cc:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80159ce:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 80159d0:	230c      	movs	r3, #12
 80159d2:	6143      	str	r3, [r0, #20]
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80159d4:	2310      	movs	r3, #16
 80159d6:	6283      	str	r3, [r0, #40]	; 0x28
  UartHandle.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80159d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80159dc:	63c3      	str	r3, [r0, #60]	; 0x3c
  UartHandle.FifoMode = UART_FIFOMODE_ENABLE;
 80159de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80159e2:	6643      	str	r3, [r0, #100]	; 0x64
  return HAL_UART_Init(&UartHandle);
}
 80159e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&UartHandle);
 80159e8:	f001 b900 	b.w	8016bec <HAL_UART_Init>
 80159ec:	20000128 	.word	0x20000128
 80159f0:	200001ac 	.word	0x200001ac
 80159f4:	40008000 	.word	0x40008000

080159f8 <HAL_UART_MspInit>:
  * @brief  UART MSP Init.
  * @param  huart: UART handler pointer.
  * @retval None.
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80159f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if (huart->Instance == COM_UART)
 80159fa:	6802      	ldr	r2, [r0, #0]
 80159fc:	4b22      	ldr	r3, [pc, #136]	; (8015a88 <HAL_UART_MspInit+0x90>)
{
 80159fe:	b08b      	sub	sp, #44	; 0x2c
  if (huart->Instance == COM_UART)
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d13f      	bne.n	8015a84 <HAL_UART_MspInit+0x8c>
  {
    /* Peripheral Clock Enable */
    COM_UART_CLK_ENABLE();
 8015a04:	4c21      	ldr	r4, [pc, #132]	; (8015a8c <HAL_UART_MspInit+0x94>)
    COM_UART_TX_GPIO_CLK_ENABLE();
    COM_UART_RX_GPIO_CLK_ENABLE();

    /*Configure GPIO pins : COM_UART_TX_Pin  */
    GPIO_InitStruct.Pin = COM_UART_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a06:	2702      	movs	r7, #2
    COM_UART_CLK_ENABLE();
 8015a08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a0a:	2600      	movs	r6, #0
    COM_UART_CLK_ENABLE();
 8015a0c:	f043 0301 	orr.w	r3, r3, #1
 8015a10:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015a12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a14:	2503      	movs	r5, #3
    COM_UART_CLK_ENABLE();
 8015a16:	f003 0301 	and.w	r3, r3, #1
 8015a1a:	9301      	str	r3, [sp, #4]
 8015a1c:	9b01      	ldr	r3, [sp, #4]
    COM_UART_TX_GPIO_CLK_ENABLE();
 8015a1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8015a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a24:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015a26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8015a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a2c:	9302      	str	r3, [sp, #8]
 8015a2e:	9b02      	ldr	r3, [sp, #8]
 8015a30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015a36:	65a3      	str	r3, [r4, #88]	; 0x58
 8015a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015a3e:	9303      	str	r3, [sp, #12]
 8015a40:	9b03      	ldr	r3, [sp, #12]
 8015a42:	f001 f903 	bl	8016c4c <HAL_PWREx_EnableVddIO2>
    COM_UART_RX_GPIO_CLK_ENABLE();
 8015a46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8015a48:	4811      	ldr	r0, [pc, #68]	; (8015a90 <HAL_UART_MspInit+0x98>)
    COM_UART_RX_GPIO_CLK_ENABLE();
 8015a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a4e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015a50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
 8015a52:	2408      	movs	r4, #8
    COM_UART_RX_GPIO_CLK_ENABLE();
 8015a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a58:	9304      	str	r3, [sp, #16]
 8015a5a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a5c:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8015a5e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a60:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a64:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
 8015a68:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8015a6a:	f000 fce3 	bl	8016434 <HAL_GPIO_Init>

    /*Configure GPIO pins : COM_UART_RX_Pin  */
    GPIO_InitStruct.Pin = COM_UART_RX_PIN;
 8015a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = COM_UART_RX_AF;
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 8015a72:	4807      	ldr	r0, [pc, #28]	; (8015a90 <HAL_UART_MspInit+0x98>)
 8015a74:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a76:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a7a:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = COM_UART_RX_AF;
 8015a7e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 8015a80:	f000 fcd8 	bl	8016434 <HAL_GPIO_Init>

  }

}
 8015a84:	b00b      	add	sp, #44	; 0x2c
 8015a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a88:	40008000 	.word	0x40008000
 8015a8c:	40021000 	.word	0x40021000
 8015a90:	42021800 	.word	0x42021800

08015a94 <COM_Transmit>:
  * @param uDataLength: Data pointer to the Data to transmit.
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
 8015a94:	4613      	mov	r3, r2
  return HAL_UART_Transmit(&UartHandle, (uint8_t *)Data, uDataLength, uTimeout);
 8015a96:	460a      	mov	r2, r1
 8015a98:	4601      	mov	r1, r0
 8015a9a:	4801      	ldr	r0, [pc, #4]	; (8015aa0 <COM_Transmit+0xc>)
 8015a9c:	f000 bf9b 	b.w	80169d6 <HAL_UART_Transmit>
 8015aa0:	200001ac 	.word	0x200001ac

08015aa4 <COM_Receive>:
  * @param uDataLength: Data pointer to the Data to receive.
  * @param uTimeout: Timeout duration.
  * @retval Status of the Receive operation.
  */
HAL_StatusTypeDef COM_Receive(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
 8015aa4:	4613      	mov	r3, r2
  return HAL_UART_Receive(&UartHandle, (uint8_t *)Data, uDataLength, uTimeout);
 8015aa6:	460a      	mov	r2, r1
 8015aa8:	4601      	mov	r1, r0
 8015aaa:	4801      	ldr	r0, [pc, #4]	; (8015ab0 <COM_Receive+0xc>)
 8015aac:	f000 bff0 	b.w	8016a90 <HAL_UART_Receive>
 8015ab0:	200001ac 	.word	0x200001ac

08015ab4 <COM_Flush>:
  * @retval HAL_Status.
  */
HAL_StatusTypeDef COM_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8015ab4:	4b05      	ldr	r3, [pc, #20]	; (8015acc <COM_Flush+0x18>)
  return HAL_OK;
}
 8015ab6:	2000      	movs	r0, #0
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	699a      	ldr	r2, [r3, #24]
 8015abc:	f042 0208 	orr.w	r2, r2, #8
 8015ac0:	619a      	str	r2, [r3, #24]
 8015ac2:	699a      	ldr	r2, [r3, #24]
 8015ac4:	f042 0210 	orr.w	r2, r2, #16
 8015ac8:	619a      	str	r2, [r3, #24]
}
 8015aca:	4770      	bx	lr
 8015acc:	200001ac 	.word	0x200001ac

08015ad0 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8015ad0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8015ad4:	4905      	ldr	r1, [pc, #20]	; (8015aec <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015ad6:	4b06      	ldr	r3, [pc, #24]	; (8015af0 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8015ad8:	68ca      	ldr	r2, [r1, #12]
 8015ada:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015ade:	4313      	orrs	r3, r2
 8015ae0:	60cb      	str	r3, [r1, #12]
 8015ae2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8015ae6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8015ae8:	e7fd      	b.n	8015ae6 <__NVIC_SystemReset+0x16>
 8015aea:	bf00      	nop
 8015aec:	e000ed00 	.word	0xe000ed00
 8015af0:	05fa0004 	.word	0x05fa0004

08015af4 <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 8015af4:	b508      	push	{r3, lr}
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  NVIC_SystemReset();
 8015af6:	f7ff ffeb 	bl	8015ad0 <__NVIC_SystemReset>

08015afa <SecureError_Callback>:
 8015afa:	b508      	push	{r3, lr}
 8015afc:	f7ff ffe8 	bl	8015ad0 <__NVIC_SystemReset>

08015b00 <_write>:
{
 8015b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b02:	460e      	mov	r6, r1
 8015b04:	4614      	mov	r4, r2
  for (i = 0; i < len; i++)
 8015b06:	2500      	movs	r5, #0
 8015b08:	42a5      	cmp	r5, r4
 8015b0a:	db02      	blt.n	8015b12 <_write+0x12>
}
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	b002      	add	sp, #8
 8015b10:	bd70      	pop	{r4, r5, r6, pc}
    uart_putc(str[i]);
 8015b12:	5d73      	ldrb	r3, [r6, r5]
  COM_Transmit(&c, 1, 1000U);
 8015b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015b18:	2101      	movs	r1, #1
 8015b1a:	f10d 0007 	add.w	r0, sp, #7
 8015b1e:	f88d 3007 	strb.w	r3, [sp, #7]
  for (i = 0; i < len; i++)
 8015b22:	3501      	adds	r5, #1
  COM_Transmit(&c, 1, 1000U);
 8015b24:	f7ff ffb6 	bl	8015a94 <COM_Transmit>
  for (i = 0; i < len; i++)
 8015b28:	e7ee      	b.n	8015b08 <_write+0x8>
	...

08015b2c <FW_APP_PrintMainMenu>:
{
 8015b2c:	b508      	push	{r3, lr}
  printf("\r\n=================== Main Menu ============================\r\n\n");
 8015b2e:	4807      	ldr	r0, [pc, #28]	; (8015b4c <FW_APP_PrintMainMenu+0x20>)
 8015b30:	f001 f9ca 	bl	8016ec8 <puts>
  printf("  Test Protections -------------------------------------- 1\r\n\n");
 8015b34:	4806      	ldr	r0, [pc, #24]	; (8015b50 <FW_APP_PrintMainMenu+0x24>)
 8015b36:	f001 f9c7 	bl	8016ec8 <puts>
  printf("  Toggle Secure LED ------------------------------------- 2\r\n\n");
 8015b3a:	4806      	ldr	r0, [pc, #24]	; (8015b54 <FW_APP_PrintMainMenu+0x28>)
 8015b3c:	f001 f9c4 	bl	8016ec8 <puts>
}
 8015b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("  Selection :\r\n\n");
 8015b44:	4804      	ldr	r0, [pc, #16]	; (8015b58 <FW_APP_PrintMainMenu+0x2c>)
 8015b46:	f001 b9bf 	b.w	8016ec8 <puts>
 8015b4a:	bf00      	nop
 8015b4c:	08017f78 	.word	0x08017f78
 8015b50:	08017fb7 	.word	0x08017fb7
 8015b54:	08017ff5 	.word	0x08017ff5
 8015b58:	08018033 	.word	0x08018033

08015b5c <FW_APP_Run>:
  uint8_t key = 0U;
 8015b5c:	2300      	movs	r3, #0
{
 8015b5e:	b507      	push	{r0, r1, r2, lr}
  uint8_t key = 0U;
 8015b60:	f88d 3007 	strb.w	r3, [sp, #7]
  FW_APP_PrintMainMenu();
 8015b64:	f7ff ffe2 	bl	8015b2c <FW_APP_PrintMainMenu>
          printf("Invalid Number !\r");
 8015b68:	4c0e      	ldr	r4, [pc, #56]	; (8015ba4 <FW_APP_Run+0x48>)
    COM_Flush();
 8015b6a:	f7ff ffa3 	bl	8015ab4 <COM_Flush>
    if (COM_Receive(&key, 1U, RX_TIMEOUT) == HAL_OK)
 8015b6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8015b72:	2101      	movs	r1, #1
 8015b74:	f10d 0007 	add.w	r0, sp, #7
 8015b78:	f7ff ff94 	bl	8015aa4 <COM_Receive>
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	d1f4      	bne.n	8015b6a <FW_APP_Run+0xe>
      switch (key)
 8015b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015b84:	2b31      	cmp	r3, #49	; 0x31
 8015b86:	d005      	beq.n	8015b94 <FW_APP_Run+0x38>
 8015b88:	2b32      	cmp	r3, #50	; 0x32
 8015b8a:	d008      	beq.n	8015b9e <FW_APP_Run+0x42>
          printf("Invalid Number !\r");
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	f001 f915 	bl	8016dbc <iprintf>
          break;
 8015b92:	e001      	b.n	8015b98 <FW_APP_Run+0x3c>
          TEST_PROTECTIONS_Run();
 8015b94:	f000 f9b2 	bl	8015efc <TEST_PROTECTIONS_Run>
      FW_APP_PrintMainMenu();
 8015b98:	f7ff ffc8 	bl	8015b2c <FW_APP_PrintMainMenu>
 8015b9c:	e7e5      	b.n	8015b6a <FW_APP_Run+0xe>
          SECURE_GPIO_Toggle();
 8015b9e:	f002 f9db 	bl	8017f58 <__SECURE_GPIO_Toggle_veneer>
          break;
 8015ba2:	e7f9      	b.n	8015b98 <FW_APP_Run+0x3c>
 8015ba4:	08018043 	.word	0x08018043

08015ba8 <main>:
{
 8015ba8:	b508      	push	{r3, lr}
  pUserAppId = (uint8_t *)&UserAppId;
 8015baa:	4c16      	ldr	r4, [pc, #88]	; (8015c04 <main+0x5c>)
 8015bac:	4b16      	ldr	r3, [pc, #88]	; (8015c08 <main+0x60>)
 8015bae:	6023      	str	r3, [r4, #0]
  HAL_Init();
 8015bb0:	f000 fa3c 	bl	801602c <HAL_Init>
  COM_Init();
 8015bb4:	f7ff fef8 	bl	80159a8 <COM_Init>
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 8015bb8:	2000      	movs	r0, #0
 8015bba:	4914      	ldr	r1, [pc, #80]	; (8015c0c <main+0x64>)
 8015bbc:	f002 f9d4 	bl	8017f68 <__SECURE_RegisterCallback_veneer>
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8015bc0:	2001      	movs	r0, #1
 8015bc2:	4913      	ldr	r1, [pc, #76]	; (8015c10 <main+0x68>)
 8015bc4:	f002 f9d0 	bl	8017f68 <__SECURE_RegisterCallback_veneer>
  if (TestNumber & TEST_PROTECTION_MASK)
 8015bc8:	4b12      	ldr	r3, [pc, #72]	; (8015c14 <main+0x6c>)
 8015bca:	681a      	ldr	r2, [r3, #0]
 8015bcc:	4b12      	ldr	r3, [pc, #72]	; (8015c18 <main+0x70>)
 8015bce:	421a      	tst	r2, r3
 8015bd0:	d001      	beq.n	8015bd6 <main+0x2e>
    TEST_PROTECTIONS_Run_SecUserMem();
 8015bd2:	f000 f8af 	bl	8015d34 <TEST_PROTECTIONS_Run_SecUserMem>
  printf("\r\n======================================================================");
 8015bd6:	4811      	ldr	r0, [pc, #68]	; (8015c1c <main+0x74>)
 8015bd8:	f001 f8f0 	bl	8016dbc <iprintf>
  printf("\r\n=              (C) COPYRIGHT 2019 STMicroelectronics                 =");
 8015bdc:	4810      	ldr	r0, [pc, #64]	; (8015c20 <main+0x78>)
 8015bde:	f001 f8ed 	bl	8016dbc <iprintf>
  printf("\r\n=                                                                    =");
 8015be2:	4810      	ldr	r0, [pc, #64]	; (8015c24 <main+0x7c>)
 8015be4:	f001 f8ea 	bl	8016dbc <iprintf>
  printf("\r\n=                          User App #%c                               =", *pUserAppId);
 8015be8:	6823      	ldr	r3, [r4, #0]
 8015bea:	480f      	ldr	r0, [pc, #60]	; (8015c28 <main+0x80>)
 8015bec:	7819      	ldrb	r1, [r3, #0]
 8015bee:	f001 f8e5 	bl	8016dbc <iprintf>
  printf("\r\n======================================================================");
 8015bf2:	480a      	ldr	r0, [pc, #40]	; (8015c1c <main+0x74>)
 8015bf4:	f001 f8e2 	bl	8016dbc <iprintf>
  printf("\r\n\r\n");
 8015bf8:	480c      	ldr	r0, [pc, #48]	; (8015c2c <main+0x84>)
 8015bfa:	f001 f965 	bl	8016ec8 <puts>
  FW_APP_Run();
 8015bfe:	f7ff ffad 	bl	8015b5c <FW_APP_Run>
 8015c02:	bf00      	nop
 8015c04:	20000248 	.word	0x20000248
 8015c08:	0801817e 	.word	0x0801817e
 8015c0c:	08015af5 	.word	0x08015af5
 8015c10:	08015afb 	.word	0x08015afb
 8015c14:	20000000 	.word	0x20000000
 8015c18:	dead0000 	.word	0xdead0000
 8015c1c:	08018055 	.word	0x08018055
 8015c20:	0801809e 	.word	0x0801809e
 8015c24:	080180e7 	.word	0x080180e7
 8015c28:	08018130 	.word	0x08018130
 8015c2c:	0801817a 	.word	0x0801817a

08015c30 <mpu_armv8m_region_enable>:
  enum mpu_armv8m_error_t ret_val = MPU_ARMV8M_OK;
  uint32_t base_cfg;
  uint32_t limit_cfg;

  /*FIXME : Add complete error checking*/
  if ((region_cfg->region_base & ~MPU_RBAR_BASE_Msk) != 0)
 8015c30:	684a      	ldr	r2, [r1, #4]
{
 8015c32:	b510      	push	{r4, lr}
  if ((region_cfg->region_base & ~MPU_RBAR_BASE_Msk) != 0)
 8015c34:	f012 041f 	ands.w	r4, r2, #31
 8015c38:	d125      	bne.n	8015c86 <mpu_armv8m_region_enable+0x56>
  /* region_limit doesn't need to be aligned but the scatter
   * file needs to be setup to ensure that partitions do not overlap.
   */
  /* don't disable MPU */

  mpu->RNR  = region_cfg->region_nr & MPU_RNR_REGION_Msk;
 8015c3a:	780b      	ldrb	r3, [r1, #0]
  MPU_Type *mpu = (MPU_Type *)dev->base;
 8015c3c:	6800      	ldr	r0, [r0, #0]

  /* This 0s the lower bits of the base address */
  base_cfg = region_cfg->region_base & MPU_RBAR_BASE_Msk;
 8015c3e:	f022 021f 	bic.w	r2, r2, #31
  mpu->RNR  = region_cfg->region_nr & MPU_RNR_REGION_Msk;
 8015c42:	6083      	str	r3, [r0, #8]
  base_cfg |= (region_cfg->attr_sh << MPU_RBAR_SH_Pos) & MPU_RBAR_SH_Msk;
  base_cfg |= (region_cfg->attr_access << MPU_RBAR_AP_Pos) & MPU_RBAR_AP_Msk;
  base_cfg |= (region_cfg->attr_exec << MPU_RBAR_XN_Pos) & MPU_RBAR_XN_Msk;
 8015c44:	7c0b      	ldrb	r3, [r1, #16]
 8015c46:	f003 0301 	and.w	r3, r3, #1
 8015c4a:	4313      	orrs	r3, r2
  base_cfg |= (region_cfg->attr_sh << MPU_RBAR_SH_Pos) & MPU_RBAR_SH_Msk;
 8015c4c:	7c8a      	ldrb	r2, [r1, #18]
 8015c4e:	00d2      	lsls	r2, r2, #3
 8015c50:	f002 0218 	and.w	r2, r2, #24
 8015c54:	431a      	orrs	r2, r3
  base_cfg |= (region_cfg->attr_access << MPU_RBAR_AP_Pos) & MPU_RBAR_AP_Msk;
 8015c56:	7c4b      	ldrb	r3, [r1, #17]
 8015c58:	005b      	lsls	r3, r3, #1
 8015c5a:	f003 0306 	and.w	r3, r3, #6
  base_cfg |= (region_cfg->attr_exec << MPU_RBAR_XN_Pos) & MPU_RBAR_XN_Msk;
 8015c5e:	4313      	orrs	r3, r2

  mpu->RBAR = base_cfg;
 8015c60:	60c3      	str	r3, [r0, #12]

  /*This 0s the lower bits of base address but they are treated as 1 */
  limit_cfg = (region_cfg->region_limit - 1) & MPU_RLAR_LIMIT_Msk;
 8015c62:	688b      	ldr	r3, [r1, #8]
 8015c64:	3b01      	subs	r3, #1
 8015c66:	f023 021f 	bic.w	r2, r3, #31

  limit_cfg |= (region_cfg->region_attridx << MPU_RLAR_AttrIndx_Pos) &
 8015c6a:	68cb      	ldr	r3, [r1, #12]
 8015c6c:	005b      	lsls	r3, r3, #1
 8015c6e:	f003 030e 	and.w	r3, r3, #14
 8015c72:	4313      	orrs	r3, r2
               MPU_RLAR_AttrIndx_Msk;

  limit_cfg |= MPU_RLAR_EN_Msk;
 8015c74:	f043 0301 	orr.w	r3, r3, #1

  mpu->RLAR = limit_cfg;
 8015c78:	6103      	str	r3, [r0, #16]
 8015c7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015c7e:	f3bf 8f6f 	isb	sy

  /* Enable MPU before the next instruction */
  __DSB();
  __ISB();

  return ret_val;
 8015c82:	4620      	mov	r0, r4
}
 8015c84:	bd10      	pop	{r4, pc}
    return MPU_ARMV8M_ERROR;
 8015c86:	2001      	movs	r0, #1
 8015c88:	e7fc      	b.n	8015c84 <mpu_armv8m_region_enable+0x54>

08015c8a <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8015c8a:	4770      	bx	lr

08015c8c <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8015c8c:	e7fe      	b.n	8015c8c <HardFault_Handler>

08015c8e <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8015c8e:	e7fe      	b.n	8015c8e <MemManage_Handler>

08015c90 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8015c90:	e7fe      	b.n	8015c90 <BusFault_Handler>

08015c92 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8015c92:	e7fe      	b.n	8015c92 <UsageFault_Handler>

08015c94 <DebugMon_Handler>:
 8015c94:	4770      	bx	lr

08015c96 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8015c96:	f000 b9db 	b.w	8016050 <HAL_IncTick>

08015c9a <FLASH_IRQHandler>:
  * @param  None
  * @retval None
  */
void FLASH_IRQHandler(void)
{
  HAL_FLASH_IRQHandler();
 8015c9a:	f000 ba57 	b.w	801614c <HAL_FLASH_IRQHandler>

08015c9e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8015c9e:	b570      	push	{r4, r5, r6, lr}
 8015ca0:	460e      	mov	r6, r1
 8015ca2:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015ca4:	2500      	movs	r5, #0
 8015ca6:	42a5      	cmp	r5, r4
 8015ca8:	db01      	blt.n	8015cae <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8015caa:	4620      	mov	r0, r4
 8015cac:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8015cae:	e000      	b.n	8015cb2 <_read+0x14>
 8015cb0:	bf00      	nop
 8015cb2:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015cb4:	3501      	adds	r5, #1
 8015cb6:	e7f6      	b.n	8015ca6 <_read+0x8>

08015cb8 <_close>:
}

int _close(int file)
{
	return -1;
}
 8015cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015cbc:	4770      	bx	lr

08015cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8015cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8015cc2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8015cc4:	604b      	str	r3, [r1, #4]
}
 8015cc6:	4770      	bx	lr

08015cc8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8015cc8:	2001      	movs	r0, #1
 8015cca:	4770      	bx	lr

08015ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8015ccc:	2000      	movs	r0, #0
 8015cce:	4770      	bx	lr

08015cd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8015cd0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8015cd2:	4b0a      	ldr	r3, [pc, #40]	; (8015cfc <_sbrk+0x2c>)
{
 8015cd4:	4602      	mov	r2, r0
	if (heap_end == 0)
 8015cd6:	6819      	ldr	r1, [r3, #0]
 8015cd8:	b909      	cbnz	r1, 8015cde <_sbrk+0xe>
		heap_end = &end;
 8015cda:	4909      	ldr	r1, [pc, #36]	; (8015d00 <_sbrk+0x30>)
 8015cdc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8015cde:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8015ce0:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8015ce2:	4402      	add	r2, r0
 8015ce4:	428a      	cmp	r2, r1
 8015ce6:	d906      	bls.n	8015cf6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8015ce8:	f001 f836 	bl	8016d58 <__errno>
 8015cec:	230c      	movs	r3, #12
 8015cee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8015cf0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8015cf4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8015cf6:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8015cf8:	e7fc      	b.n	8015cf4 <_sbrk+0x24>
 8015cfa:	bf00      	nop
 8015cfc:	2000023c 	.word	0x2000023c
 8015d00:	20000260 	.word	0x20000260

08015d04 <TEST_PROTECTIONS_PrintTestingMenu>:
  * @brief  Display the TEST Main Menu choices on HyperTerminal
  * @param  None.
  * @retval None.
  */
static void TEST_PROTECTIONS_PrintTestingMenu(void)
{
 8015d04:	b508      	push	{r3, lr}
  printf("\r\n=================== Test Menu ============================\r\n\n");
 8015d06:	4807      	ldr	r0, [pc, #28]	; (8015d24 <TEST_PROTECTIONS_PrintTestingMenu+0x20>)
 8015d08:	f001 f8de 	bl	8016ec8 <puts>
  printf("  Test Protection : NonSecure try to access to Secure --- 1\r\n\n");
 8015d0c:	4806      	ldr	r0, [pc, #24]	; (8015d28 <TEST_PROTECTIONS_PrintTestingMenu+0x24>)
 8015d0e:	f001 f8db 	bl	8016ec8 <puts>
  printf("  RDP Regression ---------------------------------------- 2\r\n\n");
 8015d12:	4806      	ldr	r0, [pc, #24]	; (8015d2c <TEST_PROTECTIONS_PrintTestingMenu+0x28>)
 8015d14:	f001 f8d8 	bl	8016ec8 <puts>
  printf("  Previous Menu ----------------------------------------- x\r\n\n");
}
 8015d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("  Previous Menu ----------------------------------------- x\r\n\n");
 8015d1c:	4804      	ldr	r0, [pc, #16]	; (8015d30 <TEST_PROTECTIONS_PrintTestingMenu+0x2c>)
 8015d1e:	f001 b8d3 	b.w	8016ec8 <puts>
 8015d22:	bf00      	nop
 8015d24:	0801817f 	.word	0x0801817f
 8015d28:	080181be 	.word	0x080181be
 8015d2c:	080181fc 	.word	0x080181fc
 8015d30:	0801823a 	.word	0x0801823a

08015d34 <TEST_PROTECTIONS_Run_SecUserMem>:
  uint32_t page_error = 0U;
 8015d34:	2300      	movs	r3, #0
{
 8015d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((TestNumber & TEST_PROTECTION_MASK) == 0)
 8015d3a:	4e62      	ldr	r6, [pc, #392]	; (8015ec4 <TEST_PROTECTIONS_Run_SecUserMem+0x190>)
{
 8015d3c:	b089      	sub	sp, #36	; 0x24
  if ((TestNumber & TEST_PROTECTION_MASK) == 0)
 8015d3e:	6832      	ldr	r2, [r6, #0]
  uint32_t page_error = 0U;
 8015d40:	9301      	str	r3, [sp, #4]
  if ((TestNumber & TEST_PROTECTION_MASK) == 0)
 8015d42:	4b61      	ldr	r3, [pc, #388]	; (8015ec8 <TEST_PROTECTIONS_Run_SecUserMem+0x194>)
           aTestOperation[aProtectTests[test_idx].type], aProtectTests[test_idx].msg, (int)aProtectTests[test_idx].address);
 8015d44:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8015ef4 <TEST_PROTECTIONS_Run_SecUserMem+0x1c0>
  if ((TestNumber & TEST_PROTECTION_MASK) == 0)
 8015d48:	4213      	tst	r3, r2
      if (on)
      {
        __HAL_RCC_RNG_CLK_ENABLE();
      }
      else
        __HAL_RCC_RNG_CLK_DISABLE();
 8015d4a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8015ef8 <TEST_PROTECTIONS_Run_SecUserMem+0x1c4>
    TestNumber = TEST_PROTECTION_MASK;
 8015d4e:	bf08      	it	eq
 8015d50:	6033      	streq	r3, [r6, #0]
    HAL_Delay(100);
 8015d52:	2064      	movs	r0, #100	; 0x64
 8015d54:	f000 f98e 	bl	8016074 <HAL_Delay>
    test_idx = TestNumber & 0xffff;
 8015d58:	8837      	ldrh	r7, [r6, #0]
    if (test_idx > (sizeof(aProtectTests) / sizeof(TestProtection_t) -1))
 8015d5a:	2f04      	cmp	r7, #4
 8015d5c:	d902      	bls.n	8015d64 <TEST_PROTECTIONS_Run_SecUserMem+0x30>
    TestNumber = 0;            /* no more test in progress */
 8015d5e:	2300      	movs	r3, #0
 8015d60:	6033      	str	r3, [r6, #0]
 8015d62:	e043      	b.n	8015dec <TEST_PROTECTIONS_Run_SecUserMem+0xb8>
           aTestOperation[aProtectTests[test_idx].type], aProtectTests[test_idx].msg, (int)aProtectTests[test_idx].address);
 8015d64:	f04f 0b28 	mov.w	fp, #40	; 0x28
    printf("\r\n= [TEST] %s @ %s %08x", \
 8015d68:	2014      	movs	r0, #20
    TestNumber = TEST_PROTECTION_MASK | ((test_idx + 1) & 0xffff);
 8015d6a:	1c7b      	adds	r3, r7, #1
 8015d6c:	f043 435e 	orr.w	r3, r3, #3724541952	; 0xde000000
 8015d70:	f443 032d 	orr.w	r3, r3, #11337728	; 0xad0000
 8015d74:	6033      	str	r3, [r6, #0]
           aTestOperation[aProtectTests[test_idx].type], aProtectTests[test_idx].msg, (int)aProtectTests[test_idx].address);
 8015d76:	fb0b f307 	mul.w	r3, fp, r7
 8015d7a:	eb0a 0203 	add.w	r2, sl, r3
 8015d7e:	f892 4024 	ldrb.w	r4, [r2, #36]	; 0x24
 8015d82:	f85a 5003 	ldr.w	r5, [sl, r3]
 8015d86:	f103 0904 	add.w	r9, r3, #4
    printf("\r\n= [TEST] %s @ %s %08x", \
 8015d8a:	4950      	ldr	r1, [pc, #320]	; (8015ecc <TEST_PROTECTIONS_Run_SecUserMem+0x198>)
           aTestOperation[aProtectTests[test_idx].type], aProtectTests[test_idx].msg, (int)aProtectTests[test_idx].address);
 8015d8c:	44d1      	add	r9, sl
    printf("\r\n= [TEST] %s @ %s %08x", \
 8015d8e:	fb00 1104 	mla	r1, r0, r4, r1
 8015d92:	462b      	mov	r3, r5
 8015d94:	464a      	mov	r2, r9
 8015d96:	484e      	ldr	r0, [pc, #312]	; (8015ed0 <TEST_PROTECTIONS_Run_SecUserMem+0x19c>)
 8015d98:	f001 f810 	bl	8016dbc <iprintf>
    switch (aProtectTests[test_idx].type)
 8015d9c:	2c07      	cmp	r4, #7
 8015d9e:	d8d8      	bhi.n	8015d52 <TEST_PROTECTIONS_Run_SecUserMem+0x1e>
 8015da0:	e8df f004 	tbb	[pc, r4]
 8015da4:	49352704 	.word	0x49352704
 8015da8:	8457554c 	.word	0x8457554c
        HAL_FLASH_Unlock();
 8015dac:	f000 fa28 	bl	8016200 <HAL_FLASH_Unlock>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, aProtectTests[test_idx].address, pattern);
 8015db0:	2200      	movs	r2, #0
 8015db2:	4629      	mov	r1, r5
 8015db4:	2300      	movs	r3, #0
 8015db6:	2001      	movs	r0, #1
 8015db8:	f000 fa72 	bl	80162a0 <HAL_FLASH_Program>
        HAL_FLASH_Lock();
 8015dbc:	f000 fa32 	bl	8016224 <HAL_FLASH_Lock>
        flashErrCode = HAL_FLASH_GetError();
 8015dc0:	f000 fa3c 	bl	801623c <HAL_FLASH_GetError>
 8015dc4:	4605      	mov	r5, r0
        printf("\r\nflash error code: %x", (int)flashErrCode);
 8015dc6:	4601      	mov	r1, r0
 8015dc8:	4842      	ldr	r0, [pc, #264]	; (8015ed4 <TEST_PROTECTIONS_Run_SecUserMem+0x1a0>)
 8015dca:	f000 fff7 	bl	8016dbc <iprintf>
          status = TEST_ERROR;
 8015dce:	f015 0f10 	tst.w	r5, #16
        if (0 == strncmp("OBs @", (const char *)aProtectTests[test_idx].msg, 5))
 8015dd2:	f04f 0205 	mov.w	r2, #5
 8015dd6:	4649      	mov	r1, r9
 8015dd8:	483f      	ldr	r0, [pc, #252]	; (8015ed8 <TEST_PROTECTIONS_Run_SecUserMem+0x1a4>)
          status = TEST_ERROR;
 8015dda:	bf08      	it	eq
 8015ddc:	2402      	moveq	r4, #2
        if (0 == strncmp("OBs @", (const char *)aProtectTests[test_idx].msg, 5))
 8015dde:	f001 f93f 	bl	8017060 <strncmp>
 8015de2:	2800      	cmp	r0, #0
 8015de4:	d15c      	bne.n	8015ea0 <TEST_PROTECTIONS_Run_SecUserMem+0x16c>
    printf("\r\n TEST_PROTECTIONS_Run_SecUserMem : Failed");
 8015de6:	483d      	ldr	r0, [pc, #244]	; (8015edc <TEST_PROTECTIONS_Run_SecUserMem+0x1a8>)
 8015de8:	f000 ffe8 	bl	8016dbc <iprintf>
}
 8015dec:	b009      	add	sp, #36	; 0x24
 8015dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tmp = *(uint8_t *)(aProtectTests[test_idx].address);
 8015df2:	782b      	ldrb	r3, [r5, #0]
        HAL_Delay(1);        /* ensure Flag is set */
 8015df4:	2001      	movs	r0, #1
        tmp = *(uint8_t *)(aProtectTests[test_idx].address);
 8015df6:	f88d 3003 	strb.w	r3, [sp, #3]
        HAL_Delay(1);        /* ensure Flag is set */
 8015dfa:	f000 f93b 	bl	8016074 <HAL_Delay>
        if (0 == strncmp("Isolated", (const char *)aProtectTests[test_idx].msg, 8))
 8015dfe:	2208      	movs	r2, #8
 8015e00:	4649      	mov	r1, r9
 8015e02:	4837      	ldr	r0, [pc, #220]	; (8015ee0 <TEST_PROTECTIONS_Run_SecUserMem+0x1ac>)
 8015e04:	f001 f92c 	bl	8017060 <strncmp>
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	d1a2      	bne.n	8015d52 <TEST_PROTECTIONS_Run_SecUserMem+0x1e>
 8015e0c:	e7eb      	b.n	8015de6 <TEST_PROTECTIONS_Run_SecUserMem+0xb2>
        HAL_FLASH_Unlock();
 8015e0e:	f000 f9f7 	bl	8016200 <HAL_FLASH_Unlock>
        p_erase_init.TypeErase   = FLASH_TYPEERASE_PAGES;
 8015e12:	2301      	movs	r3, #1
 8015e14:	2202      	movs	r2, #2
        HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8015e16:	a901      	add	r1, sp, #4
        p_erase_init.Page        = (aProtectTests[test_idx].address) / 0x800;
 8015e18:	0aed      	lsrs	r5, r5, #11
        HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8015e1a:	a804      	add	r0, sp, #16
        p_erase_init.TypeErase   = FLASH_TYPEERASE_PAGES;
 8015e1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
        p_erase_init.NbPages     = 1;
 8015e20:	e9cd 5306 	strd	r5, r3, [sp, #24]
        HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8015e24:	f000 fab8 	bl	8016398 <HAL_FLASHEx_Erase>
        HAL_FLASH_Lock();
 8015e28:	f000 f9fc 	bl	8016224 <HAL_FLASH_Lock>
        if ((HAL_FLASH_GetError() & HAL_FLASH_ERROR_WRP) == 0U)
 8015e2c:	f000 fa06 	bl	801623c <HAL_FLASH_GetError>
 8015e30:	06c3      	lsls	r3, r0, #27
 8015e32:	d48e      	bmi.n	8015d52 <TEST_PROTECTIONS_Run_SecUserMem+0x1e>
 8015e34:	e7d7      	b.n	8015de6 <TEST_PROTECTIONS_Run_SecUserMem+0xb2>
        *(uint32_t *)aProtectTests[test_idx].address = 0x00000000;
 8015e36:	2300      	movs	r3, #0
 8015e38:	602b      	str	r3, [r5, #0]
  if (status == TEST_ERROR)
 8015e3a:	e7d4      	b.n	8015de6 <TEST_PROTECTIONS_Run_SecUserMem+0xb2>
        tmp = *(uint8_t *)aProtectTests[test_idx].address;
 8015e3c:	782b      	ldrb	r3, [r5, #0]
        printf(" value : %d ", tmp);
 8015e3e:	4829      	ldr	r0, [pc, #164]	; (8015ee4 <TEST_PROTECTIONS_Run_SecUserMem+0x1b0>)
        tmp = *(uint8_t *)aProtectTests[test_idx].address;
 8015e40:	f88d 3003 	strb.w	r3, [sp, #3]
        printf(" value : %d ", tmp);
 8015e44:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8015e48:	f000 ffb8 	bl	8016dbc <iprintf>
  if (status == TEST_ERROR)
 8015e4c:	e7cb      	b.n	8015de6 <TEST_PROTECTIONS_Run_SecUserMem+0xb2>
        func();
 8015e4e:	47a8      	blx	r5
  if (status == TEST_ERROR)
 8015e50:	e7c9      	b.n	8015de6 <TEST_PROTECTIONS_Run_SecUserMem+0xb2>
        set_periph(aProtectTests[test_idx].periph, 1);
 8015e52:	fb0b a707 	mla	r7, fp, r7, sl
 8015e56:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
  switch (periph)
 8015e5a:	b95c      	cbnz	r4, 8015e74 <TEST_PROTECTIONS_Run_SecUserMem+0x140>
        __HAL_RCC_RNG_CLK_ENABLE();
 8015e5c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8015e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015e64:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8015e68:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8015e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015e70:	9303      	str	r3, [sp, #12]
 8015e72:	9b03      	ldr	r3, [sp, #12]
          status = TEST_ERROR;
 8015e74:	230a      	movs	r3, #10
          tmp_reg = *((__IO uint32_t *)aProtectTests[test_idx].address);
 8015e76:	682a      	ldr	r2, [r5, #0]
 8015e78:	9202      	str	r2, [sp, #8]
          if (tmp_reg != 0)
 8015e7a:	9a02      	ldr	r2, [sp, #8]
 8015e7c:	b90a      	cbnz	r2, 8015e82 <TEST_PROTECTIONS_Run_SecUserMem+0x14e>
        for (i = 0; i < 10; i++)
 8015e7e:	3b01      	subs	r3, #1
 8015e80:	d1f9      	bne.n	8015e76 <TEST_PROTECTIONS_Run_SecUserMem+0x142>
        if (tmp_reg != 0)
 8015e82:	9b02      	ldr	r3, [sp, #8]
 8015e84:	b1cb      	cbz	r3, 8015eba <TEST_PROTECTIONS_Run_SecUserMem+0x186>
          printf(" value : %x ", (int)tmp_reg);
 8015e86:	9902      	ldr	r1, [sp, #8]
 8015e88:	4817      	ldr	r0, [pc, #92]	; (8015ee8 <TEST_PROTECTIONS_Run_SecUserMem+0x1b4>)
 8015e8a:	f000 ff97 	bl	8016dbc <iprintf>
  switch (periph)
 8015e8e:	2c00      	cmp	r4, #0
 8015e90:	d1a9      	bne.n	8015de6 <TEST_PROTECTIONS_Run_SecUserMem+0xb2>
          status = TEST_ERROR;
 8015e92:	2402      	movs	r4, #2
        __HAL_RCC_RNG_CLK_DISABLE();
 8015e94:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8015e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015e9c:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  } while (status == TEST_IN_PROGRESS) ;
 8015ea0:	2c00      	cmp	r4, #0
 8015ea2:	f43f af56 	beq.w	8015d52 <TEST_PROTECTIONS_Run_SecUserMem+0x1e>
  if (status == TEST_ERROR)
 8015ea6:	2c02      	cmp	r4, #2
 8015ea8:	d103      	bne.n	8015eb2 <TEST_PROTECTIONS_Run_SecUserMem+0x17e>
 8015eaa:	e79c      	b.n	8015de6 <TEST_PROTECTIONS_Run_SecUserMem+0xb2>
        printf("\r\n TEST_PROTECTIONS_Run_SecUserMem : Passed");
 8015eac:	480f      	ldr	r0, [pc, #60]	; (8015eec <TEST_PROTECTIONS_Run_SecUserMem+0x1b8>)
 8015eae:	f000 ff85 	bl	8016dbc <iprintf>
    printf("\b\b\b\b\b\b\b\b");
 8015eb2:	480f      	ldr	r0, [pc, #60]	; (8015ef0 <TEST_PROTECTIONS_Run_SecUserMem+0x1bc>)
 8015eb4:	f000 ff82 	bl	8016dbc <iprintf>
 8015eb8:	e751      	b.n	8015d5e <TEST_PROTECTIONS_Run_SecUserMem+0x2a>
  switch (periph)
 8015eba:	2c00      	cmp	r4, #0
 8015ebc:	f47f af49 	bne.w	8015d52 <TEST_PROTECTIONS_Run_SecUserMem+0x1e>
 8015ec0:	e7e8      	b.n	8015e94 <TEST_PROTECTIONS_Run_SecUserMem+0x160>
 8015ec2:	bf00      	nop
 8015ec4:	20000000 	.word	0x20000000
 8015ec8:	dead0000 	.word	0xdead0000
 8015ecc:	0801846c 	.word	0x0801846c
 8015ed0:	08018278 	.word	0x08018278
 8015ed4:	08018290 	.word	0x08018290
 8015ed8:	080182a7 	.word	0x080182a7
 8015edc:	080182fc 	.word	0x080182fc
 8015ee0:	080182ad 	.word	0x080182ad
 8015ee4:	080182b6 	.word	0x080182b6
 8015ee8:	080182c3 	.word	0x080182c3
 8015eec:	080182d0 	.word	0x080182d0
 8015ef0:	08018328 	.word	0x08018328
 8015ef4:	080183a4 	.word	0x080183a4
 8015ef8:	40021000 	.word	0x40021000

08015efc <TEST_PROTECTIONS_Run>:
{
 8015efc:	b530      	push	{r4, r5, lr}
  uint8_t key = 0U;
 8015efe:	2400      	movs	r4, #0
{
 8015f00:	b089      	sub	sp, #36	; 0x24
  uint8_t key = 0U;
 8015f02:	f88d 4007 	strb.w	r4, [sp, #7]
  TEST_PROTECTIONS_PrintTestingMenu();
 8015f06:	f7ff fefd 	bl	8015d04 <TEST_PROTECTIONS_PrintTestingMenu>
          printf("Invalid Number !\r");
 8015f0a:	4d26      	ldr	r5, [pc, #152]	; (8015fa4 <TEST_PROTECTIONS_Run+0xa8>)
    key = 0U;
 8015f0c:	f88d 4007 	strb.w	r4, [sp, #7]
    COM_Flush();
 8015f10:	f7ff fdd0 	bl	8015ab4 <COM_Flush>
    if (COM_Receive(&key, 1U, RX_TIMEOUT) == HAL_OK)
 8015f14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8015f18:	2101      	movs	r1, #1
 8015f1a:	f10d 0007 	add.w	r0, sp, #7
 8015f1e:	f7ff fdc1 	bl	8015aa4 <COM_Receive>
 8015f22:	2800      	cmp	r0, #0
 8015f24:	d1f2      	bne.n	8015f0c <TEST_PROTECTIONS_Run+0x10>
      switch (key)
 8015f26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015f2a:	2b32      	cmp	r3, #50	; 0x32
 8015f2c:	d008      	beq.n	8015f40 <TEST_PROTECTIONS_Run+0x44>
 8015f2e:	2b78      	cmp	r3, #120	; 0x78
 8015f30:	d02f      	beq.n	8015f92 <TEST_PROTECTIONS_Run+0x96>
 8015f32:	2b31      	cmp	r3, #49	; 0x31
 8015f34:	d131      	bne.n	8015f9a <TEST_PROTECTIONS_Run+0x9e>
          TEST_PROTECTIONS_Run_SecUserMem();
 8015f36:	f7ff fefd 	bl	8015d34 <TEST_PROTECTIONS_Run_SecUserMem>
      TEST_PROTECTIONS_PrintTestingMenu();
 8015f3a:	f7ff fee3 	bl	8015d04 <TEST_PROTECTIONS_PrintTestingMenu>
 8015f3e:	e7e5      	b.n	8015f0c <TEST_PROTECTIONS_Run+0x10>
  region_cfg.region_nr = 2U;
 8015f40:	2302      	movs	r3, #2
 8015f42:	4a19      	ldr	r2, [pc, #100]	; (8015fa8 <TEST_PROTECTIONS_Run+0xac>)
  region_cfg.region_limit = NS_DATA_LIMIT;
 8015f44:	4919      	ldr	r1, [pc, #100]	; (8015fac <TEST_PROTECTIONS_Run+0xb0>)
  region_cfg.region_nr = 2U;
 8015f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
  region_cfg.region_limit = NS_DATA_LIMIT;
 8015f4a:	4a19      	ldr	r2, [pc, #100]	; (8015fb0 <TEST_PROTECTIONS_Run+0xb4>)
  region_cfg.attr_exec = MPU_ARMV8M_XN_EXEC_OK;
 8015f4c:	f8ad 001c 	strh.w	r0, [sp, #28]
  region_cfg.region_limit = NS_DATA_LIMIT;
 8015f50:	e9cd 1204 	strd	r1, r2, [sp, #16]
  mpu_armv8m_region_enable(&dev_mpu_ns, &region_cfg);
 8015f54:	a802      	add	r0, sp, #8
 8015f56:	a903      	add	r1, sp, #12
  region_cfg.region_attridx = MPU_ARMV8M_MAIR_ATTR_DATA_IDX;
 8015f58:	9306      	str	r3, [sp, #24]
  region_cfg.attr_sh = MPU_ARMV8M_MAIR_ATTR_DATA_IDX;
 8015f5a:	f88d 301e 	strb.w	r3, [sp, #30]
  mpu_armv8m_region_enable(&dev_mpu_ns, &region_cfg);
 8015f5e:	f7ff fe67 	bl	8015c30 <mpu_armv8m_region_enable>
  __ASM volatile ("cpsid i" : : : "memory");
 8015f62:	b672      	cpsid	i
    *pt = WHILE_1_OPCODE;
 8015f64:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8015f68:	f24e 72fe 	movw	r2, #59390	; 0xe7fe
 8015f6c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8015f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015f72:	f3bf 8f6f 	isb	sy
    printf("\r\n Device ready for regression : \r\n");
 8015f76:	480f      	ldr	r0, [pc, #60]	; (8015fb4 <TEST_PROTECTIONS_Run+0xb8>)
 8015f78:	f000 ffa6 	bl	8016ec8 <puts>
    printf("\r\n - Connect STM32CubeProgrammer mode=HotPlug");
 8015f7c:	480e      	ldr	r0, [pc, #56]	; (8015fb8 <TEST_PROTECTIONS_Run+0xbc>)
 8015f7e:	f000 ff1d 	bl	8016dbc <iprintf>
    printf("\r\n - Perform RDP Regression ");
 8015f82:	480e      	ldr	r0, [pc, #56]	; (8015fbc <TEST_PROTECTIONS_Run+0xc0>)
 8015f84:	f000 ff1a 	bl	8016dbc <iprintf>
    printf("\r\n ");
 8015f88:	480d      	ldr	r0, [pc, #52]	; (8015fc0 <TEST_PROTECTIONS_Run+0xc4>)
 8015f8a:	f000 ff17 	bl	8016dbc <iprintf>
    nsfptr();
 8015f8e:	4b0d      	ldr	r3, [pc, #52]	; (8015fc4 <TEST_PROTECTIONS_Run+0xc8>)
 8015f90:	4798      	blx	r3
      TEST_PROTECTIONS_PrintTestingMenu();
 8015f92:	f7ff feb7 	bl	8015d04 <TEST_PROTECTIONS_PrintTestingMenu>
}
 8015f96:	b009      	add	sp, #36	; 0x24
 8015f98:	bd30      	pop	{r4, r5, pc}
          printf("Invalid Number !\r");
 8015f9a:	4628      	mov	r0, r5
 8015f9c:	f000 ff0e 	bl	8016dbc <iprintf>
          break;
 8015fa0:	e7cb      	b.n	8015f3a <TEST_PROTECTIONS_Run+0x3e>
 8015fa2:	bf00      	nop
 8015fa4:	08018043 	.word	0x08018043
 8015fa8:	e000ed90 	.word	0xe000ed90
 8015fac:	20000020 	.word	0x20000020
 8015fb0:	2002ffff 	.word	0x2002ffff
 8015fb4:	08018331 	.word	0x08018331
 8015fb8:	08018354 	.word	0x08018354
 8015fbc:	08018382 	.word	0x08018382
 8015fc0:	0801839f 	.word	0x0801839f
 8015fc4:	20000001 	.word	0x20000001

08015fc8 <SystemInit>:
  /* Nothing done in non-secure */

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8015fc8:	4770      	bx	lr
	...

08015fcc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8015fcc:	b508      	push	{r3, lr}
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8015fce:	f001 ffbb 	bl	8017f48 <__SECURE_SystemCoreClockUpdate_veneer>
 8015fd2:	4b01      	ldr	r3, [pc, #4]	; (8015fd8 <SystemCoreClockUpdate+0xc>)
 8015fd4:	6018      	str	r0, [r3, #0]
}
 8015fd6:	bd08      	pop	{r3, pc}
 8015fd8:	20000100 	.word	0x20000100

08015fdc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8015fdc:	4770      	bx	lr
	...

08015fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015fe0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8015fe2:	4b0f      	ldr	r3, [pc, #60]	; (8016020 <HAL_InitTick+0x40>)
{
 8015fe4:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8015fe6:	7818      	ldrb	r0, [r3, #0]
 8015fe8:	b908      	cbnz	r0, 8015fee <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8015fea:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8015fec:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8015fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015ff2:	fbb3 f3f0 	udiv	r3, r3, r0
 8015ff6:	4a0b      	ldr	r2, [pc, #44]	; (8016024 <HAL_InitTick+0x44>)
 8015ff8:	6810      	ldr	r0, [r2, #0]
 8015ffa:	fbb0 f0f3 	udiv	r0, r0, r3
 8015ffe:	f000 f88d 	bl	801611c <HAL_SYSTICK_Config>
 8016002:	4604      	mov	r4, r0
 8016004:	2800      	cmp	r0, #0
 8016006:	d1f0      	bne.n	8015fea <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8016008:	2d07      	cmp	r5, #7
 801600a:	d8ee      	bhi.n	8015fea <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801600c:	4602      	mov	r2, r0
 801600e:	4629      	mov	r1, r5
 8016010:	f04f 30ff 	mov.w	r0, #4294967295
 8016014:	f000 f852 	bl	80160bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8016018:	4b03      	ldr	r3, [pc, #12]	; (8016028 <HAL_InitTick+0x48>)
 801601a:	4620      	mov	r0, r4
 801601c:	601d      	str	r5, [r3, #0]
  return status;
 801601e:	e7e5      	b.n	8015fec <HAL_InitTick+0xc>
 8016020:	20000104 	.word	0x20000104
 8016024:	20000100 	.word	0x20000100
 8016028:	20000108 	.word	0x20000108

0801602c <HAL_Init>:
{
 801602c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 801602e:	2004      	movs	r0, #4
 8016030:	f000 f832 	bl	8016098 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 8016034:	f7ff ffca 	bl	8015fcc <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8016038:	2007      	movs	r0, #7
 801603a:	f7ff ffd1 	bl	8015fe0 <HAL_InitTick>
 801603e:	4604      	mov	r4, r0
 8016040:	b918      	cbnz	r0, 801604a <HAL_Init+0x1e>
    HAL_MspInit();
 8016042:	f7ff ffcb 	bl	8015fdc <HAL_MspInit>
}
 8016046:	4620      	mov	r0, r4
 8016048:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 801604a:	2401      	movs	r4, #1
 801604c:	e7fb      	b.n	8016046 <HAL_Init+0x1a>
	...

08016050 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8016050:	4a03      	ldr	r2, [pc, #12]	; (8016060 <HAL_IncTick+0x10>)
 8016052:	4b04      	ldr	r3, [pc, #16]	; (8016064 <HAL_IncTick+0x14>)
 8016054:	6811      	ldr	r1, [r2, #0]
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	440b      	add	r3, r1
 801605a:	6013      	str	r3, [r2, #0]
}
 801605c:	4770      	bx	lr
 801605e:	bf00      	nop
 8016060:	2000024c 	.word	0x2000024c
 8016064:	20000104 	.word	0x20000104

08016068 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8016068:	4b01      	ldr	r3, [pc, #4]	; (8016070 <HAL_GetTick+0x8>)
 801606a:	6818      	ldr	r0, [r3, #0]
}
 801606c:	4770      	bx	lr
 801606e:	bf00      	nop
 8016070:	2000024c 	.word	0x2000024c

08016074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016074:	b538      	push	{r3, r4, r5, lr}
 8016076:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8016078:	f7ff fff6 	bl	8016068 <HAL_GetTick>
 801607c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 801607e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8016080:	bf1e      	ittt	ne
 8016082:	4b04      	ldrne	r3, [pc, #16]	; (8016094 <HAL_Delay+0x20>)
 8016084:	781b      	ldrbne	r3, [r3, #0]
 8016086:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8016088:	f7ff ffee 	bl	8016068 <HAL_GetTick>
 801608c:	1b43      	subs	r3, r0, r5
 801608e:	42a3      	cmp	r3, r4
 8016090:	d3fa      	bcc.n	8016088 <HAL_Delay+0x14>
  {
  }
}
 8016092:	bd38      	pop	{r3, r4, r5, pc}
 8016094:	20000104 	.word	0x20000104

08016098 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016098:	4907      	ldr	r1, [pc, #28]	; (80160b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801609a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801609c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801609e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80160a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80160a6:	0412      	lsls	r2, r2, #16
 80160a8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80160aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80160ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80160b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80160b4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80160b6:	4770      	bx	lr
 80160b8:	e000ed00 	.word	0xe000ed00

080160bc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80160bc:	4b15      	ldr	r3, [pc, #84]	; (8016114 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80160be:	b530      	push	{r4, r5, lr}
 80160c0:	68dc      	ldr	r4, [r3, #12]
 80160c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80160c6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80160ca:	1ce3      	adds	r3, r4, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80160cc:	2d03      	cmp	r5, #3
 80160ce:	bf28      	it	cs
 80160d0:	2503      	movcs	r5, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80160d2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80160d4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80160d8:	bf94      	ite	ls
 80160da:	2400      	movls	r4, #0
 80160dc:	3c04      	subhi	r4, #4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80160de:	fa03 f505 	lsl.w	r5, r3, r5
 80160e2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80160e6:	40a3      	lsls	r3, r4
 80160e8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80160ec:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80160ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80160f0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80160f4:	bfac      	ite	ge
 80160f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80160fa:	4a07      	ldrlt	r2, [pc, #28]	; (8016118 <HAL_NVIC_SetPriority+0x5c>)
 80160fc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8016100:	b2db      	uxtb	r3, r3
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016102:	bfab      	itete	ge
 8016104:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016108:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801610c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016110:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8016112:	bd30      	pop	{r4, r5, pc}
 8016114:	e000ed00 	.word	0xe000ed00
 8016118:	e000ed14 	.word	0xe000ed14

0801611c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801611c:	3801      	subs	r0, #1
 801611e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8016122:	d20a      	bcs.n	801613a <HAL_SYSTICK_Config+0x1e>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016124:	21e0      	movs	r1, #224	; 0xe0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016126:	4b06      	ldr	r3, [pc, #24]	; (8016140 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016128:	4a06      	ldr	r2, [pc, #24]	; (8016144 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801612a:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801612c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016130:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016132:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016134:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016138:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 801613a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop
 8016140:	e000e010 	.word	0xe000e010
 8016144:	e000ed00 	.word	0xe000ed00

08016148 <HAL_FLASH_EndOfOperationCallback>:
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8016148:	4770      	bx	lr

0801614a <HAL_FLASH_OperationErrorCallback>:
 801614a:	4770      	bx	lr

0801614c <HAL_FLASH_IRQHandler>:
  error = (*reg_sr) & FLASH_FLAG_SR_ERRORS;
 801614c:	4a29      	ldr	r2, [pc, #164]	; (80161f4 <HAL_FLASH_IRQHandler+0xa8>)
{
 801614e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  type = (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK));
 8016152:	4c29      	ldr	r4, [pc, #164]	; (80161f8 <HAL_FLASH_IRQHandler+0xac>)
  error = (*reg_sr) & FLASH_FLAG_SR_ERRORS;
 8016154:	6813      	ldr	r3, [r2, #0]
  type = (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK));
 8016156:	68a5      	ldr	r5, [r4, #8]
  error = (*reg_sr) & FLASH_FLAG_SR_ERRORS;
 8016158:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
  type = (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK));
 801615c:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  error = (*reg_sr) & FLASH_FLAG_SR_ERRORS;
 8016160:	f023 0305 	bic.w	r3, r3, #5
 8016164:	049b      	lsls	r3, r3, #18
  if(type == FLASH_TYPEERASE_PAGES)
 8016166:	2d02      	cmp	r5, #2
 8016168:	4690      	mov	r8, r2
  error = (*reg_sr) & FLASH_FLAG_SR_ERRORS;
 801616a:	ea4f 4393 	mov.w	r3, r3, lsr #18
  if(type == FLASH_TYPEERASE_PAGES)
 801616e:	d12f      	bne.n	80161d0 <HAL_FLASH_IRQHandler+0x84>
    param = pFlash.Page;
 8016170:	6967      	ldr	r7, [r4, #20]
  CLEAR_BIT((*reg), type);
 8016172:	4e22      	ldr	r6, [pc, #136]	; (80161fc <HAL_FLASH_IRQHandler+0xb0>)
 8016174:	6832      	ldr	r2, [r6, #0]
 8016176:	ea22 0205 	bic.w	r2, r2, r5
 801617a:	6032      	str	r2, [r6, #0]
  if(error != 0U)
 801617c:	b14b      	cbz	r3, 8016192 <HAL_FLASH_IRQHandler+0x46>
    pFlash.ErrorCode |= error;
 801617e:	6862      	ldr	r2, [r4, #4]
    HAL_FLASH_OperationErrorCallback(param);
 8016180:	4638      	mov	r0, r7
    pFlash.ErrorCode |= error;
 8016182:	431a      	orrs	r2, r3
 8016184:	6062      	str	r2, [r4, #4]
    (*reg_sr) = error;
 8016186:	f8c8 3000 	str.w	r3, [r8]
    pFlash.ProcedureOnGoing = 0U;
 801618a:	2300      	movs	r3, #0
 801618c:	60a3      	str	r3, [r4, #8]
    HAL_FLASH_OperationErrorCallback(param);
 801618e:	f7ff ffdc 	bl	801614a <HAL_FLASH_OperationErrorCallback>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8016192:	f8d8 3000 	ldr.w	r3, [r8]
 8016196:	07db      	lsls	r3, r3, #31
 8016198:	d511      	bpl.n	80161be <HAL_FLASH_IRQHandler+0x72>
    (*reg_sr) = FLASH_FLAG_EOP;
 801619a:	2301      	movs	r3, #1
    if(type == FLASH_TYPEERASE_PAGES)
 801619c:	2d02      	cmp	r5, #2
    (*reg_sr) = FLASH_FLAG_EOP;
 801619e:	f8c8 3000 	str.w	r3, [r8]
    if(type == FLASH_TYPEERASE_PAGES)
 80161a2:	d124      	bne.n	80161ee <HAL_FLASH_IRQHandler+0xa2>
      pFlash.NbPagesToErase--;
 80161a4:	69a3      	ldr	r3, [r4, #24]
 80161a6:	3b01      	subs	r3, #1
 80161a8:	61a3      	str	r3, [r4, #24]
      if(pFlash.NbPagesToErase != 0U)
 80161aa:	b1e3      	cbz	r3, 80161e6 <HAL_FLASH_IRQHandler+0x9a>
        pFlash.Page++;
 80161ac:	6960      	ldr	r0, [r4, #20]
        FLASH_PageErase(pFlash.Page, pFlash.Bank);
 80161ae:	6921      	ldr	r1, [r4, #16]
        pFlash.Page++;
 80161b0:	3001      	adds	r0, #1
 80161b2:	6160      	str	r0, [r4, #20]
        FLASH_PageErase(pFlash.Page, pFlash.Bank);
 80161b4:	f000 f8ce 	bl	8016354 <FLASH_PageErase>
    HAL_FLASH_EndOfOperationCallback(param);
 80161b8:	4638      	mov	r0, r7
 80161ba:	f7ff ffc5 	bl	8016148 <HAL_FLASH_EndOfOperationCallback>
  if(pFlash.ProcedureOnGoing == 0U)
 80161be:	68a2      	ldr	r2, [r4, #8]
 80161c0:	b922      	cbnz	r2, 80161cc <HAL_FLASH_IRQHandler+0x80>
    (*reg) &= ~(FLASH_IT_EOP | FLASH_IT_OPERR);
 80161c2:	6833      	ldr	r3, [r6, #0]
 80161c4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80161c8:	6033      	str	r3, [r6, #0]
    __HAL_UNLOCK(&pFlash);
 80161ca:	7022      	strb	r2, [r4, #0]
}
 80161cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(type == FLASH_TYPEERASE_MASSERASE)
 80161d0:	f248 0204 	movw	r2, #32772	; 0x8004
 80161d4:	4295      	cmp	r5, r2
 80161d6:	d101      	bne.n	80161dc <HAL_FLASH_IRQHandler+0x90>
    param = pFlash.Bank;
 80161d8:	6927      	ldr	r7, [r4, #16]
 80161da:	e7ca      	b.n	8016172 <HAL_FLASH_IRQHandler+0x26>
  else if(type == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80161dc:	2d01      	cmp	r5, #1
  uint32_t param = 0U;
 80161de:	bf14      	ite	ne
 80161e0:	2700      	movne	r7, #0
    param = pFlash.Address;
 80161e2:	68e7      	ldreq	r7, [r4, #12]
 80161e4:	e7c5      	b.n	8016172 <HAL_FLASH_IRQHandler+0x26>
        param = 0xFFFFFFFFU;
 80161e6:	f04f 37ff 	mov.w	r7, #4294967295
        pFlash.ProcedureOnGoing = 0U;
 80161ea:	60a3      	str	r3, [r4, #8]
        param = 0xFFFFFFFFU;
 80161ec:	e7e4      	b.n	80161b8 <HAL_FLASH_IRQHandler+0x6c>
      pFlash.ProcedureOnGoing = 0U;
 80161ee:	2300      	movs	r3, #0
 80161f0:	60a3      	str	r3, [r4, #8]
 80161f2:	e7e1      	b.n	80161b8 <HAL_FLASH_IRQHandler+0x6c>
 80161f4:	40022020 	.word	0x40022020
 80161f8:	2000010c 	.word	0x2000010c
 80161fc:	40022028 	.word	0x40022028

08016200 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 8016200:	4b06      	ldr	r3, [pc, #24]	; (801621c <HAL_FLASH_Unlock+0x1c>)
 8016202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016204:	2a00      	cmp	r2, #0
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8016206:	bfbf      	itttt	lt
 8016208:	4a05      	ldrlt	r2, [pc, #20]	; (8016220 <HAL_FLASH_Unlock+0x20>)
 801620a:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 801620c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8016210:	609a      	strlt	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 8016212:	bfba      	itte	lt
 8016214:	6a98      	ldrlt	r0, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8016216:	0fc0      	lsrlt	r0, r0, #31
 8016218:	2000      	movge	r0, #0
    }
  }
#endif

  return status;
}
 801621a:	4770      	bx	lr
 801621c:	40022000 	.word	0x40022000
 8016220:	45670123 	.word	0x45670123

08016224 <HAL_FLASH_Lock>:
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 8016224:	4b04      	ldr	r3, [pc, #16]	; (8016238 <HAL_FLASH_Lock+0x14>)
 8016226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016228:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801622c:	629a      	str	r2, [r3, #40]	; 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 801622e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    }
  }
#endif

  return status;
}
 8016230:	43c0      	mvns	r0, r0
 8016232:	0fc0      	lsrs	r0, r0, #31
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	40022000 	.word	0x40022000

0801623c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_OPTW: FLASH Option modification error
  */
uint32_t HAL_FLASH_GetError(void)
{
   return pFlash.ErrorCode;
}
 801623c:	4b01      	ldr	r3, [pc, #4]	; (8016244 <HAL_FLASH_GetError+0x8>)
 801623e:	6858      	ldr	r0, [r3, #4]
 8016240:	4770      	bx	lr
 8016242:	bf00      	nop
 8016244:	2000010c 	.word	0x2000010c

08016248 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8016248:	b570      	push	{r4, r5, r6, lr}
 801624a:	4604      	mov	r4, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 801624c:	f7ff ff0c 	bl	8016068 <HAL_GetTick>
  uint32_t error;
  __IO uint32_t *reg_sr;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8016250:	4e10      	ldr	r6, [pc, #64]	; (8016294 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t timeout = HAL_GetTick() + Timeout;
 8016252:	1905      	adds	r5, r0, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8016254:	6a33      	ldr	r3, [r6, #32]
 8016256:	03db      	lsls	r3, r3, #15
 8016258:	d40c      	bmi.n	8016274 <FLASH_WaitForLastOperation+0x2c>
  
  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 801625a:	f242 02fa 	movw	r2, #8442	; 0x20fa
 801625e:	490e      	ldr	r1, [pc, #56]	; (8016298 <FLASH_WaitForLastOperation+0x50>)
 8016260:	6808      	ldr	r0, [r1, #0]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */ 

  if(error != 0u)
 8016262:	4002      	ands	r2, r0
 8016264:	d00e      	beq.n	8016284 <FLASH_WaitForLastOperation+0x3c>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8016266:	480d      	ldr	r0, [pc, #52]	; (801629c <FLASH_WaitForLastOperation+0x54>)
 8016268:	6843      	ldr	r3, [r0, #4]
 801626a:	4313      	orrs	r3, r2
 801626c:	6043      	str	r3, [r0, #4]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 801626e:	2001      	movs	r0, #1
    (*reg_sr) = error;
 8016270:	600a      	str	r2, [r1, #0]
    (*reg_sr) = FLASH_FLAG_EOP;
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 8016272:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8016274:	1c62      	adds	r2, r4, #1
 8016276:	d0ed      	beq.n	8016254 <FLASH_WaitForLastOperation+0xc>
      if(HAL_GetTick() >= timeout)
 8016278:	f7ff fef6 	bl	8016068 <HAL_GetTick>
 801627c:	42a8      	cmp	r0, r5
 801627e:	d3e9      	bcc.n	8016254 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8016280:	2003      	movs	r0, #3
 8016282:	e7f6      	b.n	8016272 <FLASH_WaitForLastOperation+0x2a>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8016284:	6808      	ldr	r0, [r1, #0]
 8016286:	f010 0001 	ands.w	r0, r0, #1
 801628a:	d0f2      	beq.n	8016272 <FLASH_WaitForLastOperation+0x2a>
    (*reg_sr) = FLASH_FLAG_EOP;
 801628c:	2301      	movs	r3, #1
 801628e:	4610      	mov	r0, r2
 8016290:	600b      	str	r3, [r1, #0]
 8016292:	e7ee      	b.n	8016272 <FLASH_WaitForLastOperation+0x2a>
 8016294:	40022000 	.word	0x40022000
 8016298:	40022020 	.word	0x40022020
 801629c:	2000010c 	.word	0x2000010c

080162a0 <HAL_FLASH_Program>:
{
 80162a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80162a4:	4c18      	ldr	r4, [pc, #96]	; (8016308 <HAL_FLASH_Program+0x68>)
{
 80162a6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80162a8:	7823      	ldrb	r3, [r4, #0]
{
 80162aa:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80162ac:	2b01      	cmp	r3, #1
{
 80162ae:	460e      	mov	r6, r1
 80162b0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80162b2:	d027      	beq.n	8016304 <HAL_FLASH_Program+0x64>
 80162b4:	2301      	movs	r3, #1
 80162b6:	7023      	strb	r3, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80162b8:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80162ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80162be:	6063      	str	r3, [r4, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80162c0:	f7ff ffc2 	bl	8016248 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80162c4:	b9d0      	cbnz	r0, 80162fc <HAL_FLASH_Program+0x5c>
    pFlash.ProcedureOnGoing = TypeProgram;
 80162c6:	60a5      	str	r5, [r4, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80162c8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80162cc:	b672      	cpsid	i
  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 80162ce:	4d0f      	ldr	r5, [pc, #60]	; (801630c <HAL_FLASH_Program+0x6c>)
 80162d0:	682b      	ldr	r3, [r5, #0]
 80162d2:	f043 0301 	orr.w	r3, r3, #1
 80162d6:	602b      	str	r3, [r5, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 80162d8:	f8c6 8000 	str.w	r8, [r6]
  __ASM volatile ("isb 0xF":::"memory");
 80162dc:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 80162e0:	6077      	str	r7, [r6, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162e2:	f382 8810 	msr	PRIMASK, r2
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80162e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80162ea:	f7ff ffad 	bl	8016248 <FLASH_WaitForLastOperation>
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 80162ee:	68a2      	ldr	r2, [r4, #8]
 80162f0:	682b      	ldr	r3, [r5, #0]
 80162f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80162f6:	ea23 0302 	bic.w	r3, r3, r2
 80162fa:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(&pFlash);
 80162fc:	2300      	movs	r3, #0
 80162fe:	7023      	strb	r3, [r4, #0]
}
 8016300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(&pFlash);
 8016304:	2002      	movs	r0, #2
 8016306:	e7fb      	b.n	8016300 <HAL_FLASH_Program+0x60>
 8016308:	2000010c 	.word	0x2000010c
 801630c:	40022028 	.word	0x40022028

08016310 <FLASH_MassErase>:
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8016310:	4b0e      	ldr	r3, [pc, #56]	; (801634c <FLASH_MassErase+0x3c>)
 8016312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016314:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8016318:	4b0d      	ldr	r3, [pc, #52]	; (8016350 <FLASH_MassErase+0x40>)
 801631a:	d010      	beq.n	801633e <FLASH_MassErase+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 801631c:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 801631e:	bf42      	ittt	mi
 8016320:	681a      	ldrmi	r2, [r3, #0]
 8016322:	f042 0204 	orrmi.w	r2, r2, #4
 8016326:	601a      	strmi	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8016328:	0782      	lsls	r2, r0, #30
 801632a:	d503      	bpl.n	8016334 <FLASH_MassErase+0x24>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 8016332:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 8016334:	681a      	ldr	r2, [r3, #0]
 8016336:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801633a:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 801633c:	4770      	bx	lr
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 801633e:	681a      	ldr	r2, [r3, #0]
 8016340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016344:	f042 0204 	orr.w	r2, r2, #4
 8016348:	e7f3      	b.n	8016332 <FLASH_MassErase+0x22>
 801634a:	bf00      	nop
 801634c:	40022000 	.word	0x40022000
 8016350:	40022028 	.word	0x40022028

08016354 <FLASH_PageErase>:
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8016354:	4b0e      	ldr	r3, [pc, #56]	; (8016390 <FLASH_PageErase+0x3c>)
 8016356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016358:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 801635c:	4b0d      	ldr	r3, [pc, #52]	; (8016394 <FLASH_PageErase+0x40>)
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 801635e:	681a      	ldr	r2, [r3, #0]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8016360:	d111      	bne.n	8016386 <FLASH_PageErase+0x32>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 8016362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 8016366:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 8016368:	681a      	ldr	r2, [r3, #0]
 801636a:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 801636e:	f022 0202 	bic.w	r2, r2, #2
 8016372:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8016376:	f040 0002 	orr.w	r0, r0, #2
 801637a:	6018      	str	r0, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 801637c:	681a      	ldr	r2, [r3, #0]
 801637e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8016382:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 8016384:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8016386:	07c9      	lsls	r1, r1, #31
 8016388:	d4eb      	bmi.n	8016362 <FLASH_PageErase+0xe>
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 801638a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801638e:	e7ea      	b.n	8016366 <FLASH_PageErase+0x12>
 8016390:	40022000 	.word	0x40022000
 8016394:	40022028 	.word	0x40022028

08016398 <HAL_FLASHEx_Erase>:
{
 8016398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 801639c:	4d23      	ldr	r5, [pc, #140]	; (801642c <HAL_FLASHEx_Erase+0x94>)
{
 801639e:	4606      	mov	r6, r0
  __HAL_LOCK(&pFlash);
 80163a0:	782b      	ldrb	r3, [r5, #0]
{
 80163a2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80163a4:	2b01      	cmp	r3, #1
 80163a6:	d03e      	beq.n	8016426 <HAL_FLASHEx_Erase+0x8e>
 80163a8:	2301      	movs	r3, #1
 80163aa:	702b      	strb	r3, [r5, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80163ac:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80163ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80163b2:	606b      	str	r3, [r5, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80163b4:	f7ff ff48 	bl	8016248 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80163b8:	4604      	mov	r4, r0
 80163ba:	b9b8      	cbnz	r0, 80163ec <HAL_FLASHEx_Erase+0x54>
    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80163bc:	f248 0204 	movw	r2, #32772	; 0x8004
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80163c0:	6833      	ldr	r3, [r6, #0]
 80163c2:	60ab      	str	r3, [r5, #8]
    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80163c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80163c8:	4293      	cmp	r3, r2
 80163ca:	d114      	bne.n	80163f6 <HAL_FLASHEx_Erase+0x5e>
      FLASH_MassErase(pEraseInit->Banks);
 80163cc:	6870      	ldr	r0, [r6, #4]
 80163ce:	f7ff ff9f 	bl	8016310 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80163d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80163d6:	f7ff ff37 	bl	8016248 <FLASH_WaitForLastOperation>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80163da:	4604      	mov	r4, r0
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 80163dc:	4914      	ldr	r1, [pc, #80]	; (8016430 <HAL_FLASHEx_Erase+0x98>)
 80163de:	68aa      	ldr	r2, [r5, #8]
 80163e0:	680b      	ldr	r3, [r1, #0]
 80163e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80163e6:	ea23 0302 	bic.w	r3, r3, r2
 80163ea:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(&pFlash);
 80163ec:	2300      	movs	r3, #0
 80163ee:	702b      	strb	r3, [r5, #0]
}
 80163f0:	4620      	mov	r0, r4
 80163f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *PageError = 0xFFFFFFFFU;
 80163f6:	f04f 33ff 	mov.w	r3, #4294967295
 80163fa:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80163fe:	68b7      	ldr	r7, [r6, #8]
 8016400:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8016404:	4413      	add	r3, r2
 8016406:	42bb      	cmp	r3, r7
 8016408:	d9e8      	bls.n	80163dc <HAL_FLASHEx_Erase+0x44>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801640a:	4638      	mov	r0, r7
 801640c:	6871      	ldr	r1, [r6, #4]
 801640e:	f7ff ffa1 	bl	8016354 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8016412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016416:	f7ff ff17 	bl	8016248 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 801641a:	b110      	cbz	r0, 8016422 <HAL_FLASHEx_Erase+0x8a>
          *PageError = page_index;
 801641c:	f8c8 7000 	str.w	r7, [r8]
 8016420:	e7db      	b.n	80163da <HAL_FLASHEx_Erase+0x42>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8016422:	3701      	adds	r7, #1
 8016424:	e7ec      	b.n	8016400 <HAL_FLASHEx_Erase+0x68>
  __HAL_LOCK(&pFlash);
 8016426:	2402      	movs	r4, #2
 8016428:	e7e2      	b.n	80163f0 <HAL_FLASHEx_Erase+0x58>
 801642a:	bf00      	nop
 801642c:	2000010c 	.word	0x2000010c
 8016430:	40022028 	.word	0x40022028

08016434 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0U;
 8016434:	2300      	movs	r3, #0
{
 8016436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801643a:	4c5f      	ldr	r4, [pc, #380]	; (80165b8 <HAL_GPIO_Init+0x184>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 801643c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80165c0 <HAL_GPIO_Init+0x18c>
 8016440:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80165c4 <HAL_GPIO_Init+0x190>
  while (((GPIO_Init->Pin) >> position) != 0U)
 8016444:	680a      	ldr	r2, [r1, #0]
 8016446:	fa32 f503 	lsrs.w	r5, r2, r3
 801644a:	d101      	bne.n	8016450 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 801644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8016450:	f04f 0c01 	mov.w	ip, #1
 8016454:	fa0c fc03 	lsl.w	ip, ip, r3
    if(iocurrent != 0U)
 8016458:	ea1c 0202 	ands.w	r2, ip, r2
 801645c:	f000 809d 	beq.w	801659a <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8016460:	2603      	movs	r6, #3
 8016462:	684d      	ldr	r5, [r1, #4]
 8016464:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8016468:	f025 0a10 	bic.w	sl, r5, #16
 801646c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8016470:	fa06 f60e 	lsl.w	r6, r6, lr
 8016474:	2f01      	cmp	r7, #1
 8016476:	ea6f 0606 	mvn.w	r6, r6
 801647a:	d811      	bhi.n	80164a0 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 801647c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801647e:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016482:	68cf      	ldr	r7, [r1, #12]
 8016484:	fa07 f70e 	lsl.w	r7, r7, lr
 8016488:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 801648c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 801648e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8016490:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8016494:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8016498:	409f      	lsls	r7, r3
 801649a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 801649e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80164a0:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80164a2:	f1ba 0f02 	cmp.w	sl, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80164a6:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80164aa:	688f      	ldr	r7, [r1, #8]
 80164ac:	fa07 f70e 	lsl.w	r7, r7, lr
 80164b0:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 80164b4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80164b6:	d116      	bne.n	80164e6 <HAL_GPIO_Init+0xb2>
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80164b8:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3U];
 80164bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80164c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80164c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80164c8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80164cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80164d0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80164d4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80164d8:	690f      	ldr	r7, [r1, #16]
 80164da:	fa07 f70b 	lsl.w	r7, r7, fp
 80164de:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80164e2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80164e6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80164e8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80164ea:	f005 0703 	and.w	r7, r5, #3
 80164ee:	fa07 fe0e 	lsl.w	lr, r7, lr
 80164f2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80164f6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80164f8:	00ee      	lsls	r6, r5, #3
 80164fa:	d54e      	bpl.n	801659a <HAL_GPIO_Init+0x166>
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80164fc:	f04f 0c0f 	mov.w	ip, #15
 8016500:	f023 0703 	bic.w	r7, r3, #3
 8016504:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8016508:	f507 373d 	add.w	r7, r7, #193536	; 0x2f400
 801650c:	f003 0e03 	and.w	lr, r3, #3
        temp = EXTI->EXTICR[position >> 2U];
 8016510:	6e3e      	ldr	r6, [r7, #96]	; 0x60
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8016512:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016516:	fa0c fc0e 	lsl.w	ip, ip, lr
 801651a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 801651e:	4e27      	ldr	r6, [pc, #156]	; (80165bc <HAL_GPIO_Init+0x188>)
 8016520:	42b0      	cmp	r0, r6
 8016522:	d03c      	beq.n	801659e <HAL_GPIO_Init+0x16a>
 8016524:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8016528:	42b0      	cmp	r0, r6
 801652a:	d03a      	beq.n	80165a2 <HAL_GPIO_Init+0x16e>
 801652c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8016530:	42b0      	cmp	r0, r6
 8016532:	d038      	beq.n	80165a6 <HAL_GPIO_Init+0x172>
 8016534:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8016538:	42b0      	cmp	r0, r6
 801653a:	d036      	beq.n	80165aa <HAL_GPIO_Init+0x176>
 801653c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8016540:	42b0      	cmp	r0, r6
 8016542:	d034      	beq.n	80165ae <HAL_GPIO_Init+0x17a>
 8016544:	4540      	cmp	r0, r8
 8016546:	d034      	beq.n	80165b2 <HAL_GPIO_Init+0x17e>
 8016548:	4548      	cmp	r0, r9
 801654a:	bf0c      	ite	eq
 801654c:	2606      	moveq	r6, #6
 801654e:	2607      	movne	r6, #7
 8016550:	fa06 f60e 	lsl.w	r6, r6, lr
 8016554:	ea46 060c 	orr.w	r6, r6, ip
        EXTI->EXTICR[position >> 2U] = temp;
 8016558:	663e      	str	r6, [r7, #96]	; 0x60
        temp &= ~(iocurrent);
 801655a:	43d7      	mvns	r7, r2
        temp = EXTI->IMR1;
 801655c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8016560:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8016564:	bf0c      	ite	eq
 8016566:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8016568:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 801656a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 801656e:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8016572:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8016576:	bf0c      	ite	eq
 8016578:	403e      	andeq	r6, r7
          temp |= iocurrent;
 801657a:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 801657c:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        temp = EXTI->RTSR1;
 8016580:	6826      	ldr	r6, [r4, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8016582:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8016586:	bf0c      	ite	eq
 8016588:	403e      	andeq	r6, r7
          temp |= iocurrent;
 801658a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 801658c:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 801658e:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8016590:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8016592:	bf54      	ite	pl
 8016594:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8016596:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8016598:	6066      	str	r6, [r4, #4]
    position++;
 801659a:	3301      	adds	r3, #1
 801659c:	e752      	b.n	8016444 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 801659e:	2600      	movs	r6, #0
 80165a0:	e7d6      	b.n	8016550 <HAL_GPIO_Init+0x11c>
 80165a2:	2601      	movs	r6, #1
 80165a4:	e7d4      	b.n	8016550 <HAL_GPIO_Init+0x11c>
 80165a6:	2602      	movs	r6, #2
 80165a8:	e7d2      	b.n	8016550 <HAL_GPIO_Init+0x11c>
 80165aa:	2603      	movs	r6, #3
 80165ac:	e7d0      	b.n	8016550 <HAL_GPIO_Init+0x11c>
 80165ae:	2604      	movs	r6, #4
 80165b0:	e7ce      	b.n	8016550 <HAL_GPIO_Init+0x11c>
 80165b2:	2605      	movs	r6, #5
 80165b4:	e7cc      	b.n	8016550 <HAL_GPIO_Init+0x11c>
 80165b6:	bf00      	nop
 80165b8:	4002f400 	.word	0x4002f400
 80165bc:	42020000 	.word	0x42020000
 80165c0:	42021400 	.word	0x42021400
 80165c4:	42021800 	.word	0x42021800

080165c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80165c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ca:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80165cc:	6921      	ldr	r1, [r4, #16]
 80165ce:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80165d0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80165d2:	430a      	orrs	r2, r1
 80165d4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80165d6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80165d8:	69c0      	ldr	r0, [r0, #28]
 80165da:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80165dc:	49a1      	ldr	r1, [pc, #644]	; (8016864 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80165de:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80165e0:	4029      	ands	r1, r5
 80165e2:	430a      	orrs	r2, r1
 80165e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80165e6:	685a      	ldr	r2, [r3, #4]
 80165e8:	68e1      	ldr	r1, [r4, #12]
 80165ea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80165ee:	430a      	orrs	r2, r1
 80165f0:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80165f2:	4a9d      	ldr	r2, [pc, #628]	; (8016868 <UART_SetConfig+0x2a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80165f4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80165f6:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 80165f8:	bf1c      	itt	ne
 80165fa:	6a22      	ldrne	r2, [r4, #32]
 80165fc:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80165fe:	689a      	ldr	r2, [r3, #8]
 8016600:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8016604:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8016608:	430a      	orrs	r2, r1
 801660a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801660c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801660e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016610:	f022 020f 	bic.w	r2, r2, #15
 8016614:	430a      	orrs	r2, r1
 8016616:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016618:	4a94      	ldr	r2, [pc, #592]	; (801686c <UART_SetConfig+0x2a4>)
 801661a:	4293      	cmp	r3, r2
 801661c:	d11b      	bne.n	8016656 <UART_SetConfig+0x8e>
 801661e:	4b94      	ldr	r3, [pc, #592]	; (8016870 <UART_SetConfig+0x2a8>)
 8016620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016624:	f003 0303 	and.w	r3, r3, #3
 8016628:	3b01      	subs	r3, #1
 801662a:	2b02      	cmp	r3, #2
 801662c:	f200 80ea 	bhi.w	8016804 <UART_SetConfig+0x23c>
 8016630:	4a90      	ldr	r2, [pc, #576]	; (8016874 <UART_SetConfig+0x2ac>)
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016632:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016636:	5cd3      	ldrb	r3, [r2, r3]
 8016638:	f040 80ab 	bne.w	8016792 <UART_SetConfig+0x1ca>
  {
    switch (clocksource)
 801663c:	2b08      	cmp	r3, #8
 801663e:	d826      	bhi.n	801668e <UART_SetConfig+0xc6>
 8016640:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016644:	00e300ef 	.word	0x00e300ef
 8016648:	002500a5 	.word	0x002500a5
 801664c:	002500e9 	.word	0x002500e9
 8016650:	00250025 	.word	0x00250025
 8016654:	00f3      	.short	0x00f3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016656:	4a88      	ldr	r2, [pc, #544]	; (8016878 <UART_SetConfig+0x2b0>)
 8016658:	4293      	cmp	r3, r2
 801665a:	d106      	bne.n	801666a <UART_SetConfig+0xa2>
 801665c:	4b84      	ldr	r3, [pc, #528]	; (8016870 <UART_SetConfig+0x2a8>)
 801665e:	4a87      	ldr	r2, [pc, #540]	; (801687c <UART_SetConfig+0x2b4>)
 8016660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016664:	f003 030c 	and.w	r3, r3, #12
 8016668:	e7e3      	b.n	8016632 <UART_SetConfig+0x6a>
 801666a:	4a85      	ldr	r2, [pc, #532]	; (8016880 <UART_SetConfig+0x2b8>)
 801666c:	4293      	cmp	r3, r2
 801666e:	d119      	bne.n	80166a4 <UART_SetConfig+0xdc>
 8016670:	4b7f      	ldr	r3, [pc, #508]	; (8016870 <UART_SetConfig+0x2a8>)
 8016672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016676:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801667a:	2b20      	cmp	r3, #32
 801667c:	f000 80bd 	beq.w	80167fa <UART_SetConfig+0x232>
 8016680:	d807      	bhi.n	8016692 <UART_SetConfig+0xca>
 8016682:	2b00      	cmp	r3, #0
 8016684:	f000 80ca 	beq.w	801681c <UART_SetConfig+0x254>
 8016688:	2b10      	cmp	r3, #16
 801668a:	f000 80c1 	beq.w	8016810 <UART_SetConfig+0x248>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801668e:	2001      	movs	r0, #1
 8016690:	e04e      	b.n	8016730 <UART_SetConfig+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016692:	2b30      	cmp	r3, #48	; 0x30
 8016694:	d1fb      	bne.n	801668e <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016696:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801669a:	f000 80c6 	beq.w	801682a <UART_SetConfig+0x262>
 801669e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80166a2:	e093      	b.n	80167cc <UART_SetConfig+0x204>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80166a4:	4a77      	ldr	r2, [pc, #476]	; (8016884 <UART_SetConfig+0x2bc>)
 80166a6:	4293      	cmp	r3, r2
 80166a8:	d10f      	bne.n	80166ca <UART_SetConfig+0x102>
 80166aa:	4b71      	ldr	r3, [pc, #452]	; (8016870 <UART_SetConfig+0x2a8>)
 80166ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80166b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80166b4:	2b80      	cmp	r3, #128	; 0x80
 80166b6:	f000 80a0 	beq.w	80167fa <UART_SetConfig+0x232>
 80166ba:	d804      	bhi.n	80166c6 <UART_SetConfig+0xfe>
 80166bc:	2b00      	cmp	r3, #0
 80166be:	f000 80ad 	beq.w	801681c <UART_SetConfig+0x254>
 80166c2:	2b40      	cmp	r3, #64	; 0x40
 80166c4:	e7e1      	b.n	801668a <UART_SetConfig+0xc2>
 80166c6:	2bc0      	cmp	r3, #192	; 0xc0
 80166c8:	e7e4      	b.n	8016694 <UART_SetConfig+0xcc>
 80166ca:	4a6f      	ldr	r2, [pc, #444]	; (8016888 <UART_SetConfig+0x2c0>)
 80166cc:	4293      	cmp	r3, r2
 80166ce:	d112      	bne.n	80166f6 <UART_SetConfig+0x12e>
 80166d0:	4b67      	ldr	r3, [pc, #412]	; (8016870 <UART_SetConfig+0x2a8>)
 80166d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80166d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80166da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166de:	f000 808c 	beq.w	80167fa <UART_SetConfig+0x232>
 80166e2:	d805      	bhi.n	80166f0 <UART_SetConfig+0x128>
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	f000 8099 	beq.w	801681c <UART_SetConfig+0x254>
 80166ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166ee:	e7cc      	b.n	801668a <UART_SetConfig+0xc2>
 80166f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80166f4:	e7ce      	b.n	8016694 <UART_SetConfig+0xcc>
 80166f6:	4a5c      	ldr	r2, [pc, #368]	; (8016868 <UART_SetConfig+0x2a0>)
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d1c8      	bne.n	801668e <UART_SetConfig+0xc6>
 80166fc:	4b5c      	ldr	r3, [pc, #368]	; (8016870 <UART_SetConfig+0x2a8>)
 80166fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016702:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801670a:	d018      	beq.n	801673e <UART_SetConfig+0x176>
 801670c:	d806      	bhi.n	801671c <UART_SetConfig+0x154>
 801670e:	b15b      	cbz	r3, 8016728 <UART_SetConfig+0x160>
 8016710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016714:	d1bb      	bne.n	801668e <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 8016716:	f000 faa1 	bl	8016c5c <HAL_RCC_GetSysClockFreq>
        break;
 801671a:	e007      	b.n	801672c <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801671c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016720:	d1b5      	bne.n	801668e <UART_SetConfig+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 8016722:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8016726:	e00b      	b.n	8016740 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8016728:	f000 faf6 	bl	8016d18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 801672c:	b940      	cbnz	r0, 8016740 <UART_SetConfig+0x178>
 801672e:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8016730:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8016734:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016736:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8016738:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 801673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 801673e:	4853      	ldr	r0, [pc, #332]	; (801688c <UART_SetConfig+0x2c4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016740:	4b53      	ldr	r3, [pc, #332]	; (8016890 <UART_SetConfig+0x2c8>)
 8016742:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016744:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016746:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801674a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801674e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016752:	4299      	cmp	r1, r3
 8016754:	d89b      	bhi.n	801668e <UART_SetConfig+0xc6>
 8016756:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 801675a:	d898      	bhi.n	801668e <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801675c:	2300      	movs	r3, #0
 801675e:	2100      	movs	r1, #0
 8016760:	f7fe ff6a 	bl	8015638 <__aeabi_uldivmod>
 8016764:	020f      	lsls	r7, r1, #8
 8016766:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 801676a:	0206      	lsls	r6, r0, #8
 801676c:	0868      	lsrs	r0, r5, #1
 801676e:	1830      	adds	r0, r6, r0
 8016770:	462a      	mov	r2, r5
 8016772:	f04f 0300 	mov.w	r3, #0
 8016776:	f147 0100 	adc.w	r1, r7, #0
 801677a:	f7fe ff5d 	bl	8015638 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801677e:	4b45      	ldr	r3, [pc, #276]	; (8016894 <UART_SetConfig+0x2cc>)
 8016780:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8016784:	429a      	cmp	r2, r3
 8016786:	d882      	bhi.n	801668e <UART_SetConfig+0xc6>
          huart->Instance->BRR = usartdiv;
 8016788:	6823      	ldr	r3, [r4, #0]
 801678a:	60d8      	str	r0, [r3, #12]
 801678c:	e7cf      	b.n	801672e <UART_SetConfig+0x166>
        pclk = (uint32_t) HSI_VALUE;
 801678e:	483f      	ldr	r0, [pc, #252]	; (801688c <UART_SetConfig+0x2c4>)
 8016790:	e04b      	b.n	801682a <UART_SetConfig+0x262>
    switch (clocksource)
 8016792:	2b08      	cmp	r3, #8
 8016794:	f63f af7b 	bhi.w	801668e <UART_SetConfig+0xc6>
 8016798:	a201      	add	r2, pc, #4	; (adr r2, 80167a0 <UART_SetConfig+0x1d8>)
 801679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801679e:	bf00      	nop
 80167a0:	080167c5 	.word	0x080167c5
 80167a4:	080167ef 	.word	0x080167ef
 80167a8:	08016801 	.word	0x08016801
 80167ac:	0801668f 	.word	0x0801668f
 80167b0:	080167f5 	.word	0x080167f5
 80167b4:	0801668f 	.word	0x0801668f
 80167b8:	0801668f 	.word	0x0801668f
 80167bc:	0801668f 	.word	0x0801668f
 80167c0:	0801669f 	.word	0x0801669f
        pclk = HAL_RCC_GetPCLK1Freq();
 80167c4:	f000 faa8 	bl	8016d18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80167c8:	2800      	cmp	r0, #0
 80167ca:	d0b0      	beq.n	801672e <UART_SetConfig+0x166>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80167cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80167ce:	4a30      	ldr	r2, [pc, #192]	; (8016890 <UART_SetConfig+0x2c8>)
 80167d0:	6863      	ldr	r3, [r4, #4]
 80167d2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80167d6:	fbb0 f0f2 	udiv	r0, r0, r2
 80167da:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80167de:	fbb0 f0f3 	udiv	r0, r0, r3
 80167e2:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80167e4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80167e8:	f1a0 0210 	sub.w	r2, r0, #16
 80167ec:	e7ca      	b.n	8016784 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80167ee:	f000 faa3 	bl	8016d38 <HAL_RCC_GetPCLK2Freq>
        break;
 80167f2:	e7e9      	b.n	80167c8 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetSysClockFreq();
 80167f4:	f000 fa32 	bl	8016c5c <HAL_RCC_GetSysClockFreq>
        break;
 80167f8:	e7e6      	b.n	80167c8 <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80167fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80167fe:	d0c6      	beq.n	801678e <UART_SetConfig+0x1c6>
        pclk = (uint32_t) HSI_VALUE;
 8016800:	4822      	ldr	r0, [pc, #136]	; (801688c <UART_SetConfig+0x2c4>)
 8016802:	e7e3      	b.n	80167cc <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016804:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016808:	d1f1      	bne.n	80167ee <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetPCLK2Freq();
 801680a:	f000 fa95 	bl	8016d38 <HAL_RCC_GetPCLK2Freq>
        break;
 801680e:	e00a      	b.n	8016826 <UART_SetConfig+0x25e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016810:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016814:	d1ee      	bne.n	80167f4 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 8016816:	f000 fa21 	bl	8016c5c <HAL_RCC_GetSysClockFreq>
        break;
 801681a:	e004      	b.n	8016826 <UART_SetConfig+0x25e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801681c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016820:	d1d0      	bne.n	80167c4 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8016822:	f000 fa79 	bl	8016d18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8016826:	2800      	cmp	r0, #0
 8016828:	d081      	beq.n	801672e <UART_SetConfig+0x166>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801682a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801682c:	4b18      	ldr	r3, [pc, #96]	; (8016890 <UART_SetConfig+0x2c8>)
 801682e:	6862      	ldr	r2, [r4, #4]
 8016830:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8016834:	fbb0 f3f3 	udiv	r3, r0, r3
 8016838:	0850      	lsrs	r0, r2, #1
 801683a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801683e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016842:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8016846:	b283      	uxth	r3, r0
 8016848:	f1a3 0110 	sub.w	r1, r3, #16
 801684c:	4291      	cmp	r1, r2
 801684e:	f63f af1e 	bhi.w	801668e <UART_SetConfig+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016852:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8016856:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016858:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801685a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 801685e:	4318      	orrs	r0, r3
 8016860:	60d0      	str	r0, [r2, #12]
 8016862:	e764      	b.n	801672e <UART_SetConfig+0x166>
 8016864:	cfff69f3 	.word	0xcfff69f3
 8016868:	40008000 	.word	0x40008000
 801686c:	40013800 	.word	0x40013800
 8016870:	40021000 	.word	0x40021000
 8016874:	08018564 	.word	0x08018564
 8016878:	40004400 	.word	0x40004400
 801687c:	08018567 	.word	0x08018567
 8016880:	40004800 	.word	0x40004800
 8016884:	40004c00 	.word	0x40004c00
 8016888:	40005000 	.word	0x40005000
 801688c:	00f42400 	.word	0x00f42400
 8016890:	08018574 	.word	0x08018574
 8016894:	000ffcff 	.word	0x000ffcff

08016898 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016898:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 801689a:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801689c:	07da      	lsls	r2, r3, #31
 801689e:	d506      	bpl.n	80168ae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80168a0:	6801      	ldr	r1, [r0, #0]
 80168a2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80168a4:	684a      	ldr	r2, [r1, #4]
 80168a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80168aa:	4322      	orrs	r2, r4
 80168ac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80168ae:	079c      	lsls	r4, r3, #30
 80168b0:	d506      	bpl.n	80168c0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80168b2:	6801      	ldr	r1, [r0, #0]
 80168b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80168b6:	684a      	ldr	r2, [r1, #4]
 80168b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80168bc:	4322      	orrs	r2, r4
 80168be:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80168c0:	0759      	lsls	r1, r3, #29
 80168c2:	d506      	bpl.n	80168d2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80168c4:	6801      	ldr	r1, [r0, #0]
 80168c6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80168c8:	684a      	ldr	r2, [r1, #4]
 80168ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80168ce:	4322      	orrs	r2, r4
 80168d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80168d2:	071a      	lsls	r2, r3, #28
 80168d4:	d506      	bpl.n	80168e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80168d6:	6801      	ldr	r1, [r0, #0]
 80168d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80168da:	684a      	ldr	r2, [r1, #4]
 80168dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80168e0:	4322      	orrs	r2, r4
 80168e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80168e4:	06dc      	lsls	r4, r3, #27
 80168e6:	d506      	bpl.n	80168f6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80168e8:	6801      	ldr	r1, [r0, #0]
 80168ea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80168ec:	688a      	ldr	r2, [r1, #8]
 80168ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80168f2:	4322      	orrs	r2, r4
 80168f4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80168f6:	0699      	lsls	r1, r3, #26
 80168f8:	d506      	bpl.n	8016908 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80168fa:	6801      	ldr	r1, [r0, #0]
 80168fc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80168fe:	688a      	ldr	r2, [r1, #8]
 8016900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016904:	4322      	orrs	r2, r4
 8016906:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016908:	065a      	lsls	r2, r3, #25
 801690a:	d510      	bpl.n	801692e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801690c:	6801      	ldr	r1, [r0, #0]
 801690e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8016910:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016912:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016916:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 801691a:	ea42 0204 	orr.w	r2, r2, r4
 801691e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016920:	d105      	bne.n	801692e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016922:	684a      	ldr	r2, [r1, #4]
 8016924:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8016926:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 801692a:	4322      	orrs	r2, r4
 801692c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801692e:	061b      	lsls	r3, r3, #24
 8016930:	d506      	bpl.n	8016940 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016932:	6802      	ldr	r2, [r0, #0]
 8016934:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8016936:	6853      	ldr	r3, [r2, #4]
 8016938:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801693c:	430b      	orrs	r3, r1
 801693e:	6053      	str	r3, [r2, #4]
  }
}
 8016940:	bd10      	pop	{r4, pc}

08016942 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016946:	4604      	mov	r4, r0
 8016948:	460e      	mov	r6, r1
 801694a:	4615      	mov	r5, r2
 801694c:	461f      	mov	r7, r3
 801694e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016952:	6822      	ldr	r2, [r4, #0]
 8016954:	69d3      	ldr	r3, [r2, #28]
 8016956:	ea36 0303 	bics.w	r3, r6, r3
 801695a:	bf0c      	ite	eq
 801695c:	2301      	moveq	r3, #1
 801695e:	2300      	movne	r3, #0
 8016960:	42ab      	cmp	r3, r5
 8016962:	d001      	beq.n	8016968 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8016964:	2000      	movs	r0, #0
 8016966:	e01c      	b.n	80169a2 <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8016968:	f1b8 3fff 	cmp.w	r8, #4294967295
 801696c:	d0f2      	beq.n	8016954 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801696e:	f7ff fb7b 	bl	8016068 <HAL_GetTick>
 8016972:	1bc0      	subs	r0, r0, r7
 8016974:	4540      	cmp	r0, r8
 8016976:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8016978:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801697a:	d802      	bhi.n	8016982 <UART_WaitOnFlagUntilTimeout+0x40>
 801697c:	f1b8 0f00 	cmp.w	r8, #0
 8016980:	d111      	bne.n	80169a6 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8016982:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016986:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016988:	6883      	ldr	r3, [r0, #8]
 801698a:	f023 0301 	bic.w	r3, r3, #1
 801698e:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8016990:	2320      	movs	r3, #32
 8016992:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8016996:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 801699a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 801699c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 801699e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80169a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80169a6:	075a      	lsls	r2, r3, #29
 80169a8:	d5d3      	bpl.n	8016952 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80169aa:	69c3      	ldr	r3, [r0, #28]
 80169ac:	051b      	lsls	r3, r3, #20
 80169ae:	d5d0      	bpl.n	8016952 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80169b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80169b4:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80169b6:	6803      	ldr	r3, [r0, #0]
 80169b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80169bc:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80169be:	6883      	ldr	r3, [r0, #8]
 80169c0:	f023 0301 	bic.w	r3, r3, #1
 80169c4:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80169c6:	2320      	movs	r3, #32
 80169c8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80169cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80169d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80169d4:	e7e1      	b.n	801699a <UART_WaitOnFlagUntilTimeout+0x58>

080169d6 <HAL_UART_Transmit>:
{
 80169d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80169da:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80169dc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80169e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80169e2:	2b20      	cmp	r3, #32
{
 80169e4:	460e      	mov	r6, r1
 80169e6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80169e8:	d150      	bne.n	8016a8c <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 80169ea:	2900      	cmp	r1, #0
 80169ec:	d04c      	beq.n	8016a88 <HAL_UART_Transmit+0xb2>
 80169ee:	2a00      	cmp	r2, #0
 80169f0:	d04a      	beq.n	8016a88 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80169f2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d048      	beq.n	8016a8c <HAL_UART_Transmit+0xb6>
 80169fa:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80169fc:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80169fe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016a02:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016a04:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016a08:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8016a0c:	f7ff fb2c 	bl	8016068 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016a10:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8016a12:	4603      	mov	r3, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016a14:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8016a18:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8016a1c:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016a20:	d103      	bne.n	8016a2a <HAL_UART_Transmit+0x54>
 8016a22:	6922      	ldr	r2, [r4, #16]
 8016a24:	b90a      	cbnz	r2, 8016a2a <HAL_UART_Transmit+0x54>
 8016a26:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8016a28:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8016a30:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016a34:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8016a38:	b292      	uxth	r2, r2
 8016a3a:	b942      	cbnz	r2, 8016a4e <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016a3c:	2140      	movs	r1, #64	; 0x40
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f7ff ff7f 	bl	8016942 <UART_WaitOnFlagUntilTimeout>
 8016a44:	b958      	cbnz	r0, 8016a5e <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8016a46:	2320      	movs	r3, #32
 8016a48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8016a4c:	e008      	b.n	8016a60 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016a4e:	2200      	movs	r2, #0
 8016a50:	2180      	movs	r1, #128	; 0x80
 8016a52:	4620      	mov	r0, r4
 8016a54:	9303      	str	r3, [sp, #12]
 8016a56:	f7ff ff74 	bl	8016942 <UART_WaitOnFlagUntilTimeout>
 8016a5a:	9b03      	ldr	r3, [sp, #12]
 8016a5c:	b118      	cbz	r0, 8016a66 <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 8016a5e:	2003      	movs	r0, #3
}
 8016a60:	b004      	add	sp, #16
 8016a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 8016a66:	6821      	ldr	r1, [r4, #0]
 8016a68:	b95e      	cbnz	r6, 8016a82 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016a6a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8016a6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016a72:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8016a74:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8016a78:	3a01      	subs	r2, #1
 8016a7a:	b292      	uxth	r2, r2
 8016a7c:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8016a80:	e7d6      	b.n	8016a30 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016a82:	f816 2b01 	ldrb.w	r2, [r6], #1
 8016a86:	e7f4      	b.n	8016a72 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 8016a88:	2001      	movs	r0, #1
 8016a8a:	e7e9      	b.n	8016a60 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8016a8c:	2002      	movs	r0, #2
 8016a8e:	e7e7      	b.n	8016a60 <HAL_UART_Transmit+0x8a>

08016a90 <HAL_UART_Receive>:
{
 8016a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a94:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8016a96:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8016a9a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8016a9c:	2b20      	cmp	r3, #32
{
 8016a9e:	460d      	mov	r5, r1
 8016aa0:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8016aa2:	d16a      	bne.n	8016b7a <HAL_UART_Receive+0xea>
    if ((pData == NULL) || (Size == 0U))
 8016aa4:	2900      	cmp	r1, #0
 8016aa6:	d066      	beq.n	8016b76 <HAL_UART_Receive+0xe6>
 8016aa8:	2a00      	cmp	r2, #0
 8016aaa:	d064      	beq.n	8016b76 <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 8016aac:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d062      	beq.n	8016b7a <HAL_UART_Receive+0xea>
 8016ab4:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ab6:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8016aba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016abe:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ac0:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016ac4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ac8:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 8016acc:	f7ff facc 	bl	8016068 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8016ad0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8016ad2:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 8016ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8016ad8:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    huart->RxXferCount = Size;
 8016adc:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8016ae0:	d11d      	bne.n	8016b1e <HAL_UART_Receive+0x8e>
 8016ae2:	6922      	ldr	r2, [r4, #16]
 8016ae4:	b9ca      	cbnz	r2, 8016b1a <HAL_UART_Receive+0x8a>
 8016ae6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8016aea:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8016af2:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016af6:	d123      	bne.n	8016b40 <HAL_UART_Receive+0xb0>
 8016af8:	6923      	ldr	r3, [r4, #16]
 8016afa:	bb0b      	cbnz	r3, 8016b40 <HAL_UART_Receive+0xb0>
 8016afc:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8016afe:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8016b00:	2300      	movs	r3, #0
 8016b02:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8016b06:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8016b0a:	b290      	uxth	r0, r2
 8016b0c:	b9d0      	cbnz	r0, 8016b44 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 8016b0e:	2320      	movs	r3, #32
 8016b10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8016b14:	b003      	add	sp, #12
 8016b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8016b1a:	22ff      	movs	r2, #255	; 0xff
 8016b1c:	e7e5      	b.n	8016aea <HAL_UART_Receive+0x5a>
 8016b1e:	b923      	cbnz	r3, 8016b2a <HAL_UART_Receive+0x9a>
 8016b20:	6922      	ldr	r2, [r4, #16]
 8016b22:	2a00      	cmp	r2, #0
 8016b24:	d0f9      	beq.n	8016b1a <HAL_UART_Receive+0x8a>
 8016b26:	227f      	movs	r2, #127	; 0x7f
 8016b28:	e7df      	b.n	8016aea <HAL_UART_Receive+0x5a>
 8016b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016b2e:	d104      	bne.n	8016b3a <HAL_UART_Receive+0xaa>
 8016b30:	6922      	ldr	r2, [r4, #16]
 8016b32:	2a00      	cmp	r2, #0
 8016b34:	d0f7      	beq.n	8016b26 <HAL_UART_Receive+0x96>
 8016b36:	223f      	movs	r2, #63	; 0x3f
 8016b38:	e7d7      	b.n	8016aea <HAL_UART_Receive+0x5a>
 8016b3a:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8016b3e:	e7d6      	b.n	8016aee <HAL_UART_Receive+0x5e>
      pdata16bits = NULL;
 8016b40:	2600      	movs	r6, #0
 8016b42:	e7dd      	b.n	8016b00 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8016b44:	464b      	mov	r3, r9
 8016b46:	2200      	movs	r2, #0
 8016b48:	2120      	movs	r1, #32
 8016b4a:	4620      	mov	r0, r4
 8016b4c:	9700      	str	r7, [sp, #0]
 8016b4e:	f7ff fef8 	bl	8016942 <UART_WaitOnFlagUntilTimeout>
 8016b52:	b9a0      	cbnz	r0, 8016b7e <HAL_UART_Receive+0xee>
      if (pdata8bits == NULL)
 8016b54:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8016b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b58:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 8016b5c:	b945      	cbnz	r5, 8016b70 <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8016b5e:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8016b62:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8016b66:	3a01      	subs	r2, #1
 8016b68:	b292      	uxth	r2, r2
 8016b6a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8016b6e:	e7ca      	b.n	8016b06 <HAL_UART_Receive+0x76>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8016b70:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8016b74:	e7f5      	b.n	8016b62 <HAL_UART_Receive+0xd2>
      return  HAL_ERROR;
 8016b76:	2001      	movs	r0, #1
 8016b78:	e7cc      	b.n	8016b14 <HAL_UART_Receive+0x84>
    return HAL_BUSY;
 8016b7a:	2002      	movs	r0, #2
 8016b7c:	e7ca      	b.n	8016b14 <HAL_UART_Receive+0x84>
        return HAL_TIMEOUT;
 8016b7e:	2003      	movs	r0, #3
 8016b80:	e7c8      	b.n	8016b14 <HAL_UART_Receive+0x84>

08016b82 <UART_CheckIdleState>:
{
 8016b82:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b84:	2500      	movs	r5, #0
{
 8016b86:	4604      	mov	r4, r0
 8016b88:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b8a:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8016b8e:	f7ff fa6b 	bl	8016068 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016b92:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8016b94:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016b96:	6812      	ldr	r2, [r2, #0]
 8016b98:	0711      	lsls	r1, r2, #28
 8016b9a:	d417      	bmi.n	8016bcc <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016b9c:	6822      	ldr	r2, [r4, #0]
 8016b9e:	6812      	ldr	r2, [r2, #0]
 8016ba0:	0752      	lsls	r2, r2, #29
 8016ba2:	d509      	bpl.n	8016bb8 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016ba4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8016ba8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016bac:	9200      	str	r2, [sp, #0]
 8016bae:	4620      	mov	r0, r4
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	f7ff fec6 	bl	8016942 <UART_WaitOnFlagUntilTimeout>
 8016bb6:	b9b0      	cbnz	r0, 8016be6 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8016bb8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016bba:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8016bbc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8016bc0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8016bc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016bc8:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8016bca:	e00d      	b.n	8016be8 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016bcc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8016bd0:	9003      	str	r0, [sp, #12]
 8016bd2:	9200      	str	r2, [sp, #0]
 8016bd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016bd8:	462a      	mov	r2, r5
 8016bda:	4620      	mov	r0, r4
 8016bdc:	f7ff feb1 	bl	8016942 <UART_WaitOnFlagUntilTimeout>
 8016be0:	9b03      	ldr	r3, [sp, #12]
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d0da      	beq.n	8016b9c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8016be6:	2003      	movs	r0, #3
}
 8016be8:	b005      	add	sp, #20
 8016bea:	bd30      	pop	{r4, r5, pc}

08016bec <HAL_UART_Init>:
{
 8016bec:	b510      	push	{r4, lr}
  if (huart == NULL)
 8016bee:	4604      	mov	r4, r0
 8016bf0:	b350      	cbz	r0, 8016c48 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8016bf2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016bf6:	b91b      	cbnz	r3, 8016c00 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8016bf8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8016bfc:	f7fe fefc 	bl	80159f8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8016c00:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8016c02:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8016c04:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8016c08:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016c0a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8016c0c:	f023 0301 	bic.w	r3, r3, #1
 8016c10:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016c12:	f7ff fcd9 	bl	80165c8 <UART_SetConfig>
 8016c16:	2801      	cmp	r0, #1
 8016c18:	d016      	beq.n	8016c48 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016c1c:	b113      	cbz	r3, 8016c24 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8016c1e:	4620      	mov	r0, r4
 8016c20:	f7ff fe3a 	bl	8016898 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016c24:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8016c26:	4620      	mov	r0, r4
}
 8016c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016c2c:	685a      	ldr	r2, [r3, #4]
 8016c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016c34:	689a      	ldr	r2, [r3, #8]
 8016c36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016c3a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8016c3c:	681a      	ldr	r2, [r3, #0]
 8016c3e:	f042 0201 	orr.w	r2, r2, #1
 8016c42:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8016c44:	f7ff bf9d 	b.w	8016b82 <UART_CheckIdleState>
}
 8016c48:	2001      	movs	r0, #1
 8016c4a:	bd10      	pop	{r4, pc}

08016c4c <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8016c4c:	4a02      	ldr	r2, [pc, #8]	; (8016c58 <HAL_PWREx_EnableVddIO2+0xc>)
 8016c4e:	6853      	ldr	r3, [r2, #4]
 8016c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016c54:	6053      	str	r3, [r2, #4]
}
 8016c56:	4770      	bx	lr
 8016c58:	40007000 	.word	0x40007000

08016c5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016c5c:	4b23      	ldr	r3, [pc, #140]	; (8016cec <HAL_RCC_GetSysClockFreq+0x90>)
 8016c5e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016c60:	68d9      	ldr	r1, [r3, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016c62:	f012 020c 	ands.w	r2, r2, #12
 8016c66:	d005      	beq.n	8016c74 <HAL_RCC_GetSysClockFreq+0x18>
 8016c68:	2a0c      	cmp	r2, #12
 8016c6a:	d115      	bne.n	8016c98 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016c6c:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8016c70:	2901      	cmp	r1, #1
 8016c72:	d118      	bne.n	8016ca6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8016c74:	6819      	ldr	r1, [r3, #0]
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8016c76:	481e      	ldr	r0, [pc, #120]	; (8016cf0 <HAL_RCC_GetSysClockFreq+0x94>)
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8016c78:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8016c7a:	bf55      	itete	pl
 8016c7c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8016c80:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8016c82:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8016c86:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8016c8a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016c8e:	b112      	cbz	r2, 8016c96 <HAL_RCC_GetSysClockFreq+0x3a>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016c90:	2a0c      	cmp	r2, #12
 8016c92:	d009      	beq.n	8016ca8 <HAL_RCC_GetSysClockFreq+0x4c>
 8016c94:	2000      	movs	r0, #0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
}
 8016c96:	4770      	bx	lr
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8016c98:	2a04      	cmp	r2, #4
 8016c9a:	d024      	beq.n	8016ce6 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8016c9c:	2a08      	cmp	r2, #8
 8016c9e:	4815      	ldr	r0, [pc, #84]	; (8016cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8016ca0:	bf18      	it	ne
 8016ca2:	2000      	movne	r0, #0
 8016ca4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8016ca6:	2000      	movs	r0, #0
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8016ca8:	68d9      	ldr	r1, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8016caa:	68da      	ldr	r2, [r3, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8016cac:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8016cb0:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8016cb4:	2902      	cmp	r1, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8016cb6:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8016cba:	d005      	beq.n	8016cc8 <HAL_RCC_GetSysClockFreq+0x6c>
 8016cbc:	2903      	cmp	r1, #3
 8016cbe:	d003      	beq.n	8016cc8 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8016cc0:	68d9      	ldr	r1, [r3, #12]
 8016cc2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8016cc6:	e003      	b.n	8016cd0 <HAL_RCC_GetSysClockFreq+0x74>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8016cc8:	68d9      	ldr	r1, [r3, #12]
 8016cca:	480a      	ldr	r0, [pc, #40]	; (8016cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8016ccc:	f3c1 2106 	ubfx	r1, r1, #8, #7
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8016cd0:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8016cd4:	68db      	ldr	r3, [r3, #12]
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8016cd6:	4348      	muls	r0, r1
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8016cd8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8016cdc:	3301      	adds	r3, #1
 8016cde:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8016ce0:	fbb0 f0f3 	udiv	r0, r0, r3
 8016ce4:	4770      	bx	lr
 8016ce6:	4803      	ldr	r0, [pc, #12]	; (8016cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8016ce8:	4770      	bx	lr
 8016cea:	bf00      	nop
 8016cec:	40021000 	.word	0x40021000
 8016cf0:	08018524 	.word	0x08018524
 8016cf4:	00f42400 	.word	0x00f42400

08016cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016cf8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8016cfa:	f7ff ffaf 	bl	8016c5c <HAL_RCC_GetSysClockFreq>
 8016cfe:	4b04      	ldr	r3, [pc, #16]	; (8016d10 <HAL_RCC_GetHCLKFreq+0x18>)
 8016d00:	4a04      	ldr	r2, [pc, #16]	; (8016d14 <HAL_RCC_GetHCLKFreq+0x1c>)
 8016d02:	689b      	ldr	r3, [r3, #8]
 8016d04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8016d08:	5cd3      	ldrb	r3, [r2, r3]
}
 8016d0a:	40d8      	lsrs	r0, r3
 8016d0c:	bd08      	pop	{r3, pc}
 8016d0e:	bf00      	nop
 8016d10:	40021000 	.word	0x40021000
 8016d14:	0801850c 	.word	0x0801850c

08016d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016d18:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8016d1a:	f7ff ffed 	bl	8016cf8 <HAL_RCC_GetHCLKFreq>
 8016d1e:	4b04      	ldr	r3, [pc, #16]	; (8016d30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8016d20:	4a04      	ldr	r2, [pc, #16]	; (8016d34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8016d22:	689b      	ldr	r3, [r3, #8]
 8016d24:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8016d28:	5cd3      	ldrb	r3, [r2, r3]
}
 8016d2a:	40d8      	lsrs	r0, r3
 8016d2c:	bd08      	pop	{r3, pc}
 8016d2e:	bf00      	nop
 8016d30:	40021000 	.word	0x40021000
 8016d34:	0801851c 	.word	0x0801851c

08016d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016d38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8016d3a:	f7ff ffdd 	bl	8016cf8 <HAL_RCC_GetHCLKFreq>
 8016d3e:	4b04      	ldr	r3, [pc, #16]	; (8016d50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8016d40:	4a04      	ldr	r2, [pc, #16]	; (8016d54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8016d42:	689b      	ldr	r3, [r3, #8]
 8016d44:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8016d48:	5cd3      	ldrb	r3, [r2, r3]
}
 8016d4a:	40d8      	lsrs	r0, r3
 8016d4c:	bd08      	pop	{r3, pc}
 8016d4e:	bf00      	nop
 8016d50:	40021000 	.word	0x40021000
 8016d54:	0801851c 	.word	0x0801851c

08016d58 <__errno>:
 8016d58:	4b01      	ldr	r3, [pc, #4]	; (8016d60 <__errno+0x8>)
 8016d5a:	6818      	ldr	r0, [r3, #0]
 8016d5c:	4770      	bx	lr
 8016d5e:	bf00      	nop
 8016d60:	20000128 	.word	0x20000128

08016d64 <__libc_init_array>:
 8016d64:	b570      	push	{r4, r5, r6, lr}
 8016d66:	4d0d      	ldr	r5, [pc, #52]	; (8016d9c <__libc_init_array+0x38>)
 8016d68:	2600      	movs	r6, #0
 8016d6a:	4c0d      	ldr	r4, [pc, #52]	; (8016da0 <__libc_init_array+0x3c>)
 8016d6c:	1b64      	subs	r4, r4, r5
 8016d6e:	10a4      	asrs	r4, r4, #2
 8016d70:	42a6      	cmp	r6, r4
 8016d72:	d109      	bne.n	8016d88 <__libc_init_array+0x24>
 8016d74:	4d0b      	ldr	r5, [pc, #44]	; (8016da4 <__libc_init_array+0x40>)
 8016d76:	2600      	movs	r6, #0
 8016d78:	4c0b      	ldr	r4, [pc, #44]	; (8016da8 <__libc_init_array+0x44>)
 8016d7a:	f001 f8d7 	bl	8017f2c <_init>
 8016d7e:	1b64      	subs	r4, r4, r5
 8016d80:	10a4      	asrs	r4, r4, #2
 8016d82:	42a6      	cmp	r6, r4
 8016d84:	d105      	bne.n	8016d92 <__libc_init_array+0x2e>
 8016d86:	bd70      	pop	{r4, r5, r6, pc}
 8016d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d8c:	3601      	adds	r6, #1
 8016d8e:	4798      	blx	r3
 8016d90:	e7ee      	b.n	8016d70 <__libc_init_array+0xc>
 8016d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d96:	3601      	adds	r6, #1
 8016d98:	4798      	blx	r3
 8016d9a:	e7f2      	b.n	8016d82 <__libc_init_array+0x1e>
 8016d9c:	08018630 	.word	0x08018630
 8016da0:	08018630 	.word	0x08018630
 8016da4:	08018630 	.word	0x08018630
 8016da8:	08018634 	.word	0x08018634

08016dac <memset>:
 8016dac:	4402      	add	r2, r0
 8016dae:	4603      	mov	r3, r0
 8016db0:	4293      	cmp	r3, r2
 8016db2:	d100      	bne.n	8016db6 <memset+0xa>
 8016db4:	4770      	bx	lr
 8016db6:	f803 1b01 	strb.w	r1, [r3], #1
 8016dba:	e7f9      	b.n	8016db0 <memset+0x4>

08016dbc <iprintf>:
 8016dbc:	b40f      	push	{r0, r1, r2, r3}
 8016dbe:	4b0a      	ldr	r3, [pc, #40]	; (8016de8 <iprintf+0x2c>)
 8016dc0:	b513      	push	{r0, r1, r4, lr}
 8016dc2:	681c      	ldr	r4, [r3, #0]
 8016dc4:	b124      	cbz	r4, 8016dd0 <iprintf+0x14>
 8016dc6:	69a3      	ldr	r3, [r4, #24]
 8016dc8:	b913      	cbnz	r3, 8016dd0 <iprintf+0x14>
 8016dca:	4620      	mov	r0, r4
 8016dcc:	f000 fb32 	bl	8017434 <__sinit>
 8016dd0:	ab05      	add	r3, sp, #20
 8016dd2:	9a04      	ldr	r2, [sp, #16]
 8016dd4:	68a1      	ldr	r1, [r4, #8]
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	9301      	str	r3, [sp, #4]
 8016dda:	f000 fd0b 	bl	80177f4 <_vfiprintf_r>
 8016dde:	b002      	add	sp, #8
 8016de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016de4:	b004      	add	sp, #16
 8016de6:	4770      	bx	lr
 8016de8:	20000128 	.word	0x20000128

08016dec <_puts_r>:
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	460e      	mov	r6, r1
 8016df0:	4605      	mov	r5, r0
 8016df2:	b118      	cbz	r0, 8016dfc <_puts_r+0x10>
 8016df4:	6983      	ldr	r3, [r0, #24]
 8016df6:	b90b      	cbnz	r3, 8016dfc <_puts_r+0x10>
 8016df8:	f000 fb1c 	bl	8017434 <__sinit>
 8016dfc:	69ab      	ldr	r3, [r5, #24]
 8016dfe:	68ac      	ldr	r4, [r5, #8]
 8016e00:	b913      	cbnz	r3, 8016e08 <_puts_r+0x1c>
 8016e02:	4628      	mov	r0, r5
 8016e04:	f000 fb16 	bl	8017434 <__sinit>
 8016e08:	4b2c      	ldr	r3, [pc, #176]	; (8016ebc <_puts_r+0xd0>)
 8016e0a:	429c      	cmp	r4, r3
 8016e0c:	d120      	bne.n	8016e50 <_puts_r+0x64>
 8016e0e:	686c      	ldr	r4, [r5, #4]
 8016e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e12:	07db      	lsls	r3, r3, #31
 8016e14:	d405      	bmi.n	8016e22 <_puts_r+0x36>
 8016e16:	89a3      	ldrh	r3, [r4, #12]
 8016e18:	0598      	lsls	r0, r3, #22
 8016e1a:	d402      	bmi.n	8016e22 <_puts_r+0x36>
 8016e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e1e:	f000 fba7 	bl	8017570 <__retarget_lock_acquire_recursive>
 8016e22:	89a3      	ldrh	r3, [r4, #12]
 8016e24:	0719      	lsls	r1, r3, #28
 8016e26:	d51d      	bpl.n	8016e64 <_puts_r+0x78>
 8016e28:	6923      	ldr	r3, [r4, #16]
 8016e2a:	b1db      	cbz	r3, 8016e64 <_puts_r+0x78>
 8016e2c:	3e01      	subs	r6, #1
 8016e2e:	68a3      	ldr	r3, [r4, #8]
 8016e30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016e34:	3b01      	subs	r3, #1
 8016e36:	60a3      	str	r3, [r4, #8]
 8016e38:	bb39      	cbnz	r1, 8016e8a <_puts_r+0x9e>
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	da38      	bge.n	8016eb0 <_puts_r+0xc4>
 8016e3e:	4622      	mov	r2, r4
 8016e40:	210a      	movs	r1, #10
 8016e42:	4628      	mov	r0, r5
 8016e44:	f000 f91e 	bl	8017084 <__swbuf_r>
 8016e48:	3001      	adds	r0, #1
 8016e4a:	d011      	beq.n	8016e70 <_puts_r+0x84>
 8016e4c:	250a      	movs	r5, #10
 8016e4e:	e011      	b.n	8016e74 <_puts_r+0x88>
 8016e50:	4b1b      	ldr	r3, [pc, #108]	; (8016ec0 <_puts_r+0xd4>)
 8016e52:	429c      	cmp	r4, r3
 8016e54:	d101      	bne.n	8016e5a <_puts_r+0x6e>
 8016e56:	68ac      	ldr	r4, [r5, #8]
 8016e58:	e7da      	b.n	8016e10 <_puts_r+0x24>
 8016e5a:	4b1a      	ldr	r3, [pc, #104]	; (8016ec4 <_puts_r+0xd8>)
 8016e5c:	429c      	cmp	r4, r3
 8016e5e:	bf08      	it	eq
 8016e60:	68ec      	ldreq	r4, [r5, #12]
 8016e62:	e7d5      	b.n	8016e10 <_puts_r+0x24>
 8016e64:	4621      	mov	r1, r4
 8016e66:	4628      	mov	r0, r5
 8016e68:	f000 f95e 	bl	8017128 <__swsetup_r>
 8016e6c:	2800      	cmp	r0, #0
 8016e6e:	d0dd      	beq.n	8016e2c <_puts_r+0x40>
 8016e70:	f04f 35ff 	mov.w	r5, #4294967295
 8016e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e76:	07da      	lsls	r2, r3, #31
 8016e78:	d405      	bmi.n	8016e86 <_puts_r+0x9a>
 8016e7a:	89a3      	ldrh	r3, [r4, #12]
 8016e7c:	059b      	lsls	r3, r3, #22
 8016e7e:	d402      	bmi.n	8016e86 <_puts_r+0x9a>
 8016e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e82:	f000 fb76 	bl	8017572 <__retarget_lock_release_recursive>
 8016e86:	4628      	mov	r0, r5
 8016e88:	bd70      	pop	{r4, r5, r6, pc}
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	da04      	bge.n	8016e98 <_puts_r+0xac>
 8016e8e:	69a2      	ldr	r2, [r4, #24]
 8016e90:	429a      	cmp	r2, r3
 8016e92:	dc06      	bgt.n	8016ea2 <_puts_r+0xb6>
 8016e94:	290a      	cmp	r1, #10
 8016e96:	d004      	beq.n	8016ea2 <_puts_r+0xb6>
 8016e98:	6823      	ldr	r3, [r4, #0]
 8016e9a:	1c5a      	adds	r2, r3, #1
 8016e9c:	6022      	str	r2, [r4, #0]
 8016e9e:	7019      	strb	r1, [r3, #0]
 8016ea0:	e7c5      	b.n	8016e2e <_puts_r+0x42>
 8016ea2:	4622      	mov	r2, r4
 8016ea4:	4628      	mov	r0, r5
 8016ea6:	f000 f8ed 	bl	8017084 <__swbuf_r>
 8016eaa:	3001      	adds	r0, #1
 8016eac:	d1bf      	bne.n	8016e2e <_puts_r+0x42>
 8016eae:	e7df      	b.n	8016e70 <_puts_r+0x84>
 8016eb0:	6823      	ldr	r3, [r4, #0]
 8016eb2:	250a      	movs	r5, #10
 8016eb4:	1c5a      	adds	r2, r3, #1
 8016eb6:	6022      	str	r2, [r4, #0]
 8016eb8:	701d      	strb	r5, [r3, #0]
 8016eba:	e7db      	b.n	8016e74 <_puts_r+0x88>
 8016ebc:	080185b0 	.word	0x080185b0
 8016ec0:	080185d0 	.word	0x080185d0
 8016ec4:	08018590 	.word	0x08018590

08016ec8 <puts>:
 8016ec8:	4b02      	ldr	r3, [pc, #8]	; (8016ed4 <puts+0xc>)
 8016eca:	4601      	mov	r1, r0
 8016ecc:	6818      	ldr	r0, [r3, #0]
 8016ece:	f7ff bf8d 	b.w	8016dec <_puts_r>
 8016ed2:	bf00      	nop
 8016ed4:	20000128 	.word	0x20000128

08016ed8 <setvbuf>:
 8016ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016edc:	461d      	mov	r5, r3
 8016ede:	4b5c      	ldr	r3, [pc, #368]	; (8017050 <setvbuf+0x178>)
 8016ee0:	4604      	mov	r4, r0
 8016ee2:	460e      	mov	r6, r1
 8016ee4:	681f      	ldr	r7, [r3, #0]
 8016ee6:	4690      	mov	r8, r2
 8016ee8:	b127      	cbz	r7, 8016ef4 <setvbuf+0x1c>
 8016eea:	69bb      	ldr	r3, [r7, #24]
 8016eec:	b913      	cbnz	r3, 8016ef4 <setvbuf+0x1c>
 8016eee:	4638      	mov	r0, r7
 8016ef0:	f000 faa0 	bl	8017434 <__sinit>
 8016ef4:	4b57      	ldr	r3, [pc, #348]	; (8017054 <setvbuf+0x17c>)
 8016ef6:	429c      	cmp	r4, r3
 8016ef8:	d167      	bne.n	8016fca <setvbuf+0xf2>
 8016efa:	687c      	ldr	r4, [r7, #4]
 8016efc:	f1b8 0f02 	cmp.w	r8, #2
 8016f00:	d006      	beq.n	8016f10 <setvbuf+0x38>
 8016f02:	f1b8 0f01 	cmp.w	r8, #1
 8016f06:	f200 809e 	bhi.w	8017046 <setvbuf+0x16e>
 8016f0a:	2d00      	cmp	r5, #0
 8016f0c:	f2c0 809b 	blt.w	8017046 <setvbuf+0x16e>
 8016f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f12:	07db      	lsls	r3, r3, #31
 8016f14:	d405      	bmi.n	8016f22 <setvbuf+0x4a>
 8016f16:	89a3      	ldrh	r3, [r4, #12]
 8016f18:	0598      	lsls	r0, r3, #22
 8016f1a:	d402      	bmi.n	8016f22 <setvbuf+0x4a>
 8016f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f1e:	f000 fb27 	bl	8017570 <__retarget_lock_acquire_recursive>
 8016f22:	4621      	mov	r1, r4
 8016f24:	4638      	mov	r0, r7
 8016f26:	f000 f9f1 	bl	801730c <_fflush_r>
 8016f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f2c:	b141      	cbz	r1, 8016f40 <setvbuf+0x68>
 8016f2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f32:	4299      	cmp	r1, r3
 8016f34:	d002      	beq.n	8016f3c <setvbuf+0x64>
 8016f36:	4638      	mov	r0, r7
 8016f38:	f000 fb88 	bl	801764c <_free_r>
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8016f40:	2300      	movs	r3, #0
 8016f42:	61a3      	str	r3, [r4, #24]
 8016f44:	6063      	str	r3, [r4, #4]
 8016f46:	89a3      	ldrh	r3, [r4, #12]
 8016f48:	0619      	lsls	r1, r3, #24
 8016f4a:	d503      	bpl.n	8016f54 <setvbuf+0x7c>
 8016f4c:	6921      	ldr	r1, [r4, #16]
 8016f4e:	4638      	mov	r0, r7
 8016f50:	f000 fb7c 	bl	801764c <_free_r>
 8016f54:	89a3      	ldrh	r3, [r4, #12]
 8016f56:	f1b8 0f02 	cmp.w	r8, #2
 8016f5a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8016f5e:	f023 0303 	bic.w	r3, r3, #3
 8016f62:	81a3      	strh	r3, [r4, #12]
 8016f64:	d06b      	beq.n	801703e <setvbuf+0x166>
 8016f66:	ab01      	add	r3, sp, #4
 8016f68:	466a      	mov	r2, sp
 8016f6a:	4621      	mov	r1, r4
 8016f6c:	4638      	mov	r0, r7
 8016f6e:	f000 fb01 	bl	8017574 <__swhatbuf_r>
 8016f72:	89a3      	ldrh	r3, [r4, #12]
 8016f74:	4318      	orrs	r0, r3
 8016f76:	81a0      	strh	r0, [r4, #12]
 8016f78:	2d00      	cmp	r5, #0
 8016f7a:	d130      	bne.n	8016fde <setvbuf+0x106>
 8016f7c:	9d00      	ldr	r5, [sp, #0]
 8016f7e:	4628      	mov	r0, r5
 8016f80:	f000 fb5c 	bl	801763c <malloc>
 8016f84:	4606      	mov	r6, r0
 8016f86:	2800      	cmp	r0, #0
 8016f88:	d154      	bne.n	8017034 <setvbuf+0x15c>
 8016f8a:	f8dd 9000 	ldr.w	r9, [sp]
 8016f8e:	45a9      	cmp	r9, r5
 8016f90:	d149      	bne.n	8017026 <setvbuf+0x14e>
 8016f92:	f04f 35ff 	mov.w	r5, #4294967295
 8016f96:	2200      	movs	r2, #0
 8016f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f9c:	60a2      	str	r2, [r4, #8]
 8016f9e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8016fa2:	f043 0302 	orr.w	r3, r3, #2
 8016fa6:	6022      	str	r2, [r4, #0]
 8016fa8:	6122      	str	r2, [r4, #16]
 8016faa:	2201      	movs	r2, #1
 8016fac:	81a3      	strh	r3, [r4, #12]
 8016fae:	6162      	str	r2, [r4, #20]
 8016fb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016fb2:	07d2      	lsls	r2, r2, #31
 8016fb4:	d405      	bmi.n	8016fc2 <setvbuf+0xea>
 8016fb6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8016fba:	d102      	bne.n	8016fc2 <setvbuf+0xea>
 8016fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fbe:	f000 fad8 	bl	8017572 <__retarget_lock_release_recursive>
 8016fc2:	4628      	mov	r0, r5
 8016fc4:	b003      	add	sp, #12
 8016fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fca:	4b23      	ldr	r3, [pc, #140]	; (8017058 <setvbuf+0x180>)
 8016fcc:	429c      	cmp	r4, r3
 8016fce:	d101      	bne.n	8016fd4 <setvbuf+0xfc>
 8016fd0:	68bc      	ldr	r4, [r7, #8]
 8016fd2:	e793      	b.n	8016efc <setvbuf+0x24>
 8016fd4:	4b21      	ldr	r3, [pc, #132]	; (801705c <setvbuf+0x184>)
 8016fd6:	429c      	cmp	r4, r3
 8016fd8:	bf08      	it	eq
 8016fda:	68fc      	ldreq	r4, [r7, #12]
 8016fdc:	e78e      	b.n	8016efc <setvbuf+0x24>
 8016fde:	2e00      	cmp	r6, #0
 8016fe0:	d0cd      	beq.n	8016f7e <setvbuf+0xa6>
 8016fe2:	69bb      	ldr	r3, [r7, #24]
 8016fe4:	b913      	cbnz	r3, 8016fec <setvbuf+0x114>
 8016fe6:	4638      	mov	r0, r7
 8016fe8:	f000 fa24 	bl	8017434 <__sinit>
 8016fec:	f1b8 0f01 	cmp.w	r8, #1
 8016ff0:	6026      	str	r6, [r4, #0]
 8016ff2:	bf02      	ittt	eq
 8016ff4:	89a3      	ldrheq	r3, [r4, #12]
 8016ff6:	f043 0301 	orreq.w	r3, r3, #1
 8016ffa:	81a3      	strheq	r3, [r4, #12]
 8016ffc:	89a2      	ldrh	r2, [r4, #12]
 8016ffe:	f012 0308 	ands.w	r3, r2, #8
 8017002:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8017006:	d01c      	beq.n	8017042 <setvbuf+0x16a>
 8017008:	07d3      	lsls	r3, r2, #31
 801700a:	bf45      	ittet	mi
 801700c:	2300      	movmi	r3, #0
 801700e:	426d      	negmi	r5, r5
 8017010:	60a5      	strpl	r5, [r4, #8]
 8017012:	60a3      	strmi	r3, [r4, #8]
 8017014:	bf48      	it	mi
 8017016:	61a5      	strmi	r5, [r4, #24]
 8017018:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801701a:	f015 0501 	ands.w	r5, r5, #1
 801701e:	d115      	bne.n	801704c <setvbuf+0x174>
 8017020:	f412 7f00 	tst.w	r2, #512	; 0x200
 8017024:	e7c9      	b.n	8016fba <setvbuf+0xe2>
 8017026:	4648      	mov	r0, r9
 8017028:	f000 fb08 	bl	801763c <malloc>
 801702c:	4606      	mov	r6, r0
 801702e:	2800      	cmp	r0, #0
 8017030:	d0af      	beq.n	8016f92 <setvbuf+0xba>
 8017032:	464d      	mov	r5, r9
 8017034:	89a3      	ldrh	r3, [r4, #12]
 8017036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801703a:	81a3      	strh	r3, [r4, #12]
 801703c:	e7d1      	b.n	8016fe2 <setvbuf+0x10a>
 801703e:	2500      	movs	r5, #0
 8017040:	e7a9      	b.n	8016f96 <setvbuf+0xbe>
 8017042:	60a3      	str	r3, [r4, #8]
 8017044:	e7e8      	b.n	8017018 <setvbuf+0x140>
 8017046:	f04f 35ff 	mov.w	r5, #4294967295
 801704a:	e7ba      	b.n	8016fc2 <setvbuf+0xea>
 801704c:	2500      	movs	r5, #0
 801704e:	e7b8      	b.n	8016fc2 <setvbuf+0xea>
 8017050:	20000128 	.word	0x20000128
 8017054:	080185b0 	.word	0x080185b0
 8017058:	080185d0 	.word	0x080185d0
 801705c:	08018590 	.word	0x08018590

08017060 <strncmp>:
 8017060:	b510      	push	{r4, lr}
 8017062:	b16a      	cbz	r2, 8017080 <strncmp+0x20>
 8017064:	3901      	subs	r1, #1
 8017066:	1884      	adds	r4, r0, r2
 8017068:	f810 3b01 	ldrb.w	r3, [r0], #1
 801706c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017070:	4293      	cmp	r3, r2
 8017072:	d103      	bne.n	801707c <strncmp+0x1c>
 8017074:	42a0      	cmp	r0, r4
 8017076:	d001      	beq.n	801707c <strncmp+0x1c>
 8017078:	2b00      	cmp	r3, #0
 801707a:	d1f5      	bne.n	8017068 <strncmp+0x8>
 801707c:	1a98      	subs	r0, r3, r2
 801707e:	bd10      	pop	{r4, pc}
 8017080:	4610      	mov	r0, r2
 8017082:	e7fc      	b.n	801707e <strncmp+0x1e>

08017084 <__swbuf_r>:
 8017084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017086:	460e      	mov	r6, r1
 8017088:	4614      	mov	r4, r2
 801708a:	4605      	mov	r5, r0
 801708c:	b118      	cbz	r0, 8017096 <__swbuf_r+0x12>
 801708e:	6983      	ldr	r3, [r0, #24]
 8017090:	b90b      	cbnz	r3, 8017096 <__swbuf_r+0x12>
 8017092:	f000 f9cf 	bl	8017434 <__sinit>
 8017096:	4b21      	ldr	r3, [pc, #132]	; (801711c <__swbuf_r+0x98>)
 8017098:	429c      	cmp	r4, r3
 801709a:	d12b      	bne.n	80170f4 <__swbuf_r+0x70>
 801709c:	686c      	ldr	r4, [r5, #4]
 801709e:	69a3      	ldr	r3, [r4, #24]
 80170a0:	60a3      	str	r3, [r4, #8]
 80170a2:	89a3      	ldrh	r3, [r4, #12]
 80170a4:	071a      	lsls	r2, r3, #28
 80170a6:	d52f      	bpl.n	8017108 <__swbuf_r+0x84>
 80170a8:	6923      	ldr	r3, [r4, #16]
 80170aa:	b36b      	cbz	r3, 8017108 <__swbuf_r+0x84>
 80170ac:	6923      	ldr	r3, [r4, #16]
 80170ae:	b2f6      	uxtb	r6, r6
 80170b0:	6820      	ldr	r0, [r4, #0]
 80170b2:	4637      	mov	r7, r6
 80170b4:	1ac0      	subs	r0, r0, r3
 80170b6:	6963      	ldr	r3, [r4, #20]
 80170b8:	4283      	cmp	r3, r0
 80170ba:	dc04      	bgt.n	80170c6 <__swbuf_r+0x42>
 80170bc:	4621      	mov	r1, r4
 80170be:	4628      	mov	r0, r5
 80170c0:	f000 f924 	bl	801730c <_fflush_r>
 80170c4:	bb30      	cbnz	r0, 8017114 <__swbuf_r+0x90>
 80170c6:	68a3      	ldr	r3, [r4, #8]
 80170c8:	3001      	adds	r0, #1
 80170ca:	3b01      	subs	r3, #1
 80170cc:	60a3      	str	r3, [r4, #8]
 80170ce:	6823      	ldr	r3, [r4, #0]
 80170d0:	1c5a      	adds	r2, r3, #1
 80170d2:	6022      	str	r2, [r4, #0]
 80170d4:	701e      	strb	r6, [r3, #0]
 80170d6:	6963      	ldr	r3, [r4, #20]
 80170d8:	4283      	cmp	r3, r0
 80170da:	d004      	beq.n	80170e6 <__swbuf_r+0x62>
 80170dc:	89a3      	ldrh	r3, [r4, #12]
 80170de:	07db      	lsls	r3, r3, #31
 80170e0:	d506      	bpl.n	80170f0 <__swbuf_r+0x6c>
 80170e2:	2e0a      	cmp	r6, #10
 80170e4:	d104      	bne.n	80170f0 <__swbuf_r+0x6c>
 80170e6:	4621      	mov	r1, r4
 80170e8:	4628      	mov	r0, r5
 80170ea:	f000 f90f 	bl	801730c <_fflush_r>
 80170ee:	b988      	cbnz	r0, 8017114 <__swbuf_r+0x90>
 80170f0:	4638      	mov	r0, r7
 80170f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170f4:	4b0a      	ldr	r3, [pc, #40]	; (8017120 <__swbuf_r+0x9c>)
 80170f6:	429c      	cmp	r4, r3
 80170f8:	d101      	bne.n	80170fe <__swbuf_r+0x7a>
 80170fa:	68ac      	ldr	r4, [r5, #8]
 80170fc:	e7cf      	b.n	801709e <__swbuf_r+0x1a>
 80170fe:	4b09      	ldr	r3, [pc, #36]	; (8017124 <__swbuf_r+0xa0>)
 8017100:	429c      	cmp	r4, r3
 8017102:	bf08      	it	eq
 8017104:	68ec      	ldreq	r4, [r5, #12]
 8017106:	e7ca      	b.n	801709e <__swbuf_r+0x1a>
 8017108:	4621      	mov	r1, r4
 801710a:	4628      	mov	r0, r5
 801710c:	f000 f80c 	bl	8017128 <__swsetup_r>
 8017110:	2800      	cmp	r0, #0
 8017112:	d0cb      	beq.n	80170ac <__swbuf_r+0x28>
 8017114:	f04f 37ff 	mov.w	r7, #4294967295
 8017118:	e7ea      	b.n	80170f0 <__swbuf_r+0x6c>
 801711a:	bf00      	nop
 801711c:	080185b0 	.word	0x080185b0
 8017120:	080185d0 	.word	0x080185d0
 8017124:	08018590 	.word	0x08018590

08017128 <__swsetup_r>:
 8017128:	4b32      	ldr	r3, [pc, #200]	; (80171f4 <__swsetup_r+0xcc>)
 801712a:	b570      	push	{r4, r5, r6, lr}
 801712c:	681d      	ldr	r5, [r3, #0]
 801712e:	4606      	mov	r6, r0
 8017130:	460c      	mov	r4, r1
 8017132:	b125      	cbz	r5, 801713e <__swsetup_r+0x16>
 8017134:	69ab      	ldr	r3, [r5, #24]
 8017136:	b913      	cbnz	r3, 801713e <__swsetup_r+0x16>
 8017138:	4628      	mov	r0, r5
 801713a:	f000 f97b 	bl	8017434 <__sinit>
 801713e:	4b2e      	ldr	r3, [pc, #184]	; (80171f8 <__swsetup_r+0xd0>)
 8017140:	429c      	cmp	r4, r3
 8017142:	d10f      	bne.n	8017164 <__swsetup_r+0x3c>
 8017144:	686c      	ldr	r4, [r5, #4]
 8017146:	89a3      	ldrh	r3, [r4, #12]
 8017148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801714c:	0719      	lsls	r1, r3, #28
 801714e:	d42c      	bmi.n	80171aa <__swsetup_r+0x82>
 8017150:	06dd      	lsls	r5, r3, #27
 8017152:	d411      	bmi.n	8017178 <__swsetup_r+0x50>
 8017154:	2309      	movs	r3, #9
 8017156:	6033      	str	r3, [r6, #0]
 8017158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801715c:	f04f 30ff 	mov.w	r0, #4294967295
 8017160:	81a3      	strh	r3, [r4, #12]
 8017162:	e03e      	b.n	80171e2 <__swsetup_r+0xba>
 8017164:	4b25      	ldr	r3, [pc, #148]	; (80171fc <__swsetup_r+0xd4>)
 8017166:	429c      	cmp	r4, r3
 8017168:	d101      	bne.n	801716e <__swsetup_r+0x46>
 801716a:	68ac      	ldr	r4, [r5, #8]
 801716c:	e7eb      	b.n	8017146 <__swsetup_r+0x1e>
 801716e:	4b24      	ldr	r3, [pc, #144]	; (8017200 <__swsetup_r+0xd8>)
 8017170:	429c      	cmp	r4, r3
 8017172:	bf08      	it	eq
 8017174:	68ec      	ldreq	r4, [r5, #12]
 8017176:	e7e6      	b.n	8017146 <__swsetup_r+0x1e>
 8017178:	0758      	lsls	r0, r3, #29
 801717a:	d512      	bpl.n	80171a2 <__swsetup_r+0x7a>
 801717c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801717e:	b141      	cbz	r1, 8017192 <__swsetup_r+0x6a>
 8017180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017184:	4299      	cmp	r1, r3
 8017186:	d002      	beq.n	801718e <__swsetup_r+0x66>
 8017188:	4630      	mov	r0, r6
 801718a:	f000 fa5f 	bl	801764c <_free_r>
 801718e:	2300      	movs	r3, #0
 8017190:	6363      	str	r3, [r4, #52]	; 0x34
 8017192:	89a3      	ldrh	r3, [r4, #12]
 8017194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017198:	81a3      	strh	r3, [r4, #12]
 801719a:	2300      	movs	r3, #0
 801719c:	6063      	str	r3, [r4, #4]
 801719e:	6923      	ldr	r3, [r4, #16]
 80171a0:	6023      	str	r3, [r4, #0]
 80171a2:	89a3      	ldrh	r3, [r4, #12]
 80171a4:	f043 0308 	orr.w	r3, r3, #8
 80171a8:	81a3      	strh	r3, [r4, #12]
 80171aa:	6923      	ldr	r3, [r4, #16]
 80171ac:	b94b      	cbnz	r3, 80171c2 <__swsetup_r+0x9a>
 80171ae:	89a3      	ldrh	r3, [r4, #12]
 80171b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80171b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171b8:	d003      	beq.n	80171c2 <__swsetup_r+0x9a>
 80171ba:	4621      	mov	r1, r4
 80171bc:	4630      	mov	r0, r6
 80171be:	f000 f9fd 	bl	80175bc <__smakebuf_r>
 80171c2:	89a0      	ldrh	r0, [r4, #12]
 80171c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171c8:	f010 0301 	ands.w	r3, r0, #1
 80171cc:	d00a      	beq.n	80171e4 <__swsetup_r+0xbc>
 80171ce:	2300      	movs	r3, #0
 80171d0:	60a3      	str	r3, [r4, #8]
 80171d2:	6963      	ldr	r3, [r4, #20]
 80171d4:	425b      	negs	r3, r3
 80171d6:	61a3      	str	r3, [r4, #24]
 80171d8:	6923      	ldr	r3, [r4, #16]
 80171da:	b943      	cbnz	r3, 80171ee <__swsetup_r+0xc6>
 80171dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80171e0:	d1ba      	bne.n	8017158 <__swsetup_r+0x30>
 80171e2:	bd70      	pop	{r4, r5, r6, pc}
 80171e4:	0781      	lsls	r1, r0, #30
 80171e6:	bf58      	it	pl
 80171e8:	6963      	ldrpl	r3, [r4, #20]
 80171ea:	60a3      	str	r3, [r4, #8]
 80171ec:	e7f4      	b.n	80171d8 <__swsetup_r+0xb0>
 80171ee:	2000      	movs	r0, #0
 80171f0:	e7f7      	b.n	80171e2 <__swsetup_r+0xba>
 80171f2:	bf00      	nop
 80171f4:	20000128 	.word	0x20000128
 80171f8:	080185b0 	.word	0x080185b0
 80171fc:	080185d0 	.word	0x080185d0
 8017200:	08018590 	.word	0x08018590

08017204 <__sflush_r>:
 8017204:	898a      	ldrh	r2, [r1, #12]
 8017206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801720a:	4605      	mov	r5, r0
 801720c:	0710      	lsls	r0, r2, #28
 801720e:	460c      	mov	r4, r1
 8017210:	d458      	bmi.n	80172c4 <__sflush_r+0xc0>
 8017212:	684b      	ldr	r3, [r1, #4]
 8017214:	2b00      	cmp	r3, #0
 8017216:	dc05      	bgt.n	8017224 <__sflush_r+0x20>
 8017218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801721a:	2b00      	cmp	r3, #0
 801721c:	dc02      	bgt.n	8017224 <__sflush_r+0x20>
 801721e:	2000      	movs	r0, #0
 8017220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017226:	2e00      	cmp	r6, #0
 8017228:	d0f9      	beq.n	801721e <__sflush_r+0x1a>
 801722a:	2300      	movs	r3, #0
 801722c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017230:	682f      	ldr	r7, [r5, #0]
 8017232:	602b      	str	r3, [r5, #0]
 8017234:	d032      	beq.n	801729c <__sflush_r+0x98>
 8017236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017238:	89a3      	ldrh	r3, [r4, #12]
 801723a:	075a      	lsls	r2, r3, #29
 801723c:	d505      	bpl.n	801724a <__sflush_r+0x46>
 801723e:	6863      	ldr	r3, [r4, #4]
 8017240:	1ac0      	subs	r0, r0, r3
 8017242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017244:	b10b      	cbz	r3, 801724a <__sflush_r+0x46>
 8017246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017248:	1ac0      	subs	r0, r0, r3
 801724a:	2300      	movs	r3, #0
 801724c:	4602      	mov	r2, r0
 801724e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017250:	4628      	mov	r0, r5
 8017252:	6a21      	ldr	r1, [r4, #32]
 8017254:	47b0      	blx	r6
 8017256:	1c43      	adds	r3, r0, #1
 8017258:	89a3      	ldrh	r3, [r4, #12]
 801725a:	d106      	bne.n	801726a <__sflush_r+0x66>
 801725c:	6829      	ldr	r1, [r5, #0]
 801725e:	291d      	cmp	r1, #29
 8017260:	d82c      	bhi.n	80172bc <__sflush_r+0xb8>
 8017262:	4a29      	ldr	r2, [pc, #164]	; (8017308 <__sflush_r+0x104>)
 8017264:	40ca      	lsrs	r2, r1
 8017266:	07d6      	lsls	r6, r2, #31
 8017268:	d528      	bpl.n	80172bc <__sflush_r+0xb8>
 801726a:	2200      	movs	r2, #0
 801726c:	04d9      	lsls	r1, r3, #19
 801726e:	6062      	str	r2, [r4, #4]
 8017270:	6922      	ldr	r2, [r4, #16]
 8017272:	6022      	str	r2, [r4, #0]
 8017274:	d504      	bpl.n	8017280 <__sflush_r+0x7c>
 8017276:	1c42      	adds	r2, r0, #1
 8017278:	d101      	bne.n	801727e <__sflush_r+0x7a>
 801727a:	682b      	ldr	r3, [r5, #0]
 801727c:	b903      	cbnz	r3, 8017280 <__sflush_r+0x7c>
 801727e:	6560      	str	r0, [r4, #84]	; 0x54
 8017280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017282:	602f      	str	r7, [r5, #0]
 8017284:	2900      	cmp	r1, #0
 8017286:	d0ca      	beq.n	801721e <__sflush_r+0x1a>
 8017288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801728c:	4299      	cmp	r1, r3
 801728e:	d002      	beq.n	8017296 <__sflush_r+0x92>
 8017290:	4628      	mov	r0, r5
 8017292:	f000 f9db 	bl	801764c <_free_r>
 8017296:	2000      	movs	r0, #0
 8017298:	6360      	str	r0, [r4, #52]	; 0x34
 801729a:	e7c1      	b.n	8017220 <__sflush_r+0x1c>
 801729c:	6a21      	ldr	r1, [r4, #32]
 801729e:	2301      	movs	r3, #1
 80172a0:	4628      	mov	r0, r5
 80172a2:	47b0      	blx	r6
 80172a4:	1c41      	adds	r1, r0, #1
 80172a6:	d1c7      	bne.n	8017238 <__sflush_r+0x34>
 80172a8:	682b      	ldr	r3, [r5, #0]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d0c4      	beq.n	8017238 <__sflush_r+0x34>
 80172ae:	2b1d      	cmp	r3, #29
 80172b0:	d001      	beq.n	80172b6 <__sflush_r+0xb2>
 80172b2:	2b16      	cmp	r3, #22
 80172b4:	d101      	bne.n	80172ba <__sflush_r+0xb6>
 80172b6:	602f      	str	r7, [r5, #0]
 80172b8:	e7b1      	b.n	801721e <__sflush_r+0x1a>
 80172ba:	89a3      	ldrh	r3, [r4, #12]
 80172bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172c0:	81a3      	strh	r3, [r4, #12]
 80172c2:	e7ad      	b.n	8017220 <__sflush_r+0x1c>
 80172c4:	690f      	ldr	r7, [r1, #16]
 80172c6:	2f00      	cmp	r7, #0
 80172c8:	d0a9      	beq.n	801721e <__sflush_r+0x1a>
 80172ca:	0793      	lsls	r3, r2, #30
 80172cc:	680e      	ldr	r6, [r1, #0]
 80172ce:	600f      	str	r7, [r1, #0]
 80172d0:	bf0c      	ite	eq
 80172d2:	694b      	ldreq	r3, [r1, #20]
 80172d4:	2300      	movne	r3, #0
 80172d6:	eba6 0807 	sub.w	r8, r6, r7
 80172da:	608b      	str	r3, [r1, #8]
 80172dc:	f1b8 0f00 	cmp.w	r8, #0
 80172e0:	dd9d      	ble.n	801721e <__sflush_r+0x1a>
 80172e2:	4643      	mov	r3, r8
 80172e4:	463a      	mov	r2, r7
 80172e6:	6a21      	ldr	r1, [r4, #32]
 80172e8:	4628      	mov	r0, r5
 80172ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80172ec:	47b0      	blx	r6
 80172ee:	2800      	cmp	r0, #0
 80172f0:	dc06      	bgt.n	8017300 <__sflush_r+0xfc>
 80172f2:	89a3      	ldrh	r3, [r4, #12]
 80172f4:	f04f 30ff 	mov.w	r0, #4294967295
 80172f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172fc:	81a3      	strh	r3, [r4, #12]
 80172fe:	e78f      	b.n	8017220 <__sflush_r+0x1c>
 8017300:	4407      	add	r7, r0
 8017302:	eba8 0800 	sub.w	r8, r8, r0
 8017306:	e7e9      	b.n	80172dc <__sflush_r+0xd8>
 8017308:	20400001 	.word	0x20400001

0801730c <_fflush_r>:
 801730c:	b538      	push	{r3, r4, r5, lr}
 801730e:	690b      	ldr	r3, [r1, #16]
 8017310:	4605      	mov	r5, r0
 8017312:	460c      	mov	r4, r1
 8017314:	b913      	cbnz	r3, 801731c <_fflush_r+0x10>
 8017316:	2500      	movs	r5, #0
 8017318:	4628      	mov	r0, r5
 801731a:	bd38      	pop	{r3, r4, r5, pc}
 801731c:	b118      	cbz	r0, 8017326 <_fflush_r+0x1a>
 801731e:	6983      	ldr	r3, [r0, #24]
 8017320:	b90b      	cbnz	r3, 8017326 <_fflush_r+0x1a>
 8017322:	f000 f887 	bl	8017434 <__sinit>
 8017326:	4b14      	ldr	r3, [pc, #80]	; (8017378 <_fflush_r+0x6c>)
 8017328:	429c      	cmp	r4, r3
 801732a:	d11b      	bne.n	8017364 <_fflush_r+0x58>
 801732c:	686c      	ldr	r4, [r5, #4]
 801732e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d0ef      	beq.n	8017316 <_fflush_r+0xa>
 8017336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017338:	07d0      	lsls	r0, r2, #31
 801733a:	d404      	bmi.n	8017346 <_fflush_r+0x3a>
 801733c:	0599      	lsls	r1, r3, #22
 801733e:	d402      	bmi.n	8017346 <_fflush_r+0x3a>
 8017340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017342:	f000 f915 	bl	8017570 <__retarget_lock_acquire_recursive>
 8017346:	4628      	mov	r0, r5
 8017348:	4621      	mov	r1, r4
 801734a:	f7ff ff5b 	bl	8017204 <__sflush_r>
 801734e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017350:	4605      	mov	r5, r0
 8017352:	07da      	lsls	r2, r3, #31
 8017354:	d4e0      	bmi.n	8017318 <_fflush_r+0xc>
 8017356:	89a3      	ldrh	r3, [r4, #12]
 8017358:	059b      	lsls	r3, r3, #22
 801735a:	d4dd      	bmi.n	8017318 <_fflush_r+0xc>
 801735c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801735e:	f000 f908 	bl	8017572 <__retarget_lock_release_recursive>
 8017362:	e7d9      	b.n	8017318 <_fflush_r+0xc>
 8017364:	4b05      	ldr	r3, [pc, #20]	; (801737c <_fflush_r+0x70>)
 8017366:	429c      	cmp	r4, r3
 8017368:	d101      	bne.n	801736e <_fflush_r+0x62>
 801736a:	68ac      	ldr	r4, [r5, #8]
 801736c:	e7df      	b.n	801732e <_fflush_r+0x22>
 801736e:	4b04      	ldr	r3, [pc, #16]	; (8017380 <_fflush_r+0x74>)
 8017370:	429c      	cmp	r4, r3
 8017372:	bf08      	it	eq
 8017374:	68ec      	ldreq	r4, [r5, #12]
 8017376:	e7da      	b.n	801732e <_fflush_r+0x22>
 8017378:	080185b0 	.word	0x080185b0
 801737c:	080185d0 	.word	0x080185d0
 8017380:	08018590 	.word	0x08018590

08017384 <std>:
 8017384:	2300      	movs	r3, #0
 8017386:	b510      	push	{r4, lr}
 8017388:	4604      	mov	r4, r0
 801738a:	6083      	str	r3, [r0, #8]
 801738c:	8181      	strh	r1, [r0, #12]
 801738e:	4619      	mov	r1, r3
 8017390:	6643      	str	r3, [r0, #100]	; 0x64
 8017392:	81c2      	strh	r2, [r0, #14]
 8017394:	2208      	movs	r2, #8
 8017396:	6183      	str	r3, [r0, #24]
 8017398:	e9c0 3300 	strd	r3, r3, [r0]
 801739c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80173a0:	305c      	adds	r0, #92	; 0x5c
 80173a2:	f7ff fd03 	bl	8016dac <memset>
 80173a6:	4b05      	ldr	r3, [pc, #20]	; (80173bc <std+0x38>)
 80173a8:	6224      	str	r4, [r4, #32]
 80173aa:	6263      	str	r3, [r4, #36]	; 0x24
 80173ac:	4b04      	ldr	r3, [pc, #16]	; (80173c0 <std+0x3c>)
 80173ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80173b0:	4b04      	ldr	r3, [pc, #16]	; (80173c4 <std+0x40>)
 80173b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80173b4:	4b04      	ldr	r3, [pc, #16]	; (80173c8 <std+0x44>)
 80173b6:	6323      	str	r3, [r4, #48]	; 0x30
 80173b8:	bd10      	pop	{r4, pc}
 80173ba:	bf00      	nop
 80173bc:	08017da1 	.word	0x08017da1
 80173c0:	08017dc3 	.word	0x08017dc3
 80173c4:	08017dfb 	.word	0x08017dfb
 80173c8:	08017e1f 	.word	0x08017e1f

080173cc <_cleanup_r>:
 80173cc:	4901      	ldr	r1, [pc, #4]	; (80173d4 <_cleanup_r+0x8>)
 80173ce:	f000 b8af 	b.w	8017530 <_fwalk_reent>
 80173d2:	bf00      	nop
 80173d4:	0801730d 	.word	0x0801730d

080173d8 <__sfmoreglue>:
 80173d8:	b570      	push	{r4, r5, r6, lr}
 80173da:	1e4a      	subs	r2, r1, #1
 80173dc:	2568      	movs	r5, #104	; 0x68
 80173de:	460e      	mov	r6, r1
 80173e0:	4355      	muls	r5, r2
 80173e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80173e6:	f000 f981 	bl	80176ec <_malloc_r>
 80173ea:	4604      	mov	r4, r0
 80173ec:	b140      	cbz	r0, 8017400 <__sfmoreglue+0x28>
 80173ee:	2100      	movs	r1, #0
 80173f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80173f4:	e9c0 1600 	strd	r1, r6, [r0]
 80173f8:	300c      	adds	r0, #12
 80173fa:	60a0      	str	r0, [r4, #8]
 80173fc:	f7ff fcd6 	bl	8016dac <memset>
 8017400:	4620      	mov	r0, r4
 8017402:	bd70      	pop	{r4, r5, r6, pc}

08017404 <__sfp_lock_acquire>:
 8017404:	4801      	ldr	r0, [pc, #4]	; (801740c <__sfp_lock_acquire+0x8>)
 8017406:	f000 b8b3 	b.w	8017570 <__retarget_lock_acquire_recursive>
 801740a:	bf00      	nop
 801740c:	20000258 	.word	0x20000258

08017410 <__sfp_lock_release>:
 8017410:	4801      	ldr	r0, [pc, #4]	; (8017418 <__sfp_lock_release+0x8>)
 8017412:	f000 b8ae 	b.w	8017572 <__retarget_lock_release_recursive>
 8017416:	bf00      	nop
 8017418:	20000258 	.word	0x20000258

0801741c <__sinit_lock_acquire>:
 801741c:	4801      	ldr	r0, [pc, #4]	; (8017424 <__sinit_lock_acquire+0x8>)
 801741e:	f000 b8a7 	b.w	8017570 <__retarget_lock_acquire_recursive>
 8017422:	bf00      	nop
 8017424:	20000253 	.word	0x20000253

08017428 <__sinit_lock_release>:
 8017428:	4801      	ldr	r0, [pc, #4]	; (8017430 <__sinit_lock_release+0x8>)
 801742a:	f000 b8a2 	b.w	8017572 <__retarget_lock_release_recursive>
 801742e:	bf00      	nop
 8017430:	20000253 	.word	0x20000253

08017434 <__sinit>:
 8017434:	b510      	push	{r4, lr}
 8017436:	4604      	mov	r4, r0
 8017438:	f7ff fff0 	bl	801741c <__sinit_lock_acquire>
 801743c:	69a3      	ldr	r3, [r4, #24]
 801743e:	b11b      	cbz	r3, 8017448 <__sinit+0x14>
 8017440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017444:	f7ff bff0 	b.w	8017428 <__sinit_lock_release>
 8017448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801744c:	6523      	str	r3, [r4, #80]	; 0x50
 801744e:	4620      	mov	r0, r4
 8017450:	4b12      	ldr	r3, [pc, #72]	; (801749c <__sinit+0x68>)
 8017452:	4a13      	ldr	r2, [pc, #76]	; (80174a0 <__sinit+0x6c>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	62a2      	str	r2, [r4, #40]	; 0x28
 8017458:	42a3      	cmp	r3, r4
 801745a:	bf04      	itt	eq
 801745c:	2301      	moveq	r3, #1
 801745e:	61a3      	streq	r3, [r4, #24]
 8017460:	f000 f820 	bl	80174a4 <__sfp>
 8017464:	6060      	str	r0, [r4, #4]
 8017466:	4620      	mov	r0, r4
 8017468:	f000 f81c 	bl	80174a4 <__sfp>
 801746c:	60a0      	str	r0, [r4, #8]
 801746e:	4620      	mov	r0, r4
 8017470:	f000 f818 	bl	80174a4 <__sfp>
 8017474:	2200      	movs	r2, #0
 8017476:	2104      	movs	r1, #4
 8017478:	60e0      	str	r0, [r4, #12]
 801747a:	6860      	ldr	r0, [r4, #4]
 801747c:	f7ff ff82 	bl	8017384 <std>
 8017480:	2201      	movs	r2, #1
 8017482:	2109      	movs	r1, #9
 8017484:	68a0      	ldr	r0, [r4, #8]
 8017486:	f7ff ff7d 	bl	8017384 <std>
 801748a:	2202      	movs	r2, #2
 801748c:	2112      	movs	r1, #18
 801748e:	68e0      	ldr	r0, [r4, #12]
 8017490:	f7ff ff78 	bl	8017384 <std>
 8017494:	2301      	movs	r3, #1
 8017496:	61a3      	str	r3, [r4, #24]
 8017498:	e7d2      	b.n	8017440 <__sinit+0xc>
 801749a:	bf00      	nop
 801749c:	0801858c 	.word	0x0801858c
 80174a0:	080173cd 	.word	0x080173cd

080174a4 <__sfp>:
 80174a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174a6:	4607      	mov	r7, r0
 80174a8:	f7ff ffac 	bl	8017404 <__sfp_lock_acquire>
 80174ac:	4b1e      	ldr	r3, [pc, #120]	; (8017528 <__sfp+0x84>)
 80174ae:	681e      	ldr	r6, [r3, #0]
 80174b0:	69b3      	ldr	r3, [r6, #24]
 80174b2:	b913      	cbnz	r3, 80174ba <__sfp+0x16>
 80174b4:	4630      	mov	r0, r6
 80174b6:	f7ff ffbd 	bl	8017434 <__sinit>
 80174ba:	3648      	adds	r6, #72	; 0x48
 80174bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80174c0:	3b01      	subs	r3, #1
 80174c2:	d503      	bpl.n	80174cc <__sfp+0x28>
 80174c4:	6833      	ldr	r3, [r6, #0]
 80174c6:	b30b      	cbz	r3, 801750c <__sfp+0x68>
 80174c8:	6836      	ldr	r6, [r6, #0]
 80174ca:	e7f7      	b.n	80174bc <__sfp+0x18>
 80174cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80174d0:	b9d5      	cbnz	r5, 8017508 <__sfp+0x64>
 80174d2:	4b16      	ldr	r3, [pc, #88]	; (801752c <__sfp+0x88>)
 80174d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80174d8:	6665      	str	r5, [r4, #100]	; 0x64
 80174da:	60e3      	str	r3, [r4, #12]
 80174dc:	f000 f847 	bl	801756e <__retarget_lock_init_recursive>
 80174e0:	f7ff ff96 	bl	8017410 <__sfp_lock_release>
 80174e4:	2208      	movs	r2, #8
 80174e6:	4629      	mov	r1, r5
 80174e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80174ec:	6025      	str	r5, [r4, #0]
 80174ee:	61a5      	str	r5, [r4, #24]
 80174f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80174f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80174f8:	f7ff fc58 	bl	8016dac <memset>
 80174fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017504:	4620      	mov	r0, r4
 8017506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017508:	3468      	adds	r4, #104	; 0x68
 801750a:	e7d9      	b.n	80174c0 <__sfp+0x1c>
 801750c:	2104      	movs	r1, #4
 801750e:	4638      	mov	r0, r7
 8017510:	f7ff ff62 	bl	80173d8 <__sfmoreglue>
 8017514:	4604      	mov	r4, r0
 8017516:	6030      	str	r0, [r6, #0]
 8017518:	2800      	cmp	r0, #0
 801751a:	d1d5      	bne.n	80174c8 <__sfp+0x24>
 801751c:	f7ff ff78 	bl	8017410 <__sfp_lock_release>
 8017520:	230c      	movs	r3, #12
 8017522:	603b      	str	r3, [r7, #0]
 8017524:	e7ee      	b.n	8017504 <__sfp+0x60>
 8017526:	bf00      	nop
 8017528:	0801858c 	.word	0x0801858c
 801752c:	ffff0001 	.word	0xffff0001

08017530 <_fwalk_reent>:
 8017530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017534:	4606      	mov	r6, r0
 8017536:	4688      	mov	r8, r1
 8017538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801753c:	2700      	movs	r7, #0
 801753e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017542:	f1b9 0901 	subs.w	r9, r9, #1
 8017546:	d505      	bpl.n	8017554 <_fwalk_reent+0x24>
 8017548:	6824      	ldr	r4, [r4, #0]
 801754a:	2c00      	cmp	r4, #0
 801754c:	d1f7      	bne.n	801753e <_fwalk_reent+0xe>
 801754e:	4638      	mov	r0, r7
 8017550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017554:	89ab      	ldrh	r3, [r5, #12]
 8017556:	2b01      	cmp	r3, #1
 8017558:	d907      	bls.n	801756a <_fwalk_reent+0x3a>
 801755a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801755e:	3301      	adds	r3, #1
 8017560:	d003      	beq.n	801756a <_fwalk_reent+0x3a>
 8017562:	4629      	mov	r1, r5
 8017564:	4630      	mov	r0, r6
 8017566:	47c0      	blx	r8
 8017568:	4307      	orrs	r7, r0
 801756a:	3568      	adds	r5, #104	; 0x68
 801756c:	e7e9      	b.n	8017542 <_fwalk_reent+0x12>

0801756e <__retarget_lock_init_recursive>:
 801756e:	4770      	bx	lr

08017570 <__retarget_lock_acquire_recursive>:
 8017570:	4770      	bx	lr

08017572 <__retarget_lock_release_recursive>:
 8017572:	4770      	bx	lr

08017574 <__swhatbuf_r>:
 8017574:	b570      	push	{r4, r5, r6, lr}
 8017576:	460e      	mov	r6, r1
 8017578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801757c:	b096      	sub	sp, #88	; 0x58
 801757e:	4614      	mov	r4, r2
 8017580:	2900      	cmp	r1, #0
 8017582:	461d      	mov	r5, r3
 8017584:	da07      	bge.n	8017596 <__swhatbuf_r+0x22>
 8017586:	2300      	movs	r3, #0
 8017588:	602b      	str	r3, [r5, #0]
 801758a:	89b3      	ldrh	r3, [r6, #12]
 801758c:	061a      	lsls	r2, r3, #24
 801758e:	d410      	bmi.n	80175b2 <__swhatbuf_r+0x3e>
 8017590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017594:	e00e      	b.n	80175b4 <__swhatbuf_r+0x40>
 8017596:	466a      	mov	r2, sp
 8017598:	f000 fc68 	bl	8017e6c <_fstat_r>
 801759c:	2800      	cmp	r0, #0
 801759e:	dbf2      	blt.n	8017586 <__swhatbuf_r+0x12>
 80175a0:	9a01      	ldr	r2, [sp, #4]
 80175a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80175a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80175aa:	425a      	negs	r2, r3
 80175ac:	415a      	adcs	r2, r3
 80175ae:	602a      	str	r2, [r5, #0]
 80175b0:	e7ee      	b.n	8017590 <__swhatbuf_r+0x1c>
 80175b2:	2340      	movs	r3, #64	; 0x40
 80175b4:	2000      	movs	r0, #0
 80175b6:	6023      	str	r3, [r4, #0]
 80175b8:	b016      	add	sp, #88	; 0x58
 80175ba:	bd70      	pop	{r4, r5, r6, pc}

080175bc <__smakebuf_r>:
 80175bc:	898b      	ldrh	r3, [r1, #12]
 80175be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80175c0:	079d      	lsls	r5, r3, #30
 80175c2:	4606      	mov	r6, r0
 80175c4:	460c      	mov	r4, r1
 80175c6:	d507      	bpl.n	80175d8 <__smakebuf_r+0x1c>
 80175c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80175cc:	6023      	str	r3, [r4, #0]
 80175ce:	6123      	str	r3, [r4, #16]
 80175d0:	2301      	movs	r3, #1
 80175d2:	6163      	str	r3, [r4, #20]
 80175d4:	b002      	add	sp, #8
 80175d6:	bd70      	pop	{r4, r5, r6, pc}
 80175d8:	ab01      	add	r3, sp, #4
 80175da:	466a      	mov	r2, sp
 80175dc:	f7ff ffca 	bl	8017574 <__swhatbuf_r>
 80175e0:	9900      	ldr	r1, [sp, #0]
 80175e2:	4605      	mov	r5, r0
 80175e4:	4630      	mov	r0, r6
 80175e6:	f000 f881 	bl	80176ec <_malloc_r>
 80175ea:	b948      	cbnz	r0, 8017600 <__smakebuf_r+0x44>
 80175ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175f0:	059a      	lsls	r2, r3, #22
 80175f2:	d4ef      	bmi.n	80175d4 <__smakebuf_r+0x18>
 80175f4:	f023 0303 	bic.w	r3, r3, #3
 80175f8:	f043 0302 	orr.w	r3, r3, #2
 80175fc:	81a3      	strh	r3, [r4, #12]
 80175fe:	e7e3      	b.n	80175c8 <__smakebuf_r+0xc>
 8017600:	4b0d      	ldr	r3, [pc, #52]	; (8017638 <__smakebuf_r+0x7c>)
 8017602:	62b3      	str	r3, [r6, #40]	; 0x28
 8017604:	89a3      	ldrh	r3, [r4, #12]
 8017606:	6020      	str	r0, [r4, #0]
 8017608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801760c:	6120      	str	r0, [r4, #16]
 801760e:	81a3      	strh	r3, [r4, #12]
 8017610:	9b00      	ldr	r3, [sp, #0]
 8017612:	6163      	str	r3, [r4, #20]
 8017614:	9b01      	ldr	r3, [sp, #4]
 8017616:	b15b      	cbz	r3, 8017630 <__smakebuf_r+0x74>
 8017618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801761c:	4630      	mov	r0, r6
 801761e:	f000 fc37 	bl	8017e90 <_isatty_r>
 8017622:	b128      	cbz	r0, 8017630 <__smakebuf_r+0x74>
 8017624:	89a3      	ldrh	r3, [r4, #12]
 8017626:	f023 0303 	bic.w	r3, r3, #3
 801762a:	f043 0301 	orr.w	r3, r3, #1
 801762e:	81a3      	strh	r3, [r4, #12]
 8017630:	89a0      	ldrh	r0, [r4, #12]
 8017632:	4305      	orrs	r5, r0
 8017634:	81a5      	strh	r5, [r4, #12]
 8017636:	e7cd      	b.n	80175d4 <__smakebuf_r+0x18>
 8017638:	080173cd 	.word	0x080173cd

0801763c <malloc>:
 801763c:	4b02      	ldr	r3, [pc, #8]	; (8017648 <malloc+0xc>)
 801763e:	4601      	mov	r1, r0
 8017640:	6818      	ldr	r0, [r3, #0]
 8017642:	f000 b853 	b.w	80176ec <_malloc_r>
 8017646:	bf00      	nop
 8017648:	20000128 	.word	0x20000128

0801764c <_free_r>:
 801764c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801764e:	2900      	cmp	r1, #0
 8017650:	d047      	beq.n	80176e2 <_free_r+0x96>
 8017652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017656:	1f0c      	subs	r4, r1, #4
 8017658:	9001      	str	r0, [sp, #4]
 801765a:	2b00      	cmp	r3, #0
 801765c:	bfb8      	it	lt
 801765e:	18e4      	addlt	r4, r4, r3
 8017660:	f000 fc46 	bl	8017ef0 <__malloc_lock>
 8017664:	4a20      	ldr	r2, [pc, #128]	; (80176e8 <_free_r+0x9c>)
 8017666:	9801      	ldr	r0, [sp, #4]
 8017668:	6813      	ldr	r3, [r2, #0]
 801766a:	4615      	mov	r5, r2
 801766c:	b933      	cbnz	r3, 801767c <_free_r+0x30>
 801766e:	6063      	str	r3, [r4, #4]
 8017670:	6014      	str	r4, [r2, #0]
 8017672:	b003      	add	sp, #12
 8017674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017678:	f000 bc40 	b.w	8017efc <__malloc_unlock>
 801767c:	42a3      	cmp	r3, r4
 801767e:	d90b      	bls.n	8017698 <_free_r+0x4c>
 8017680:	6821      	ldr	r1, [r4, #0]
 8017682:	1862      	adds	r2, r4, r1
 8017684:	4293      	cmp	r3, r2
 8017686:	bf02      	ittt	eq
 8017688:	681a      	ldreq	r2, [r3, #0]
 801768a:	685b      	ldreq	r3, [r3, #4]
 801768c:	1852      	addeq	r2, r2, r1
 801768e:	6063      	str	r3, [r4, #4]
 8017690:	bf08      	it	eq
 8017692:	6022      	streq	r2, [r4, #0]
 8017694:	602c      	str	r4, [r5, #0]
 8017696:	e7ec      	b.n	8017672 <_free_r+0x26>
 8017698:	461a      	mov	r2, r3
 801769a:	685b      	ldr	r3, [r3, #4]
 801769c:	b10b      	cbz	r3, 80176a2 <_free_r+0x56>
 801769e:	42a3      	cmp	r3, r4
 80176a0:	d9fa      	bls.n	8017698 <_free_r+0x4c>
 80176a2:	6811      	ldr	r1, [r2, #0]
 80176a4:	1855      	adds	r5, r2, r1
 80176a6:	42a5      	cmp	r5, r4
 80176a8:	d10b      	bne.n	80176c2 <_free_r+0x76>
 80176aa:	6824      	ldr	r4, [r4, #0]
 80176ac:	4421      	add	r1, r4
 80176ae:	1854      	adds	r4, r2, r1
 80176b0:	6011      	str	r1, [r2, #0]
 80176b2:	42a3      	cmp	r3, r4
 80176b4:	d1dd      	bne.n	8017672 <_free_r+0x26>
 80176b6:	681c      	ldr	r4, [r3, #0]
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	4421      	add	r1, r4
 80176bc:	6053      	str	r3, [r2, #4]
 80176be:	6011      	str	r1, [r2, #0]
 80176c0:	e7d7      	b.n	8017672 <_free_r+0x26>
 80176c2:	d902      	bls.n	80176ca <_free_r+0x7e>
 80176c4:	230c      	movs	r3, #12
 80176c6:	6003      	str	r3, [r0, #0]
 80176c8:	e7d3      	b.n	8017672 <_free_r+0x26>
 80176ca:	6825      	ldr	r5, [r4, #0]
 80176cc:	1961      	adds	r1, r4, r5
 80176ce:	428b      	cmp	r3, r1
 80176d0:	bf02      	ittt	eq
 80176d2:	6819      	ldreq	r1, [r3, #0]
 80176d4:	685b      	ldreq	r3, [r3, #4]
 80176d6:	1949      	addeq	r1, r1, r5
 80176d8:	6063      	str	r3, [r4, #4]
 80176da:	bf08      	it	eq
 80176dc:	6021      	streq	r1, [r4, #0]
 80176de:	6054      	str	r4, [r2, #4]
 80176e0:	e7c7      	b.n	8017672 <_free_r+0x26>
 80176e2:	b003      	add	sp, #12
 80176e4:	bd30      	pop	{r4, r5, pc}
 80176e6:	bf00      	nop
 80176e8:	20000240 	.word	0x20000240

080176ec <_malloc_r>:
 80176ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ee:	1ccd      	adds	r5, r1, #3
 80176f0:	4606      	mov	r6, r0
 80176f2:	f025 0503 	bic.w	r5, r5, #3
 80176f6:	3508      	adds	r5, #8
 80176f8:	2d0c      	cmp	r5, #12
 80176fa:	bf38      	it	cc
 80176fc:	250c      	movcc	r5, #12
 80176fe:	2d00      	cmp	r5, #0
 8017700:	db01      	blt.n	8017706 <_malloc_r+0x1a>
 8017702:	42a9      	cmp	r1, r5
 8017704:	d903      	bls.n	801770e <_malloc_r+0x22>
 8017706:	230c      	movs	r3, #12
 8017708:	6033      	str	r3, [r6, #0]
 801770a:	2000      	movs	r0, #0
 801770c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801770e:	f000 fbef 	bl	8017ef0 <__malloc_lock>
 8017712:	4921      	ldr	r1, [pc, #132]	; (8017798 <_malloc_r+0xac>)
 8017714:	680a      	ldr	r2, [r1, #0]
 8017716:	4614      	mov	r4, r2
 8017718:	b99c      	cbnz	r4, 8017742 <_malloc_r+0x56>
 801771a:	4f20      	ldr	r7, [pc, #128]	; (801779c <_malloc_r+0xb0>)
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	b923      	cbnz	r3, 801772a <_malloc_r+0x3e>
 8017720:	4621      	mov	r1, r4
 8017722:	4630      	mov	r0, r6
 8017724:	f000 fb2c 	bl	8017d80 <_sbrk_r>
 8017728:	6038      	str	r0, [r7, #0]
 801772a:	4629      	mov	r1, r5
 801772c:	4630      	mov	r0, r6
 801772e:	f000 fb27 	bl	8017d80 <_sbrk_r>
 8017732:	1c43      	adds	r3, r0, #1
 8017734:	d123      	bne.n	801777e <_malloc_r+0x92>
 8017736:	230c      	movs	r3, #12
 8017738:	4630      	mov	r0, r6
 801773a:	6033      	str	r3, [r6, #0]
 801773c:	f000 fbde 	bl	8017efc <__malloc_unlock>
 8017740:	e7e3      	b.n	801770a <_malloc_r+0x1e>
 8017742:	6823      	ldr	r3, [r4, #0]
 8017744:	1b5b      	subs	r3, r3, r5
 8017746:	d417      	bmi.n	8017778 <_malloc_r+0x8c>
 8017748:	2b0b      	cmp	r3, #11
 801774a:	d903      	bls.n	8017754 <_malloc_r+0x68>
 801774c:	6023      	str	r3, [r4, #0]
 801774e:	441c      	add	r4, r3
 8017750:	6025      	str	r5, [r4, #0]
 8017752:	e004      	b.n	801775e <_malloc_r+0x72>
 8017754:	6863      	ldr	r3, [r4, #4]
 8017756:	42a2      	cmp	r2, r4
 8017758:	bf0c      	ite	eq
 801775a:	600b      	streq	r3, [r1, #0]
 801775c:	6053      	strne	r3, [r2, #4]
 801775e:	4630      	mov	r0, r6
 8017760:	f000 fbcc 	bl	8017efc <__malloc_unlock>
 8017764:	f104 000b 	add.w	r0, r4, #11
 8017768:	1d23      	adds	r3, r4, #4
 801776a:	f020 0007 	bic.w	r0, r0, #7
 801776e:	1ac2      	subs	r2, r0, r3
 8017770:	d0cc      	beq.n	801770c <_malloc_r+0x20>
 8017772:	1a1b      	subs	r3, r3, r0
 8017774:	50a3      	str	r3, [r4, r2]
 8017776:	e7c9      	b.n	801770c <_malloc_r+0x20>
 8017778:	4622      	mov	r2, r4
 801777a:	6864      	ldr	r4, [r4, #4]
 801777c:	e7cc      	b.n	8017718 <_malloc_r+0x2c>
 801777e:	1cc4      	adds	r4, r0, #3
 8017780:	f024 0403 	bic.w	r4, r4, #3
 8017784:	42a0      	cmp	r0, r4
 8017786:	d0e3      	beq.n	8017750 <_malloc_r+0x64>
 8017788:	1a21      	subs	r1, r4, r0
 801778a:	4630      	mov	r0, r6
 801778c:	f000 faf8 	bl	8017d80 <_sbrk_r>
 8017790:	3001      	adds	r0, #1
 8017792:	d1dd      	bne.n	8017750 <_malloc_r+0x64>
 8017794:	e7cf      	b.n	8017736 <_malloc_r+0x4a>
 8017796:	bf00      	nop
 8017798:	20000240 	.word	0x20000240
 801779c:	20000244 	.word	0x20000244

080177a0 <__sfputc_r>:
 80177a0:	6893      	ldr	r3, [r2, #8]
 80177a2:	3b01      	subs	r3, #1
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	6093      	str	r3, [r2, #8]
 80177a8:	b410      	push	{r4}
 80177aa:	da08      	bge.n	80177be <__sfputc_r+0x1e>
 80177ac:	6994      	ldr	r4, [r2, #24]
 80177ae:	42a3      	cmp	r3, r4
 80177b0:	db01      	blt.n	80177b6 <__sfputc_r+0x16>
 80177b2:	290a      	cmp	r1, #10
 80177b4:	d103      	bne.n	80177be <__sfputc_r+0x1e>
 80177b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177ba:	f7ff bc63 	b.w	8017084 <__swbuf_r>
 80177be:	6813      	ldr	r3, [r2, #0]
 80177c0:	1c58      	adds	r0, r3, #1
 80177c2:	6010      	str	r0, [r2, #0]
 80177c4:	4608      	mov	r0, r1
 80177c6:	7019      	strb	r1, [r3, #0]
 80177c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177cc:	4770      	bx	lr

080177ce <__sfputs_r>:
 80177ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177d0:	4606      	mov	r6, r0
 80177d2:	460f      	mov	r7, r1
 80177d4:	4614      	mov	r4, r2
 80177d6:	18d5      	adds	r5, r2, r3
 80177d8:	42ac      	cmp	r4, r5
 80177da:	d101      	bne.n	80177e0 <__sfputs_r+0x12>
 80177dc:	2000      	movs	r0, #0
 80177de:	e007      	b.n	80177f0 <__sfputs_r+0x22>
 80177e0:	463a      	mov	r2, r7
 80177e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177e6:	4630      	mov	r0, r6
 80177e8:	f7ff ffda 	bl	80177a0 <__sfputc_r>
 80177ec:	1c43      	adds	r3, r0, #1
 80177ee:	d1f3      	bne.n	80177d8 <__sfputs_r+0xa>
 80177f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080177f4 <_vfiprintf_r>:
 80177f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f8:	460d      	mov	r5, r1
 80177fa:	b09d      	sub	sp, #116	; 0x74
 80177fc:	4614      	mov	r4, r2
 80177fe:	4698      	mov	r8, r3
 8017800:	4606      	mov	r6, r0
 8017802:	b118      	cbz	r0, 801780c <_vfiprintf_r+0x18>
 8017804:	6983      	ldr	r3, [r0, #24]
 8017806:	b90b      	cbnz	r3, 801780c <_vfiprintf_r+0x18>
 8017808:	f7ff fe14 	bl	8017434 <__sinit>
 801780c:	4b89      	ldr	r3, [pc, #548]	; (8017a34 <_vfiprintf_r+0x240>)
 801780e:	429d      	cmp	r5, r3
 8017810:	d11b      	bne.n	801784a <_vfiprintf_r+0x56>
 8017812:	6875      	ldr	r5, [r6, #4]
 8017814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017816:	07d9      	lsls	r1, r3, #31
 8017818:	d405      	bmi.n	8017826 <_vfiprintf_r+0x32>
 801781a:	89ab      	ldrh	r3, [r5, #12]
 801781c:	059a      	lsls	r2, r3, #22
 801781e:	d402      	bmi.n	8017826 <_vfiprintf_r+0x32>
 8017820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017822:	f7ff fea5 	bl	8017570 <__retarget_lock_acquire_recursive>
 8017826:	89ab      	ldrh	r3, [r5, #12]
 8017828:	071b      	lsls	r3, r3, #28
 801782a:	d501      	bpl.n	8017830 <_vfiprintf_r+0x3c>
 801782c:	692b      	ldr	r3, [r5, #16]
 801782e:	b9eb      	cbnz	r3, 801786c <_vfiprintf_r+0x78>
 8017830:	4629      	mov	r1, r5
 8017832:	4630      	mov	r0, r6
 8017834:	f7ff fc78 	bl	8017128 <__swsetup_r>
 8017838:	b1c0      	cbz	r0, 801786c <_vfiprintf_r+0x78>
 801783a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801783c:	07dc      	lsls	r4, r3, #31
 801783e:	d50e      	bpl.n	801785e <_vfiprintf_r+0x6a>
 8017840:	f04f 30ff 	mov.w	r0, #4294967295
 8017844:	b01d      	add	sp, #116	; 0x74
 8017846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801784a:	4b7b      	ldr	r3, [pc, #492]	; (8017a38 <_vfiprintf_r+0x244>)
 801784c:	429d      	cmp	r5, r3
 801784e:	d101      	bne.n	8017854 <_vfiprintf_r+0x60>
 8017850:	68b5      	ldr	r5, [r6, #8]
 8017852:	e7df      	b.n	8017814 <_vfiprintf_r+0x20>
 8017854:	4b79      	ldr	r3, [pc, #484]	; (8017a3c <_vfiprintf_r+0x248>)
 8017856:	429d      	cmp	r5, r3
 8017858:	bf08      	it	eq
 801785a:	68f5      	ldreq	r5, [r6, #12]
 801785c:	e7da      	b.n	8017814 <_vfiprintf_r+0x20>
 801785e:	89ab      	ldrh	r3, [r5, #12]
 8017860:	0598      	lsls	r0, r3, #22
 8017862:	d4ed      	bmi.n	8017840 <_vfiprintf_r+0x4c>
 8017864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017866:	f7ff fe84 	bl	8017572 <__retarget_lock_release_recursive>
 801786a:	e7e9      	b.n	8017840 <_vfiprintf_r+0x4c>
 801786c:	2300      	movs	r3, #0
 801786e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017872:	f04f 0901 	mov.w	r9, #1
 8017876:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8017a40 <_vfiprintf_r+0x24c>
 801787a:	9309      	str	r3, [sp, #36]	; 0x24
 801787c:	2320      	movs	r3, #32
 801787e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017882:	2330      	movs	r3, #48	; 0x30
 8017884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017888:	4623      	mov	r3, r4
 801788a:	469a      	mov	sl, r3
 801788c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017890:	b10a      	cbz	r2, 8017896 <_vfiprintf_r+0xa2>
 8017892:	2a25      	cmp	r2, #37	; 0x25
 8017894:	d1f9      	bne.n	801788a <_vfiprintf_r+0x96>
 8017896:	ebba 0b04 	subs.w	fp, sl, r4
 801789a:	d00b      	beq.n	80178b4 <_vfiprintf_r+0xc0>
 801789c:	465b      	mov	r3, fp
 801789e:	4622      	mov	r2, r4
 80178a0:	4629      	mov	r1, r5
 80178a2:	4630      	mov	r0, r6
 80178a4:	f7ff ff93 	bl	80177ce <__sfputs_r>
 80178a8:	3001      	adds	r0, #1
 80178aa:	f000 80aa 	beq.w	8017a02 <_vfiprintf_r+0x20e>
 80178ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178b0:	445a      	add	r2, fp
 80178b2:	9209      	str	r2, [sp, #36]	; 0x24
 80178b4:	f89a 3000 	ldrb.w	r3, [sl]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	f000 80a2 	beq.w	8017a02 <_vfiprintf_r+0x20e>
 80178be:	2300      	movs	r3, #0
 80178c0:	f04f 32ff 	mov.w	r2, #4294967295
 80178c4:	f10a 0a01 	add.w	sl, sl, #1
 80178c8:	9304      	str	r3, [sp, #16]
 80178ca:	9307      	str	r3, [sp, #28]
 80178cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178d0:	931a      	str	r3, [sp, #104]	; 0x68
 80178d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178d6:	4654      	mov	r4, sl
 80178d8:	2205      	movs	r2, #5
 80178da:	4859      	ldr	r0, [pc, #356]	; (8017a40 <_vfiprintf_r+0x24c>)
 80178dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178e0:	f000 faf8 	bl	8017ed4 <memchr>
 80178e4:	9a04      	ldr	r2, [sp, #16]
 80178e6:	b9d8      	cbnz	r0, 8017920 <_vfiprintf_r+0x12c>
 80178e8:	06d1      	lsls	r1, r2, #27
 80178ea:	bf44      	itt	mi
 80178ec:	2320      	movmi	r3, #32
 80178ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80178f2:	0713      	lsls	r3, r2, #28
 80178f4:	bf44      	itt	mi
 80178f6:	232b      	movmi	r3, #43	; 0x2b
 80178f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80178fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017900:	2b2a      	cmp	r3, #42	; 0x2a
 8017902:	d015      	beq.n	8017930 <_vfiprintf_r+0x13c>
 8017904:	9a07      	ldr	r2, [sp, #28]
 8017906:	4654      	mov	r4, sl
 8017908:	2000      	movs	r0, #0
 801790a:	f04f 0c0a 	mov.w	ip, #10
 801790e:	4621      	mov	r1, r4
 8017910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017914:	3b30      	subs	r3, #48	; 0x30
 8017916:	2b09      	cmp	r3, #9
 8017918:	d94e      	bls.n	80179b8 <_vfiprintf_r+0x1c4>
 801791a:	b1b0      	cbz	r0, 801794a <_vfiprintf_r+0x156>
 801791c:	9207      	str	r2, [sp, #28]
 801791e:	e014      	b.n	801794a <_vfiprintf_r+0x156>
 8017920:	eba0 0308 	sub.w	r3, r0, r8
 8017924:	46a2      	mov	sl, r4
 8017926:	fa09 f303 	lsl.w	r3, r9, r3
 801792a:	4313      	orrs	r3, r2
 801792c:	9304      	str	r3, [sp, #16]
 801792e:	e7d2      	b.n	80178d6 <_vfiprintf_r+0xe2>
 8017930:	9b03      	ldr	r3, [sp, #12]
 8017932:	1d19      	adds	r1, r3, #4
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	2b00      	cmp	r3, #0
 8017938:	9103      	str	r1, [sp, #12]
 801793a:	bfbb      	ittet	lt
 801793c:	425b      	neglt	r3, r3
 801793e:	f042 0202 	orrlt.w	r2, r2, #2
 8017942:	9307      	strge	r3, [sp, #28]
 8017944:	9307      	strlt	r3, [sp, #28]
 8017946:	bfb8      	it	lt
 8017948:	9204      	strlt	r2, [sp, #16]
 801794a:	7823      	ldrb	r3, [r4, #0]
 801794c:	2b2e      	cmp	r3, #46	; 0x2e
 801794e:	d10c      	bne.n	801796a <_vfiprintf_r+0x176>
 8017950:	7863      	ldrb	r3, [r4, #1]
 8017952:	2b2a      	cmp	r3, #42	; 0x2a
 8017954:	d135      	bne.n	80179c2 <_vfiprintf_r+0x1ce>
 8017956:	9b03      	ldr	r3, [sp, #12]
 8017958:	3402      	adds	r4, #2
 801795a:	1d1a      	adds	r2, r3, #4
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	9203      	str	r2, [sp, #12]
 8017962:	bfb8      	it	lt
 8017964:	f04f 33ff 	movlt.w	r3, #4294967295
 8017968:	9305      	str	r3, [sp, #20]
 801796a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017a50 <_vfiprintf_r+0x25c>
 801796e:	2203      	movs	r2, #3
 8017970:	7821      	ldrb	r1, [r4, #0]
 8017972:	4650      	mov	r0, sl
 8017974:	f000 faae 	bl	8017ed4 <memchr>
 8017978:	b140      	cbz	r0, 801798c <_vfiprintf_r+0x198>
 801797a:	2340      	movs	r3, #64	; 0x40
 801797c:	eba0 000a 	sub.w	r0, r0, sl
 8017980:	3401      	adds	r4, #1
 8017982:	fa03 f000 	lsl.w	r0, r3, r0
 8017986:	9b04      	ldr	r3, [sp, #16]
 8017988:	4303      	orrs	r3, r0
 801798a:	9304      	str	r3, [sp, #16]
 801798c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017990:	2206      	movs	r2, #6
 8017992:	482c      	ldr	r0, [pc, #176]	; (8017a44 <_vfiprintf_r+0x250>)
 8017994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017998:	f000 fa9c 	bl	8017ed4 <memchr>
 801799c:	2800      	cmp	r0, #0
 801799e:	d03f      	beq.n	8017a20 <_vfiprintf_r+0x22c>
 80179a0:	4b29      	ldr	r3, [pc, #164]	; (8017a48 <_vfiprintf_r+0x254>)
 80179a2:	bb1b      	cbnz	r3, 80179ec <_vfiprintf_r+0x1f8>
 80179a4:	9b03      	ldr	r3, [sp, #12]
 80179a6:	3307      	adds	r3, #7
 80179a8:	f023 0307 	bic.w	r3, r3, #7
 80179ac:	3308      	adds	r3, #8
 80179ae:	9303      	str	r3, [sp, #12]
 80179b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179b2:	443b      	add	r3, r7
 80179b4:	9309      	str	r3, [sp, #36]	; 0x24
 80179b6:	e767      	b.n	8017888 <_vfiprintf_r+0x94>
 80179b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80179bc:	460c      	mov	r4, r1
 80179be:	2001      	movs	r0, #1
 80179c0:	e7a5      	b.n	801790e <_vfiprintf_r+0x11a>
 80179c2:	2300      	movs	r3, #0
 80179c4:	3401      	adds	r4, #1
 80179c6:	f04f 0c0a 	mov.w	ip, #10
 80179ca:	4619      	mov	r1, r3
 80179cc:	9305      	str	r3, [sp, #20]
 80179ce:	4620      	mov	r0, r4
 80179d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179d4:	3a30      	subs	r2, #48	; 0x30
 80179d6:	2a09      	cmp	r2, #9
 80179d8:	d903      	bls.n	80179e2 <_vfiprintf_r+0x1ee>
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d0c5      	beq.n	801796a <_vfiprintf_r+0x176>
 80179de:	9105      	str	r1, [sp, #20]
 80179e0:	e7c3      	b.n	801796a <_vfiprintf_r+0x176>
 80179e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80179e6:	4604      	mov	r4, r0
 80179e8:	2301      	movs	r3, #1
 80179ea:	e7f0      	b.n	80179ce <_vfiprintf_r+0x1da>
 80179ec:	ab03      	add	r3, sp, #12
 80179ee:	462a      	mov	r2, r5
 80179f0:	a904      	add	r1, sp, #16
 80179f2:	4630      	mov	r0, r6
 80179f4:	9300      	str	r3, [sp, #0]
 80179f6:	4b15      	ldr	r3, [pc, #84]	; (8017a4c <_vfiprintf_r+0x258>)
 80179f8:	e000      	b.n	80179fc <_vfiprintf_r+0x208>
 80179fa:	bf00      	nop
 80179fc:	4607      	mov	r7, r0
 80179fe:	1c78      	adds	r0, r7, #1
 8017a00:	d1d6      	bne.n	80179b0 <_vfiprintf_r+0x1bc>
 8017a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a04:	07d9      	lsls	r1, r3, #31
 8017a06:	d405      	bmi.n	8017a14 <_vfiprintf_r+0x220>
 8017a08:	89ab      	ldrh	r3, [r5, #12]
 8017a0a:	059a      	lsls	r2, r3, #22
 8017a0c:	d402      	bmi.n	8017a14 <_vfiprintf_r+0x220>
 8017a0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a10:	f7ff fdaf 	bl	8017572 <__retarget_lock_release_recursive>
 8017a14:	89ab      	ldrh	r3, [r5, #12]
 8017a16:	065b      	lsls	r3, r3, #25
 8017a18:	f53f af12 	bmi.w	8017840 <_vfiprintf_r+0x4c>
 8017a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a1e:	e711      	b.n	8017844 <_vfiprintf_r+0x50>
 8017a20:	ab03      	add	r3, sp, #12
 8017a22:	462a      	mov	r2, r5
 8017a24:	a904      	add	r1, sp, #16
 8017a26:	4630      	mov	r0, r6
 8017a28:	9300      	str	r3, [sp, #0]
 8017a2a:	4b08      	ldr	r3, [pc, #32]	; (8017a4c <_vfiprintf_r+0x258>)
 8017a2c:	f000 f882 	bl	8017b34 <_printf_i>
 8017a30:	e7e4      	b.n	80179fc <_vfiprintf_r+0x208>
 8017a32:	bf00      	nop
 8017a34:	080185b0 	.word	0x080185b0
 8017a38:	080185d0 	.word	0x080185d0
 8017a3c:	08018590 	.word	0x08018590
 8017a40:	080185f0 	.word	0x080185f0
 8017a44:	080185fa 	.word	0x080185fa
 8017a48:	00000000 	.word	0x00000000
 8017a4c:	080177cf 	.word	0x080177cf
 8017a50:	080185f6 	.word	0x080185f6

08017a54 <_printf_common>:
 8017a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a58:	4616      	mov	r6, r2
 8017a5a:	4699      	mov	r9, r3
 8017a5c:	688a      	ldr	r2, [r1, #8]
 8017a5e:	4607      	mov	r7, r0
 8017a60:	690b      	ldr	r3, [r1, #16]
 8017a62:	460c      	mov	r4, r1
 8017a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a68:	4293      	cmp	r3, r2
 8017a6a:	bfb8      	it	lt
 8017a6c:	4613      	movlt	r3, r2
 8017a6e:	6033      	str	r3, [r6, #0]
 8017a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a74:	b10a      	cbz	r2, 8017a7a <_printf_common+0x26>
 8017a76:	3301      	adds	r3, #1
 8017a78:	6033      	str	r3, [r6, #0]
 8017a7a:	6823      	ldr	r3, [r4, #0]
 8017a7c:	0699      	lsls	r1, r3, #26
 8017a7e:	bf42      	ittt	mi
 8017a80:	6833      	ldrmi	r3, [r6, #0]
 8017a82:	3302      	addmi	r3, #2
 8017a84:	6033      	strmi	r3, [r6, #0]
 8017a86:	6825      	ldr	r5, [r4, #0]
 8017a88:	f015 0506 	ands.w	r5, r5, #6
 8017a8c:	d106      	bne.n	8017a9c <_printf_common+0x48>
 8017a8e:	f104 0a19 	add.w	sl, r4, #25
 8017a92:	68e3      	ldr	r3, [r4, #12]
 8017a94:	6832      	ldr	r2, [r6, #0]
 8017a96:	1a9b      	subs	r3, r3, r2
 8017a98:	42ab      	cmp	r3, r5
 8017a9a:	dc29      	bgt.n	8017af0 <_printf_common+0x9c>
 8017a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017aa0:	1e13      	subs	r3, r2, #0
 8017aa2:	6822      	ldr	r2, [r4, #0]
 8017aa4:	bf18      	it	ne
 8017aa6:	2301      	movne	r3, #1
 8017aa8:	0692      	lsls	r2, r2, #26
 8017aaa:	d42e      	bmi.n	8017b0a <_printf_common+0xb6>
 8017aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ab0:	4649      	mov	r1, r9
 8017ab2:	4638      	mov	r0, r7
 8017ab4:	47c0      	blx	r8
 8017ab6:	3001      	adds	r0, #1
 8017ab8:	d021      	beq.n	8017afe <_printf_common+0xaa>
 8017aba:	6823      	ldr	r3, [r4, #0]
 8017abc:	341a      	adds	r4, #26
 8017abe:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8017ac2:	f003 0306 	and.w	r3, r3, #6
 8017ac6:	6832      	ldr	r2, [r6, #0]
 8017ac8:	2600      	movs	r6, #0
 8017aca:	2b04      	cmp	r3, #4
 8017acc:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8017ad0:	bf08      	it	eq
 8017ad2:	1aad      	subeq	r5, r5, r2
 8017ad4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8017ad8:	bf14      	ite	ne
 8017ada:	2500      	movne	r5, #0
 8017adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ae0:	4293      	cmp	r3, r2
 8017ae2:	bfc4      	itt	gt
 8017ae4:	1a9b      	subgt	r3, r3, r2
 8017ae6:	18ed      	addgt	r5, r5, r3
 8017ae8:	42b5      	cmp	r5, r6
 8017aea:	d11a      	bne.n	8017b22 <_printf_common+0xce>
 8017aec:	2000      	movs	r0, #0
 8017aee:	e008      	b.n	8017b02 <_printf_common+0xae>
 8017af0:	2301      	movs	r3, #1
 8017af2:	4652      	mov	r2, sl
 8017af4:	4649      	mov	r1, r9
 8017af6:	4638      	mov	r0, r7
 8017af8:	47c0      	blx	r8
 8017afa:	3001      	adds	r0, #1
 8017afc:	d103      	bne.n	8017b06 <_printf_common+0xb2>
 8017afe:	f04f 30ff 	mov.w	r0, #4294967295
 8017b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b06:	3501      	adds	r5, #1
 8017b08:	e7c3      	b.n	8017a92 <_printf_common+0x3e>
 8017b0a:	18e1      	adds	r1, r4, r3
 8017b0c:	1c5a      	adds	r2, r3, #1
 8017b0e:	2030      	movs	r0, #48	; 0x30
 8017b10:	3302      	adds	r3, #2
 8017b12:	4422      	add	r2, r4
 8017b14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b20:	e7c4      	b.n	8017aac <_printf_common+0x58>
 8017b22:	2301      	movs	r3, #1
 8017b24:	4622      	mov	r2, r4
 8017b26:	4649      	mov	r1, r9
 8017b28:	4638      	mov	r0, r7
 8017b2a:	47c0      	blx	r8
 8017b2c:	3001      	adds	r0, #1
 8017b2e:	d0e6      	beq.n	8017afe <_printf_common+0xaa>
 8017b30:	3601      	adds	r6, #1
 8017b32:	e7d9      	b.n	8017ae8 <_printf_common+0x94>

08017b34 <_printf_i>:
 8017b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b38:	460c      	mov	r4, r1
 8017b3a:	4691      	mov	r9, r2
 8017b3c:	4680      	mov	r8, r0
 8017b3e:	469a      	mov	sl, r3
 8017b40:	7e27      	ldrb	r7, [r4, #24]
 8017b42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b48:	2f78      	cmp	r7, #120	; 0x78
 8017b4a:	d807      	bhi.n	8017b5c <_printf_i+0x28>
 8017b4c:	2f62      	cmp	r7, #98	; 0x62
 8017b4e:	d80a      	bhi.n	8017b66 <_printf_i+0x32>
 8017b50:	2f00      	cmp	r7, #0
 8017b52:	f000 80d8 	beq.w	8017d06 <_printf_i+0x1d2>
 8017b56:	2f58      	cmp	r7, #88	; 0x58
 8017b58:	f000 80a3 	beq.w	8017ca2 <_printf_i+0x16e>
 8017b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b64:	e03a      	b.n	8017bdc <_printf_i+0xa8>
 8017b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b6a:	2b15      	cmp	r3, #21
 8017b6c:	d8f6      	bhi.n	8017b5c <_printf_i+0x28>
 8017b6e:	a001      	add	r0, pc, #4	; (adr r0, 8017b74 <_printf_i+0x40>)
 8017b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017b74:	08017bcd 	.word	0x08017bcd
 8017b78:	08017be1 	.word	0x08017be1
 8017b7c:	08017b5d 	.word	0x08017b5d
 8017b80:	08017b5d 	.word	0x08017b5d
 8017b84:	08017b5d 	.word	0x08017b5d
 8017b88:	08017b5d 	.word	0x08017b5d
 8017b8c:	08017be1 	.word	0x08017be1
 8017b90:	08017b5d 	.word	0x08017b5d
 8017b94:	08017b5d 	.word	0x08017b5d
 8017b98:	08017b5d 	.word	0x08017b5d
 8017b9c:	08017b5d 	.word	0x08017b5d
 8017ba0:	08017ced 	.word	0x08017ced
 8017ba4:	08017c11 	.word	0x08017c11
 8017ba8:	08017ccf 	.word	0x08017ccf
 8017bac:	08017b5d 	.word	0x08017b5d
 8017bb0:	08017b5d 	.word	0x08017b5d
 8017bb4:	08017d0f 	.word	0x08017d0f
 8017bb8:	08017b5d 	.word	0x08017b5d
 8017bbc:	08017c11 	.word	0x08017c11
 8017bc0:	08017b5d 	.word	0x08017b5d
 8017bc4:	08017b5d 	.word	0x08017b5d
 8017bc8:	08017cd7 	.word	0x08017cd7
 8017bcc:	680b      	ldr	r3, [r1, #0]
 8017bce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017bd2:	1d1a      	adds	r2, r3, #4
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	600a      	str	r2, [r1, #0]
 8017bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017bdc:	2301      	movs	r3, #1
 8017bde:	e0a3      	b.n	8017d28 <_printf_i+0x1f4>
 8017be0:	6825      	ldr	r5, [r4, #0]
 8017be2:	6808      	ldr	r0, [r1, #0]
 8017be4:	062e      	lsls	r6, r5, #24
 8017be6:	f100 0304 	add.w	r3, r0, #4
 8017bea:	d50a      	bpl.n	8017c02 <_printf_i+0xce>
 8017bec:	6805      	ldr	r5, [r0, #0]
 8017bee:	600b      	str	r3, [r1, #0]
 8017bf0:	2d00      	cmp	r5, #0
 8017bf2:	da03      	bge.n	8017bfc <_printf_i+0xc8>
 8017bf4:	232d      	movs	r3, #45	; 0x2d
 8017bf6:	426d      	negs	r5, r5
 8017bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bfc:	485e      	ldr	r0, [pc, #376]	; (8017d78 <_printf_i+0x244>)
 8017bfe:	230a      	movs	r3, #10
 8017c00:	e019      	b.n	8017c36 <_printf_i+0x102>
 8017c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017c06:	6805      	ldr	r5, [r0, #0]
 8017c08:	600b      	str	r3, [r1, #0]
 8017c0a:	bf18      	it	ne
 8017c0c:	b22d      	sxthne	r5, r5
 8017c0e:	e7ef      	b.n	8017bf0 <_printf_i+0xbc>
 8017c10:	680b      	ldr	r3, [r1, #0]
 8017c12:	6825      	ldr	r5, [r4, #0]
 8017c14:	1d18      	adds	r0, r3, #4
 8017c16:	6008      	str	r0, [r1, #0]
 8017c18:	0628      	lsls	r0, r5, #24
 8017c1a:	d501      	bpl.n	8017c20 <_printf_i+0xec>
 8017c1c:	681d      	ldr	r5, [r3, #0]
 8017c1e:	e002      	b.n	8017c26 <_printf_i+0xf2>
 8017c20:	0669      	lsls	r1, r5, #25
 8017c22:	d5fb      	bpl.n	8017c1c <_printf_i+0xe8>
 8017c24:	881d      	ldrh	r5, [r3, #0]
 8017c26:	2f6f      	cmp	r7, #111	; 0x6f
 8017c28:	4853      	ldr	r0, [pc, #332]	; (8017d78 <_printf_i+0x244>)
 8017c2a:	bf0c      	ite	eq
 8017c2c:	2308      	moveq	r3, #8
 8017c2e:	230a      	movne	r3, #10
 8017c30:	2100      	movs	r1, #0
 8017c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017c36:	6866      	ldr	r6, [r4, #4]
 8017c38:	2e00      	cmp	r6, #0
 8017c3a:	60a6      	str	r6, [r4, #8]
 8017c3c:	bfa2      	ittt	ge
 8017c3e:	6821      	ldrge	r1, [r4, #0]
 8017c40:	f021 0104 	bicge.w	r1, r1, #4
 8017c44:	6021      	strge	r1, [r4, #0]
 8017c46:	b90d      	cbnz	r5, 8017c4c <_printf_i+0x118>
 8017c48:	2e00      	cmp	r6, #0
 8017c4a:	d04d      	beq.n	8017ce8 <_printf_i+0x1b4>
 8017c4c:	4616      	mov	r6, r2
 8017c4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017c52:	fb03 5711 	mls	r7, r3, r1, r5
 8017c56:	5dc7      	ldrb	r7, [r0, r7]
 8017c58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017c5c:	462f      	mov	r7, r5
 8017c5e:	460d      	mov	r5, r1
 8017c60:	42bb      	cmp	r3, r7
 8017c62:	d9f4      	bls.n	8017c4e <_printf_i+0x11a>
 8017c64:	2b08      	cmp	r3, #8
 8017c66:	d10b      	bne.n	8017c80 <_printf_i+0x14c>
 8017c68:	6823      	ldr	r3, [r4, #0]
 8017c6a:	07df      	lsls	r7, r3, #31
 8017c6c:	d508      	bpl.n	8017c80 <_printf_i+0x14c>
 8017c6e:	6923      	ldr	r3, [r4, #16]
 8017c70:	6861      	ldr	r1, [r4, #4]
 8017c72:	4299      	cmp	r1, r3
 8017c74:	bfde      	ittt	le
 8017c76:	2330      	movle	r3, #48	; 0x30
 8017c78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017c7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017c80:	1b92      	subs	r2, r2, r6
 8017c82:	6122      	str	r2, [r4, #16]
 8017c84:	464b      	mov	r3, r9
 8017c86:	aa03      	add	r2, sp, #12
 8017c88:	4621      	mov	r1, r4
 8017c8a:	4640      	mov	r0, r8
 8017c8c:	f8cd a000 	str.w	sl, [sp]
 8017c90:	f7ff fee0 	bl	8017a54 <_printf_common>
 8017c94:	3001      	adds	r0, #1
 8017c96:	d14c      	bne.n	8017d32 <_printf_i+0x1fe>
 8017c98:	f04f 30ff 	mov.w	r0, #4294967295
 8017c9c:	b004      	add	sp, #16
 8017c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ca2:	4835      	ldr	r0, [pc, #212]	; (8017d78 <_printf_i+0x244>)
 8017ca4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017ca8:	6823      	ldr	r3, [r4, #0]
 8017caa:	680e      	ldr	r6, [r1, #0]
 8017cac:	061f      	lsls	r7, r3, #24
 8017cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8017cb2:	600e      	str	r6, [r1, #0]
 8017cb4:	d514      	bpl.n	8017ce0 <_printf_i+0x1ac>
 8017cb6:	07d9      	lsls	r1, r3, #31
 8017cb8:	bf44      	itt	mi
 8017cba:	f043 0320 	orrmi.w	r3, r3, #32
 8017cbe:	6023      	strmi	r3, [r4, #0]
 8017cc0:	b91d      	cbnz	r5, 8017cca <_printf_i+0x196>
 8017cc2:	6823      	ldr	r3, [r4, #0]
 8017cc4:	f023 0320 	bic.w	r3, r3, #32
 8017cc8:	6023      	str	r3, [r4, #0]
 8017cca:	2310      	movs	r3, #16
 8017ccc:	e7b0      	b.n	8017c30 <_printf_i+0xfc>
 8017cce:	6823      	ldr	r3, [r4, #0]
 8017cd0:	f043 0320 	orr.w	r3, r3, #32
 8017cd4:	6023      	str	r3, [r4, #0]
 8017cd6:	2378      	movs	r3, #120	; 0x78
 8017cd8:	4828      	ldr	r0, [pc, #160]	; (8017d7c <_printf_i+0x248>)
 8017cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017cde:	e7e3      	b.n	8017ca8 <_printf_i+0x174>
 8017ce0:	065e      	lsls	r6, r3, #25
 8017ce2:	bf48      	it	mi
 8017ce4:	b2ad      	uxthmi	r5, r5
 8017ce6:	e7e6      	b.n	8017cb6 <_printf_i+0x182>
 8017ce8:	4616      	mov	r6, r2
 8017cea:	e7bb      	b.n	8017c64 <_printf_i+0x130>
 8017cec:	680b      	ldr	r3, [r1, #0]
 8017cee:	6826      	ldr	r6, [r4, #0]
 8017cf0:	1d1d      	adds	r5, r3, #4
 8017cf2:	6960      	ldr	r0, [r4, #20]
 8017cf4:	600d      	str	r5, [r1, #0]
 8017cf6:	0635      	lsls	r5, r6, #24
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	d501      	bpl.n	8017d00 <_printf_i+0x1cc>
 8017cfc:	6018      	str	r0, [r3, #0]
 8017cfe:	e002      	b.n	8017d06 <_printf_i+0x1d2>
 8017d00:	0671      	lsls	r1, r6, #25
 8017d02:	d5fb      	bpl.n	8017cfc <_printf_i+0x1c8>
 8017d04:	8018      	strh	r0, [r3, #0]
 8017d06:	2300      	movs	r3, #0
 8017d08:	4616      	mov	r6, r2
 8017d0a:	6123      	str	r3, [r4, #16]
 8017d0c:	e7ba      	b.n	8017c84 <_printf_i+0x150>
 8017d0e:	680b      	ldr	r3, [r1, #0]
 8017d10:	1d1a      	adds	r2, r3, #4
 8017d12:	600a      	str	r2, [r1, #0]
 8017d14:	2100      	movs	r1, #0
 8017d16:	681e      	ldr	r6, [r3, #0]
 8017d18:	6862      	ldr	r2, [r4, #4]
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	f000 f8da 	bl	8017ed4 <memchr>
 8017d20:	b108      	cbz	r0, 8017d26 <_printf_i+0x1f2>
 8017d22:	1b80      	subs	r0, r0, r6
 8017d24:	6060      	str	r0, [r4, #4]
 8017d26:	6863      	ldr	r3, [r4, #4]
 8017d28:	6123      	str	r3, [r4, #16]
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d30:	e7a8      	b.n	8017c84 <_printf_i+0x150>
 8017d32:	6923      	ldr	r3, [r4, #16]
 8017d34:	4632      	mov	r2, r6
 8017d36:	4649      	mov	r1, r9
 8017d38:	4640      	mov	r0, r8
 8017d3a:	47d0      	blx	sl
 8017d3c:	3001      	adds	r0, #1
 8017d3e:	d0ab      	beq.n	8017c98 <_printf_i+0x164>
 8017d40:	6823      	ldr	r3, [r4, #0]
 8017d42:	079b      	lsls	r3, r3, #30
 8017d44:	d413      	bmi.n	8017d6e <_printf_i+0x23a>
 8017d46:	68e0      	ldr	r0, [r4, #12]
 8017d48:	9b03      	ldr	r3, [sp, #12]
 8017d4a:	4298      	cmp	r0, r3
 8017d4c:	bfb8      	it	lt
 8017d4e:	4618      	movlt	r0, r3
 8017d50:	e7a4      	b.n	8017c9c <_printf_i+0x168>
 8017d52:	2301      	movs	r3, #1
 8017d54:	4632      	mov	r2, r6
 8017d56:	4649      	mov	r1, r9
 8017d58:	4640      	mov	r0, r8
 8017d5a:	47d0      	blx	sl
 8017d5c:	3001      	adds	r0, #1
 8017d5e:	d09b      	beq.n	8017c98 <_printf_i+0x164>
 8017d60:	3501      	adds	r5, #1
 8017d62:	68e3      	ldr	r3, [r4, #12]
 8017d64:	9903      	ldr	r1, [sp, #12]
 8017d66:	1a5b      	subs	r3, r3, r1
 8017d68:	42ab      	cmp	r3, r5
 8017d6a:	dcf2      	bgt.n	8017d52 <_printf_i+0x21e>
 8017d6c:	e7eb      	b.n	8017d46 <_printf_i+0x212>
 8017d6e:	2500      	movs	r5, #0
 8017d70:	f104 0619 	add.w	r6, r4, #25
 8017d74:	e7f5      	b.n	8017d62 <_printf_i+0x22e>
 8017d76:	bf00      	nop
 8017d78:	08018601 	.word	0x08018601
 8017d7c:	08018612 	.word	0x08018612

08017d80 <_sbrk_r>:
 8017d80:	b538      	push	{r3, r4, r5, lr}
 8017d82:	2300      	movs	r3, #0
 8017d84:	4d05      	ldr	r5, [pc, #20]	; (8017d9c <_sbrk_r+0x1c>)
 8017d86:	4604      	mov	r4, r0
 8017d88:	4608      	mov	r0, r1
 8017d8a:	602b      	str	r3, [r5, #0]
 8017d8c:	f7fd ffa0 	bl	8015cd0 <_sbrk>
 8017d90:	1c43      	adds	r3, r0, #1
 8017d92:	d102      	bne.n	8017d9a <_sbrk_r+0x1a>
 8017d94:	682b      	ldr	r3, [r5, #0]
 8017d96:	b103      	cbz	r3, 8017d9a <_sbrk_r+0x1a>
 8017d98:	6023      	str	r3, [r4, #0]
 8017d9a:	bd38      	pop	{r3, r4, r5, pc}
 8017d9c:	2000025c 	.word	0x2000025c

08017da0 <__sread>:
 8017da0:	b510      	push	{r4, lr}
 8017da2:	460c      	mov	r4, r1
 8017da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017da8:	f000 f8ae 	bl	8017f08 <_read_r>
 8017dac:	2800      	cmp	r0, #0
 8017dae:	bfab      	itete	ge
 8017db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017db2:	89a3      	ldrhlt	r3, [r4, #12]
 8017db4:	181b      	addge	r3, r3, r0
 8017db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017dba:	bfac      	ite	ge
 8017dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8017dbe:	81a3      	strhlt	r3, [r4, #12]
 8017dc0:	bd10      	pop	{r4, pc}

08017dc2 <__swrite>:
 8017dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dc6:	461f      	mov	r7, r3
 8017dc8:	898b      	ldrh	r3, [r1, #12]
 8017dca:	4605      	mov	r5, r0
 8017dcc:	460c      	mov	r4, r1
 8017dce:	05db      	lsls	r3, r3, #23
 8017dd0:	4616      	mov	r6, r2
 8017dd2:	d505      	bpl.n	8017de0 <__swrite+0x1e>
 8017dd4:	2302      	movs	r3, #2
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ddc:	f000 f868 	bl	8017eb0 <_lseek_r>
 8017de0:	89a3      	ldrh	r3, [r4, #12]
 8017de2:	4632      	mov	r2, r6
 8017de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017de8:	4628      	mov	r0, r5
 8017dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017dee:	81a3      	strh	r3, [r4, #12]
 8017df0:	463b      	mov	r3, r7
 8017df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017df6:	f000 b817 	b.w	8017e28 <_write_r>

08017dfa <__sseek>:
 8017dfa:	b510      	push	{r4, lr}
 8017dfc:	460c      	mov	r4, r1
 8017dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e02:	f000 f855 	bl	8017eb0 <_lseek_r>
 8017e06:	1c43      	adds	r3, r0, #1
 8017e08:	89a3      	ldrh	r3, [r4, #12]
 8017e0a:	bf15      	itete	ne
 8017e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017e16:	81a3      	strheq	r3, [r4, #12]
 8017e18:	bf18      	it	ne
 8017e1a:	81a3      	strhne	r3, [r4, #12]
 8017e1c:	bd10      	pop	{r4, pc}

08017e1e <__sclose>:
 8017e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e22:	f000 b813 	b.w	8017e4c <_close_r>
	...

08017e28 <_write_r>:
 8017e28:	b538      	push	{r3, r4, r5, lr}
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	4d06      	ldr	r5, [pc, #24]	; (8017e48 <_write_r+0x20>)
 8017e2e:	4608      	mov	r0, r1
 8017e30:	4611      	mov	r1, r2
 8017e32:	2200      	movs	r2, #0
 8017e34:	602a      	str	r2, [r5, #0]
 8017e36:	461a      	mov	r2, r3
 8017e38:	f7fd fe62 	bl	8015b00 <_write>
 8017e3c:	1c43      	adds	r3, r0, #1
 8017e3e:	d102      	bne.n	8017e46 <_write_r+0x1e>
 8017e40:	682b      	ldr	r3, [r5, #0]
 8017e42:	b103      	cbz	r3, 8017e46 <_write_r+0x1e>
 8017e44:	6023      	str	r3, [r4, #0]
 8017e46:	bd38      	pop	{r3, r4, r5, pc}
 8017e48:	2000025c 	.word	0x2000025c

08017e4c <_close_r>:
 8017e4c:	b538      	push	{r3, r4, r5, lr}
 8017e4e:	2300      	movs	r3, #0
 8017e50:	4d05      	ldr	r5, [pc, #20]	; (8017e68 <_close_r+0x1c>)
 8017e52:	4604      	mov	r4, r0
 8017e54:	4608      	mov	r0, r1
 8017e56:	602b      	str	r3, [r5, #0]
 8017e58:	f7fd ff2e 	bl	8015cb8 <_close>
 8017e5c:	1c43      	adds	r3, r0, #1
 8017e5e:	d102      	bne.n	8017e66 <_close_r+0x1a>
 8017e60:	682b      	ldr	r3, [r5, #0]
 8017e62:	b103      	cbz	r3, 8017e66 <_close_r+0x1a>
 8017e64:	6023      	str	r3, [r4, #0]
 8017e66:	bd38      	pop	{r3, r4, r5, pc}
 8017e68:	2000025c 	.word	0x2000025c

08017e6c <_fstat_r>:
 8017e6c:	b538      	push	{r3, r4, r5, lr}
 8017e6e:	2300      	movs	r3, #0
 8017e70:	4d06      	ldr	r5, [pc, #24]	; (8017e8c <_fstat_r+0x20>)
 8017e72:	4604      	mov	r4, r0
 8017e74:	4608      	mov	r0, r1
 8017e76:	4611      	mov	r1, r2
 8017e78:	602b      	str	r3, [r5, #0]
 8017e7a:	f7fd ff20 	bl	8015cbe <_fstat>
 8017e7e:	1c43      	adds	r3, r0, #1
 8017e80:	d102      	bne.n	8017e88 <_fstat_r+0x1c>
 8017e82:	682b      	ldr	r3, [r5, #0]
 8017e84:	b103      	cbz	r3, 8017e88 <_fstat_r+0x1c>
 8017e86:	6023      	str	r3, [r4, #0]
 8017e88:	bd38      	pop	{r3, r4, r5, pc}
 8017e8a:	bf00      	nop
 8017e8c:	2000025c 	.word	0x2000025c

08017e90 <_isatty_r>:
 8017e90:	b538      	push	{r3, r4, r5, lr}
 8017e92:	2300      	movs	r3, #0
 8017e94:	4d05      	ldr	r5, [pc, #20]	; (8017eac <_isatty_r+0x1c>)
 8017e96:	4604      	mov	r4, r0
 8017e98:	4608      	mov	r0, r1
 8017e9a:	602b      	str	r3, [r5, #0]
 8017e9c:	f7fd ff14 	bl	8015cc8 <_isatty>
 8017ea0:	1c43      	adds	r3, r0, #1
 8017ea2:	d102      	bne.n	8017eaa <_isatty_r+0x1a>
 8017ea4:	682b      	ldr	r3, [r5, #0]
 8017ea6:	b103      	cbz	r3, 8017eaa <_isatty_r+0x1a>
 8017ea8:	6023      	str	r3, [r4, #0]
 8017eaa:	bd38      	pop	{r3, r4, r5, pc}
 8017eac:	2000025c 	.word	0x2000025c

08017eb0 <_lseek_r>:
 8017eb0:	b538      	push	{r3, r4, r5, lr}
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	4d06      	ldr	r5, [pc, #24]	; (8017ed0 <_lseek_r+0x20>)
 8017eb6:	4608      	mov	r0, r1
 8017eb8:	4611      	mov	r1, r2
 8017eba:	2200      	movs	r2, #0
 8017ebc:	602a      	str	r2, [r5, #0]
 8017ebe:	461a      	mov	r2, r3
 8017ec0:	f7fd ff04 	bl	8015ccc <_lseek>
 8017ec4:	1c43      	adds	r3, r0, #1
 8017ec6:	d102      	bne.n	8017ece <_lseek_r+0x1e>
 8017ec8:	682b      	ldr	r3, [r5, #0]
 8017eca:	b103      	cbz	r3, 8017ece <_lseek_r+0x1e>
 8017ecc:	6023      	str	r3, [r4, #0]
 8017ece:	bd38      	pop	{r3, r4, r5, pc}
 8017ed0:	2000025c 	.word	0x2000025c

08017ed4 <memchr>:
 8017ed4:	b2c9      	uxtb	r1, r1
 8017ed6:	4402      	add	r2, r0
 8017ed8:	b510      	push	{r4, lr}
 8017eda:	4290      	cmp	r0, r2
 8017edc:	4603      	mov	r3, r0
 8017ede:	d101      	bne.n	8017ee4 <memchr+0x10>
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	e003      	b.n	8017eec <memchr+0x18>
 8017ee4:	781c      	ldrb	r4, [r3, #0]
 8017ee6:	3001      	adds	r0, #1
 8017ee8:	428c      	cmp	r4, r1
 8017eea:	d1f6      	bne.n	8017eda <memchr+0x6>
 8017eec:	4618      	mov	r0, r3
 8017eee:	bd10      	pop	{r4, pc}

08017ef0 <__malloc_lock>:
 8017ef0:	4801      	ldr	r0, [pc, #4]	; (8017ef8 <__malloc_lock+0x8>)
 8017ef2:	f7ff bb3d 	b.w	8017570 <__retarget_lock_acquire_recursive>
 8017ef6:	bf00      	nop
 8017ef8:	20000254 	.word	0x20000254

08017efc <__malloc_unlock>:
 8017efc:	4801      	ldr	r0, [pc, #4]	; (8017f04 <__malloc_unlock+0x8>)
 8017efe:	f7ff bb38 	b.w	8017572 <__retarget_lock_release_recursive>
 8017f02:	bf00      	nop
 8017f04:	20000254 	.word	0x20000254

08017f08 <_read_r>:
 8017f08:	b538      	push	{r3, r4, r5, lr}
 8017f0a:	4604      	mov	r4, r0
 8017f0c:	4d06      	ldr	r5, [pc, #24]	; (8017f28 <_read_r+0x20>)
 8017f0e:	4608      	mov	r0, r1
 8017f10:	4611      	mov	r1, r2
 8017f12:	2200      	movs	r2, #0
 8017f14:	602a      	str	r2, [r5, #0]
 8017f16:	461a      	mov	r2, r3
 8017f18:	f7fd fec1 	bl	8015c9e <_read>
 8017f1c:	1c43      	adds	r3, r0, #1
 8017f1e:	d102      	bne.n	8017f26 <_read_r+0x1e>
 8017f20:	682b      	ldr	r3, [r5, #0]
 8017f22:	b103      	cbz	r3, 8017f26 <_read_r+0x1e>
 8017f24:	6023      	str	r3, [r4, #0]
 8017f26:	bd38      	pop	{r3, r4, r5, pc}
 8017f28:	2000025c 	.word	0x2000025c

08017f2c <_init>:
 8017f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f2e:	bf00      	nop
 8017f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f32:	bc08      	pop	{r3}
 8017f34:	469e      	mov	lr, r3
 8017f36:	4770      	bx	lr

08017f38 <_fini>:
 8017f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f3a:	bf00      	nop
 8017f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f3e:	bc08      	pop	{r3}
 8017f40:	469e      	mov	lr, r3
 8017f42:	4770      	bx	lr
 8017f44:	0000      	movs	r0, r0
	...

08017f48 <__SECURE_SystemCoreClockUpdate_veneer>:
 8017f48:	b401      	push	{r0}
 8017f4a:	4802      	ldr	r0, [pc, #8]	; (8017f54 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8017f4c:	4684      	mov	ip, r0
 8017f4e:	bc01      	pop	{r0}
 8017f50:	4760      	bx	ip
 8017f52:	bf00      	nop
 8017f54:	0c012c81 	.word	0x0c012c81

08017f58 <__SECURE_GPIO_Toggle_veneer>:
 8017f58:	b401      	push	{r0}
 8017f5a:	4802      	ldr	r0, [pc, #8]	; (8017f64 <__SECURE_GPIO_Toggle_veneer+0xc>)
 8017f5c:	4684      	mov	ip, r0
 8017f5e:	bc01      	pop	{r0}
 8017f60:	4760      	bx	ip
 8017f62:	bf00      	nop
 8017f64:	0c012c91 	.word	0x0c012c91

08017f68 <__SECURE_RegisterCallback_veneer>:
 8017f68:	b401      	push	{r0}
 8017f6a:	4802      	ldr	r0, [pc, #8]	; (8017f74 <__SECURE_RegisterCallback_veneer+0xc>)
 8017f6c:	4684      	mov	ip, r0
 8017f6e:	bc01      	pop	{r0}
 8017f70:	4760      	bx	ip
 8017f72:	bf00      	nop
 8017f74:	0c012c89 	.word	0x0c012c89
