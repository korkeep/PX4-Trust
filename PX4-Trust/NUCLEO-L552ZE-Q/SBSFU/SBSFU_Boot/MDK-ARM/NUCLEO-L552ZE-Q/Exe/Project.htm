<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [NUCLEO-L552ZE-Q\Exe\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image NUCLEO-L552ZE-Q\Exe\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Thu Jun  3 11:30:41 2021
<BR><P>
<H3>Maximum Stack Usage =       4104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; boot_go &rArr; context_boot_go &rArr; bootutil_img_validate &rArr; bootutil_verify_sig &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[53]">COMP_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[55]">CRS_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[31]">DAC_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[6c]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[6d]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[6e]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[6f]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel8_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[59]">DMA2_Channel1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel3_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel4_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel5_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[60]">DMA2_Channel8_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[26]">DMAMUX1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[27]">DMAMUX1_IRQHandler_S</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[20]">EXTI10_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[21]">EXTI11_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[22]">EXTI12_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[23]">EXTI13_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[24]">EXTI14_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[25]">EXTI15_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[1b]">EXTI5_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[1c]">EXTI6_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[1d]">EXTI7_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[1e]">EXTI8_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[1f]">EXTI9_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[32]">FDCAN1_IT0_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[33]">FDCAN1_IT1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler_S</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[56]">FMC_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[67]">FPU_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[89]">Flash_EraseChip</a> from low_level_flash.o(.text.Flash_EraseChip) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[88]">Flash_EraseSector</a> from low_level_flash.o(.text.Flash_EraseSector) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[82]">Flash_GetCapabilities</a> from low_level_flash.o(.text.Flash_GetCapabilities) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[8b]">Flash_GetInfo</a> from low_level_flash.o(.text.Flash_GetInfo) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[8a]">Flash_GetStatus</a> from low_level_flash.o(.text.Flash_GetStatus) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[81]">Flash_GetVersion</a> from low_level_flash.o(.text.Flash_GetVersion) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[83]">Flash_Initialize</a> from low_level_flash.o(.text.Flash_Initialize) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[85]">Flash_PowerControl</a> from low_level_flash.o(.text.Flash_PowerControl) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[87]">Flash_ProgramData</a> from low_level_flash.o(.text.Flash_ProgramData) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[86]">Flash_ReadData</a> from low_level_flash.o(.text.Flash_ReadData) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[84]">Flash_Uninitialize</a> from low_level_flash.o(.text.Flash_Uninitialize) referenced from low_level_flash.o(.rodata.TFM_Driver_FLASH0)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[6a]">I2C4_ER_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[6b]">I2C4_EV_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[71]">ICACHE_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[4e]">LPTIM1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[4f]">LPTIM2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[68]">LPTIM3_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[4d]">LPUART1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from low_level_flash.o(.text.NMI_Handler) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[57]">OCTOSPI1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[72]">OTFDEC1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler_S</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[66]">RNG_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler_S</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[63]">SAI1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[64]">SAI2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[58]">SDMMC1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[13]">SERR_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[69]">SPI3_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[73]">SystemInit</a> from system_stm32l5xx.o(.text.SystemInit) referenced from startup_stm32l5xx_bl2.o(.text)
 <LI><a href="#[f]">TAMP_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[10]">TAMP_IRQHandler_S</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[50]">TIM15_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[51]">TIM16_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[52]">TIM17_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[65]">TSC_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[77]">UART_RxISR_16BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[77]">UART_RxISR_16BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[78]">UART_RxISR_16BIT_FIFOEN</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[7a]">UART_RxISR_8BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[79]">UART_RxISR_8BIT_FIFOEN</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[70]">UCPD1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[96]">USART0_Control</a> from low_level_com.o(.text.USART0_Control) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[99]">USART0_GetModemStatus</a> from low_level_com.o(.text.USART0_GetModemStatus) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[95]">USART0_GetRxCount</a> from low_level_com.o(.text.USART0_GetRxCount) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[97]">USART0_GetStatus</a> from low_level_com.o(.text.USART0_GetStatus) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[94]">USART0_GetTxCount</a> from low_level_com.o(.text.USART0_GetTxCount) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[8e]">USART0_Initialize</a> from low_level_com.o(.text.USART0_Initialize) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[90]">USART0_PowerControl</a> from low_level_com.o(.text.USART0_PowerControl) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[92]">USART0_Receive</a> from low_level_com.o(.text.USART0_Receive) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[91]">USART0_Send</a> from low_level_com.o(.text.USART0_Send) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[98]">USART0_SetModemControl</a> from low_level_com.o(.text.USART0_SetModemControl) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[93]">USART0_Transfer</a> from low_level_com.o(.text.USART0_Transfer) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[8f]">USART0_Uninitialize</a> from low_level_com.o(.text.USART0_Uninitialize) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[4a]">USART3_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[8d]">USART_GetCapabilities</a> from low_level_com.o(.text.USART_GetCapabilities) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[8c]">USART_GetVersion</a> from low_level_com.o(.text.USART_GetVersion) referenced from low_level_com.o(.rodata.TFM_Driver_USART0)
 <LI><a href="#[54]">USB_FS_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32l5xx_bl2.o(.text) referenced from startup_stm32l5xx_bl2.o(RESET)
 <LI><a href="#[74]">__main</a> from __main.o(!!!main) referenced from startup_stm32l5xx_bl2.o(.text)
 <LI><a href="#[76]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7d]">buffer_alloc_calloc</a> from memory_buffer_alloc.o(.text.buffer_alloc_calloc) referenced from memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init)
 <LI><a href="#[7e]">buffer_alloc_free</a> from memory_buffer_alloc.o(.text.buffer_alloc_free) referenced from memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init)
 <LI><a href="#[75]">fputc</a> from uart_stdout.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[7f]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from bignum.o(.text.mbedtls_mpi_div_mpi)
 <LI><a href="#[7f]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from bignum.o(.text.mbedtls_mpi_exp_mod)
 <LI><a href="#[7f]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from bignum.o(.text.mbedtls_mpi_inv_mod)
 <LI><a href="#[7f]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from rsa.o(.text.mbedtls_rsa_free)
 <LI><a href="#[7f]">mbedtls_mpi_free</a> from bignum.o(.text.mbedtls_mpi_free) referenced from rsa.o(.text.mbedtls_rsa_private)
 <LI><a href="#[80]">mbedtls_mpi_init</a> from bignum.o(.text.mbedtls_mpi_init) referenced from rsa.o(.text.mbedtls_rsa_private)
 <LI><a href="#[7b]">mbedtls_sha256_update_ret</a> from sha256_alt.o(.text.mbedtls_sha256_update_ret) referenced from image_rsa.o(.text.bootutil_verify_sig)
 <LI><a href="#[a4]">memset</a> from memset.o(.text) referenced from platform_util.o(.rodata.memset_func)
 <LI><a href="#[a5]">platform_calloc_uninit</a> from platform.o(.text.platform_calloc_uninit) referenced from platform.o(.data..L_MergedGlobals)
 <LI><a href="#[a7]">platform_exit_uninit</a> from platform.o(.text.platform_exit_uninit) referenced from platform.o(.data.mbedtls_exit)
 <LI><a href="#[a6]">platform_free_uninit</a> from platform.o(.text.platform_free_uninit) referenced from platform.o(.data..L_MergedGlobals)
 <LI><a href="#[7c]">puts</a> from puts.o(.text) referenced from loader.o(.text.context_boot_go)
 <LI><a href="#[a0]">sha224_clone_wrap</a> from md_wrap.o(.text.sha224_clone_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[a0]">sha224_clone_wrap</a> from md_wrap.o(.text.sha224_clone_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[9e]">sha224_ctx_alloc</a> from md_wrap.o(.text.sha224_ctx_alloc) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[9e]">sha224_ctx_alloc</a> from md_wrap.o(.text.sha224_ctx_alloc) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[9f]">sha224_ctx_free</a> from md_wrap.o(.text.sha224_ctx_free) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[9f]">sha224_ctx_free</a> from md_wrap.o(.text.sha224_ctx_free) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[9c]">sha224_finish_wrap</a> from md_wrap.o(.text.sha224_finish_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[9c]">sha224_finish_wrap</a> from md_wrap.o(.text.sha224_finish_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[a1]">sha224_process_wrap</a> from md_wrap.o(.text.sha224_process_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[a1]">sha224_process_wrap</a> from md_wrap.o(.text.sha224_process_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[9a]">sha224_starts_wrap</a> from md_wrap.o(.text.sha224_starts_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[9b]">sha224_update_wrap</a> from md_wrap.o(.text.sha224_update_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[9b]">sha224_update_wrap</a> from md_wrap.o(.text.sha224_update_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[9d]">sha224_wrap</a> from md_wrap.o(.text.sha224_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha224_info)
 <LI><a href="#[a2]">sha256_starts_wrap</a> from md_wrap.o(.text.sha256_starts_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
 <LI><a href="#[a3]">sha256_wrap</a> from md_wrap.o(.text.sha256_wrap) referenced from md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[74]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[aa]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1d0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1d1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ab]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1d2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ac]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ae]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[af]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b1]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1d8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1d9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1da]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1db]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1dc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1dd]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1df]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1e8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1e9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1ea]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1eb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1ec]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1ed]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1ee]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1ef]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1f0]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[b5]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b7]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 4104 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; boot_go &rArr; context_boot_go &rArr; bootutil_img_validate &rArr; bootutil_verify_sig &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1f2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ce]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ba]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1f3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMAMUX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMAMUX1_IRQHandler_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_IRQHandler_S</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l5xx_bl2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[1f4]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_base
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_get_sectors
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_copy_region
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_set_nv_counter
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_init_nv_counter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
</UL>

<P><STRONG><a name="[c0]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ca]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ad]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[b0]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1f5]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_id_to_multi_image_slot
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_init_nv_counter
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumper
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loader.o(.text.context_boot_go)
</UL>
<P><STRONG><a name="[d6]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadData
</UL>

<P><STRONG><a name="[c3]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1f6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1f7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.rodata.memset_func)
</UL>
<P><STRONG><a name="[c6]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadData
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
</UL>

<P><STRONG><a name="[c7]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c5]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[c2]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c9]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[cb]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b2]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[bf]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[cc]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[cd]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1fc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[da]"></a>FLASH_PageErase</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l5xx_hal_flash_ex.o(.text.FLASH_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[cf]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l5xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Initialize
</UL>

<P><STRONG><a name="[d7]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_init_nv_counter
</UL>

<P><STRONG><a name="[139]"></a>HAL_FLASHEx_ConfigPrivMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l5xx_hal_flash_ex.o(.text.HAL_FLASHEx_ConfigPrivMode))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_ApplyRunTimeProtections
</UL>

<P><STRONG><a name="[d3]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stm32l5xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; OUTLINED_FUNCTION_0 &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[13b]"></a>HAL_FLASHEx_OBGetConfig</STRONG> (Thumb, 284 bytes, Stack size 20 bytes, stm32l5xx_hal_flash_ex.o(.text.HAL_FLASHEx_OBGetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FLASHEx_OBGetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
</UL>

<P><STRONG><a name="[db]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 708 bytes, Stack size 64 bytes, stm32l5xx_hal_flash_ex.o(.text.HAL_FLASHEx_OBProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FLASHEx_OBProgram &rArr; OUTLINED_FUNCTION_0 &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
</UL>

<P><STRONG><a name="[d4]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[13d]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_OB_Launch))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
</UL>

<P><STRONG><a name="[13c]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
</UL>

<P><STRONG><a name="[d5]"></a>HAL_FLASH_Program</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
</UL>

<P><STRONG><a name="[d2]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[14e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Initialize
</UL>

<P><STRONG><a name="[175]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_GetTick</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, boot_hal.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_WaitForInvalidateComplete
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_WaitOnFlagUntilTimeout
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[de]"></a>HAL_HASHEx_SHA224_Accmlt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_hash_ex.o(.text.HAL_HASHEx_SHA224_Accmlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HASHEx_SHA224_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>

<P><STRONG><a name="[e0]"></a>HAL_HASHEx_SHA224_Accmlt_End</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l5xx_hal_hash_ex.o(.text.HAL_HASHEx_SHA224_Accmlt_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_HASHEx_SHA224_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>

<P><STRONG><a name="[e2]"></a>HAL_HASHEx_SHA256_Accmlt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_hash_ex.o(.text.HAL_HASHEx_SHA256_Accmlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>

<P><STRONG><a name="[e3]"></a>HAL_HASHEx_SHA256_Accmlt_End</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32l5xx_hal_hash_ex.o(.text.HAL_HASHEx_SHA256_Accmlt_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>

<P><STRONG><a name="[e4]"></a>HAL_HASH_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>

<P><STRONG><a name="[e6]"></a>HAL_HASH_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HASH_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_MspInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>

<P><STRONG><a name="[e5]"></a>HAL_HASH_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_DeInit
</UL>

<P><STRONG><a name="[e8]"></a>HAL_HASH_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.HAL_HASH_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_ICACHE_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l5xx_hal_icache.o(.text.HAL_ICACHE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_ICACHE_Invalidate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l5xx_hal_icache.o(.text.HAL_ICACHE_Invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ICACHE_Invalidate &rArr; HAL_ICACHE_WaitForInvalidateComplete &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_WaitForInvalidateComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumper
</UL>

<P><STRONG><a name="[ea]"></a>HAL_ICACHE_WaitForInvalidateComplete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l5xx_hal_icache.o(.text.HAL_ICACHE_WaitForInvalidateComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ICACHE_WaitForInvalidateComplete &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Invalidate
</UL>

<P><STRONG><a name="[eb]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_InitTick</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boot_hal.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l5xx_hal_cortex.o(.text.HAL_NVIC_SystemReset))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
</UL>

<P><STRONG><a name="[171]"></a>HAL_PWREx_EnableSRAM2ContentRetention</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l5xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableSRAM2ContentRetention))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PWREx_EnableVddIO2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l5xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableVddIO2))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Initialize
</UL>

<P><STRONG><a name="[f2]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[f4]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[111]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[144]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[f6]"></a>HAL_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Init &rArr; UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Initialize
</UL>

<P><STRONG><a name="[126]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Receive
</UL>

<P><STRONG><a name="[125]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_Transmit</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
</UL>

<P><STRONG><a name="[df]"></a>HASH_Accumulate</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32l5xx_hal_hash.o(.text.HASH_Accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt
</UL>

<P><STRONG><a name="[e1]"></a>HASH_Start</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32l5xx_hal_hash.o(.text.HASH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_WriteData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_WaitOnFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetDigest
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt_End
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt_End
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, low_level_flash.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, system_stm32l5xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[73]"></a>SystemInit</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, system_stm32l5xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l5xx_bl2.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>TFM_LL_SECU_ApplyRunTimeProtections</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, tfm_low_level_security.o(.text.TFM_LL_SECU_ApplyRunTimeProtections))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TFM_LL_SECU_ApplyRunTimeProtections &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_ConfigPrivMode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_region_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
</UL>

<P><STRONG><a name="[13a]"></a>TFM_LL_SECU_CheckStaticProtections</STRONG> (Thumb, 912 bytes, Stack size 24 bytes, tfm_low_level_security.o(.text.TFM_LL_SECU_CheckStaticProtections))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TFM_LL_SECU_CheckStaticProtections &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBGetConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
</UL>

<P><STRONG><a name="[178]"></a>TFM_LL_SECU_SetLoaderCodeSecure</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tfm_low_level_security.o(.text.TFM_LL_SECU_SetLoaderCodeSecure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TFM_LL_SECU_SetLoaderCodeSecure
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_noimage
</UL>

<P><STRONG><a name="[123]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
</UL>

<P><STRONG><a name="[fc]"></a>UART_CheckIdleState</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l5xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[108]"></a>UART_SetConfig</STRONG> (Thumb, 548 bytes, Stack size 16 bytes, stm32l5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[ff]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[101]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, stm32l5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[14f]"></a>boot_copy_region</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, loader.o(.text.boot_copy_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = boot_copy_region &rArr; boot_encrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_encrypt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>

<P><STRONG><a name="[154]"></a>boot_enc_decrypt</STRONG> (Thumb, 440 bytes, Stack size 248 bytes, encrypted.o(.text.boot_enc_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2792 + Unknown Stack Size
<LI>Call Chain = boot_enc_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_load
</UL>

<P><STRONG><a name="[15d]"></a>boot_enc_load</STRONG> (Thumb, 130 bytes, Stack size 312 bytes, encrypted.o(.text.boot_enc_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 3104 + Unknown Stack Size
<LI>Call Chain = boot_enc_load &rArr; boot_enc_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_read
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_id_to_multi_image_slot
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_tlv_iter_next
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_tlv_iter_begin
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>

<P><STRONG><a name="[161]"></a>boot_enc_set_key</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, encrypted.o(.text.boot_enc_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2132<LI>Call Chain = boot_enc_set_key &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>

<P><STRONG><a name="[151]"></a>boot_encrypt</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, encrypted.o(.text.boot_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = boot_encrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_id_to_multi_image_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_copy_region
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
</UL>

<P><STRONG><a name="[166]"></a>boot_go</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, loader.o(.text.boot_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080 + Unknown Stack Size
<LI>Call Chain = boot_go &rArr; context_boot_go &rArr; bootutil_img_validate &rArr; bootutil_verify_sig &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>boot_nv_security_counter_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, security_cnt.o(.text.boot_nv_security_counter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = boot_nv_security_counter_get &rArr; tfm_plat_read_nv_counter &rArr; CalculateCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_read_nv_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
</UL>

<P><STRONG><a name="[16a]"></a>boot_nv_security_counter_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, security_cnt.o(.text.boot_nv_security_counter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = boot_nv_security_counter_init &rArr; tfm_plat_init_nv_counter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_init_nv_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>boot_nv_security_counter_update</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, security_cnt.o(.text.boot_nv_security_counter_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = boot_nv_security_counter_update &rArr; tfm_plat_set_nv_counter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_set_nv_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_security_counter
</UL>

<P><STRONG><a name="[16e]"></a>boot_platform_init</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, boot_hal.o(.text.boot_platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = boot_platform_init &rArr; TFM_LL_SECU_CheckStaticProtections &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableSRAM2ContentRetention
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdio_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_noimage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_ApplyRunTimeProtections
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>boot_platform_noimage</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, boot_hal.o(.text.boot_platform_noimage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = boot_platform_noimage &rArr; execute_loader &rArr; TFM_LL_SECU_UpdateLoaderRunTimeProtections &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_loader
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_SetLoaderCodeSecure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
</UL>

<P><STRONG><a name="[17a]"></a>boot_read_image_header</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, swap_scratch.o(.text.boot_read_image_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = boot_read_image_header &rArr; flash_area_read
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_open
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_id_from_multi_image_slot
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_close
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_image_headers
</UL>

<P><STRONG><a name="[188]"></a>boot_secure_memequal</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bootutil_misc.o(.text.boot_secure_memequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = boot_secure_memequal
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
</UL>

<P><STRONG><a name="[183]"></a>bootutil_get_img_security_cnt</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, image_validate.o(.text.bootutil_get_img_security_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bootutil_get_img_security_cnt &rArr; bootutil_tlv_iter_next &rArr; flash_area_read
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_tlv_iter_next
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_tlv_iter_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_security_counter
</UL>

<P><STRONG><a name="[184]"></a>bootutil_img_validate</STRONG> (Thumb, 904 bytes, Stack size 800 bytes, image_validate.o(.text.bootutil_img_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3984 + Unknown Stack Size
<LI>Call Chain = bootutil_img_validate &rArr; bootutil_verify_sig &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_nv_security_counter_get
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_sha256_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_tlv_iter_next
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_tlv_iter_begin
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_encrypt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_secure_memequal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>

<P><STRONG><a name="[15f]"></a>bootutil_tlv_iter_begin</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, tlv.o(.text.bootutil_tlv_iter_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bootutil_tlv_iter_begin &rArr; flash_area_read
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_read
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_get_img_security_cnt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_load
</UL>

<P><STRONG><a name="[160]"></a>bootutil_tlv_iter_next</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tlv.o(.text.bootutil_tlv_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bootutil_tlv_iter_next &rArr; flash_area_read
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_read
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_get_img_security_cnt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_load
</UL>

<P><STRONG><a name="[187]"></a>bootutil_verify_sig</STRONG> (Thumb, 560 bytes, Stack size 1240 bytes, image_rsa.o(.text.bootutil_verify_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184<LI>Call Chain = bootutil_verify_sig &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_sha256_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_secure_memequal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
</UL>

<P><STRONG><a name="[167]"></a>context_boot_go</STRONG> (Thumb, 840 bytes, Stack size 96 bytes, loader.o(.text.context_boot_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080 + Unknown Stack Size
<LI>Call Chain = context_boot_go &rArr; bootutil_img_validate &rArr; bootutil_verify_sig &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_open
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_id_from_multi_image_slot
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erased_val
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_close
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_copy_region
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_security_counter
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_sectors
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_image_headers
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_set_key
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_load
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_go
</UL>

<P><STRONG><a name="[181]"></a>flash_area_align</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_map.o(.text.flash_area_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_sectors
</UL>

<P><STRONG><a name="[17d]"></a>flash_area_close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_map.o(.text.flash_area_close))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_get_sectors
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_image_header
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_security_counter
</UL>

<P><STRONG><a name="[152]"></a>flash_area_erase</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, flash_map.o(.text.flash_area_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_area_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_copy_region
</UL>

<P><STRONG><a name="[194]"></a>flash_area_erased_val</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_map_extended.o(.text.flash_area_erased_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_area_erased_val
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>

<P><STRONG><a name="[180]"></a>flash_area_get_sectors</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, flash_map_legacy.o(.text.flash_area_get_sectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = flash_area_get_sectors &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_open
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_close
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_sectors
</UL>

<P><STRONG><a name="[17b]"></a>flash_area_id_from_multi_image_slot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash_map_extended.o(.text.flash_area_id_from_multi_image_slot))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_image_header
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_security_counter
</UL>

<P><STRONG><a name="[15e]"></a>flash_area_id_to_multi_image_slot</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, flash_map_extended.o(.text.flash_area_id_to_multi_image_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_area_id_to_multi_image_slot &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_encrypt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_load
</UL>

<P><STRONG><a name="[17c]"></a>flash_area_open</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, flash_map.o(.text.flash_area_open))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_get_sectors
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_image_header
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_update_security_counter
</UL>

<P><STRONG><a name="[150]"></a>flash_area_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, flash_map.o(.text.flash_area_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_area_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_image_header
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_copy_region
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_get_img_security_cnt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_tlv_iter_next
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_tlv_iter_begin
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_load
</UL>

<P><STRONG><a name="[153]"></a>flash_area_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, flash_map.o(.text.flash_area_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_area_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_copy_region
</UL>

<P><STRONG><a name="[195]"></a>flash_device_base</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, flash_map_extended.o(.text.flash_device_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = flash_device_base &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart_stdout.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>icache_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, boot_hal.o(.text.icache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icache_init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
</UL>

<P><STRONG><a name="[b8]"></a>main</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, bl2_main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4104 + Unknown Stack Size
<LI>Call Chain = main &rArr; boot_go &rArr; context_boot_go &rArr; bootutil_img_validate &rArr; bootutil_verify_sig &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdio_uninit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdio_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_base
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_noimage
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_nv_security_counter_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_go
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumper
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[165]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aes.o(.text.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_encrypt
</UL>

<P><STRONG><a name="[164]"></a>mbedtls_aes_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aes.o(.text.mbedtls_aes_free))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_set_key
</UL>

<P><STRONG><a name="[162]"></a>mbedtls_aes_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aes.o(.text.mbedtls_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_aes_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_set_key
</UL>

<P><STRONG><a name="[163]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 940 bytes, Stack size 2108 bytes, aes.o(.text.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2108<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_set_key
</UL>

<P><STRONG><a name="[156]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, asn1parse.o(.text.mbedtls_asn1_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_int &rArr; OUTLINED_FUNCTION_0 &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
</UL>

<P><STRONG><a name="[19e]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, asn1parse.o(.text.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>

<P><STRONG><a name="[157]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, asn1parse.o(.text.mbedtls_asn1_get_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; OUTLINED_FUNCTION_0 &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
</UL>

<P><STRONG><a name="[10a]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, asn1parse.o(.text.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1a2]"></a>mbedtls_calloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_calloc))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[1a1]"></a>mbedtls_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_free))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[19b]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 952 bytes, Stack size 72 bytes, aes.o(.text.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[19a]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 940 bytes, Stack size 72 bytes, aes.o(.text.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[19f]"></a>mbedtls_internal_sha256_process</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sha256_alt.o(.text.mbedtls_internal_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbedtls_internal_sha256_process &rArr; HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[1be]"></a>mbedtls_md</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[1c5]"></a>mbedtls_md_finish</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_finish))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[1a0]"></a>mbedtls_md_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, md.o(.text.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[1bb]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[1ba]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[1bc]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[11d]"></a>mbedtls_md_setup</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, md.o(.text.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[1c3]"></a>mbedtls_md_starts</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_starts))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[1c4]"></a>mbedtls_md_update</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_update))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[197]"></a>mbedtls_memory_buffer_alloc_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_memory_buffer_alloc_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[1a4]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; OUTLINED_FUNCTION_7 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1a8]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[1a6]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[10e]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[12a]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[113]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1a7]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 832 bytes, Stack size 120 bytes, bignum.o(.text.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>

<P><STRONG><a name="[1ab]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1048 bytes, Stack size 1640 bytes, bignum.o(.text.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[121]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_fill_random &rArr; OUTLINED_FUNCTION_0 &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_bigendian_to_host
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[7f]"></a>mbedtls_mpi_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>
<BR>[Address Reference Count : 5]<UL><LI> bignum.o(.text.mbedtls_mpi_div_mpi)
<LI> rsa.o(.text.mbedtls_rsa_private)
<LI> rsa.o(.text.mbedtls_rsa_free)
<LI> bignum.o(.text.mbedtls_mpi_exp_mod)
<LI> bignum.o(.text.mbedtls_mpi_inv_mod)
</UL>
<P><STRONG><a name="[1af]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, bignum.o(.text.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[115]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[128]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[80]"></a>mbedtls_mpi_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rsa.o(.text.mbedtls_rsa_private)
</UL>
<P><STRONG><a name="[1b1]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 652 bytes, Stack size 144 bytes, bignum.o(.text.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1b0]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bignum.o(.text.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[10c]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[12e]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1aa]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[1b2]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, bignum.o(.text.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[19d]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_read_binary &rArr; OUTLINED_FUNCTION_0 &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_bigendian_to_host
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1a9]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shift_l &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[11b]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, bignum.o(.text.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[15a]"></a>mbedtls_mpi_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>

<P><STRONG><a name="[12c]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[117]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; OUTLINED_FUNCTION_7 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[134]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; OUTLINED_FUNCTION_7 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1b5]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_write_binary
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1a3]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_memory_buffer_alloc_init
</UL>

<P><STRONG><a name="[19c]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, platform_util.o(.text.mbedtls_platform_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_zeroize
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
</UL>

<P><STRONG><a name="[15b]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, rsa.o(.text.mbedtls_rsa_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_rsa_validate_params &rArr; OUTLINED_FUNCTION_5 &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
</UL>

<P><STRONG><a name="[18d]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rsa.o(.text.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[159]"></a>mbedtls_rsa_deduce_crt</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, rsa_internal.o(.text.mbedtls_rsa_deduce_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_rsa_deduce_crt &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
</UL>

<P><STRONG><a name="[158]"></a>mbedtls_rsa_free</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rsa.o(.text.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
</UL>

<P><STRONG><a name="[18c]"></a>mbedtls_rsa_import</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rsa.o(.text.mbedtls_rsa_import))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_rsa_import &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
</UL>

<P><STRONG><a name="[155]"></a>mbedtls_rsa_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rsa.o(.text.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_rsa_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
</UL>

<P><STRONG><a name="[1b9]"></a>mbedtls_rsa_private</STRONG> (Thumb, 840 bytes, Stack size 168 bytes, rsa.o(.text.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[18e]"></a>mbedtls_rsa_public</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, rsa.o(.text.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[15c]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 400 bytes, Stack size 472 bytes, rsa.o(.text.mbedtls_rsa_rsaes_oaep_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2544<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_enc_decrypt
</UL>

<P><STRONG><a name="[1b8]"></a>mbedtls_rsa_validate_crt</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, rsa_internal.o(.text.mbedtls_rsa_validate_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_rsa_validate_crt &rArr; OUTLINED_FUNCTION_5 &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[1b7]"></a>mbedtls_rsa_validate_params</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, rsa_internal.o(.text.mbedtls_rsa_validate_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbedtls_rsa_validate_params &rArr; OUTLINED_FUNCTION_5 &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[1bf]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sha256_alt.o(.text.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
</UL>

<P><STRONG><a name="[186]"></a>mbedtls_sha256_finish_ret</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sha256_alt.o(.text.mbedtls_sha256_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt_End
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt_End
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
</UL>

<P><STRONG><a name="[1c0]"></a>mbedtls_sha256_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sha256_alt.o(.text.mbedtls_sha256_free))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
</UL>

<P><STRONG><a name="[18a]"></a>mbedtls_sha256_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sha256_alt.o(.text.mbedtls_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_sha256_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_sha256_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
</UL>

<P><STRONG><a name="[1c2]"></a>mbedtls_sha256_ret</STRONG> (Thumb, 72 bytes, Stack size 392 bytes, sha256.o(.text.mbedtls_sha256_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = mbedtls_sha256_ret &rArr; mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[18b]"></a>mbedtls_sha256_starts_ret</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sha256_alt.o(.text.mbedtls_sha256_starts_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_sha256_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_sha256_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
</UL>

<P><STRONG><a name="[7b]"></a>mbedtls_sha256_update_ret</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, sha256_alt.o(.text.mbedtls_sha256_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_sha256_update_ret &rArr; HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA256_Accmlt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASHEx_SHA224_Accmlt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_rsa.o(.text.bootutil_verify_sig)
</UL>
<P><STRONG><a name="[16f]"></a>stdio_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_stdout.o(.text.stdio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stdio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
</UL>

<P><STRONG><a name="[198]"></a>stdio_uninit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_stdout.o(.text.stdio_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>tfm_plat_init_nv_counter</STRONG> (Thumb, 680 bytes, Stack size 64 bytes, bl2_nv_services.o(.text.tfm_plat_init_nv_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tfm_plat_init_nv_counter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_read_nv_counter
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCrc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_nv_security_counter_init
</UL>

<P><STRONG><a name="[169]"></a>tfm_plat_read_nv_counter</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, bl2_nv_services.o(.text.tfm_plat_read_nv_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tfm_plat_read_nv_counter &rArr; CalculateCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_nv_security_counter_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_set_nv_counter
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_init_nv_counter
</UL>

<P><STRONG><a name="[16d]"></a>tfm_plat_set_nv_counter</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, bl2_nv_services.o(.text.tfm_plat_set_nv_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tfm_plat_set_nv_counter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_read_nv_counter
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCrc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_nv_security_counter_update
</UL>

<P><STRONG><a name="[b4]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1ff]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[200]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1c7]"></a>boot_jump_to_next_image</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bl2_main.o(.BL2_NoHdp_Code))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clear_bl2_ram_area
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumper
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_loader
</UL>

<P><STRONG><a name="[179]"></a>execute_loader</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, boot_hal.o(.BL2_NoHdp_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = execute_loader &rArr; TFM_LL_SECU_UpdateLoaderRunTimeProtections &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_jump_to_next_image
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateLoaderRunTimeProtections
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_noimage
</UL>

<P><STRONG><a name="[1ca]"></a>boot_jump_to_ns_image</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, boot_hal.o(.BL2_NoHdp_Code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_clean_ns_ram_area
</UL>

<P><STRONG><a name="[199]"></a>jumper</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, boot_hal.o(.BL2_NoHdp_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jumper &rArr; TFM_LL_SECU_UpdateRunTimeProtections &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Invalidate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_jump_to_next_image
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateRunTimeProtections
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>Error_Handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, boot_hal.o(.BL2_NoHdp_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateRunTimeProtections
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateLoaderRunTimeProtections
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_CheckStaticProtections
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_ApplyRunTimeProtections
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hdp_protection
</UL>

<P><STRONG><a name="[1c8]"></a>boot_clear_bl2_ram_area</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, boot_hal.o(.BL2_NoHdp_Code))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_jump_to_next_image
</UL>

<P><STRONG><a name="[1cb]"></a>boot_clean_ns_ram_area</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, boot_hal.o(.BL2_NoHdp_Code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_jump_to_ns_image
</UL>

<P><STRONG><a name="[1c9]"></a>TFM_LL_SECU_UpdateLoaderRunTimeProtections</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, tfm_low_level_security.o(.BL2_NoHdp_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TFM_LL_SECU_UpdateLoaderRunTimeProtections &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_region_enable
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_region_disable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hdp_protection
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_loader
</UL>

<P><STRONG><a name="[1cc]"></a>TFM_LL_SECU_UpdateRunTimeProtections</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, tfm_low_level_security.o(.BL2_NoHdp_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TFM_LL_SECU_UpdateRunTimeProtections &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_region_enable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_hdp_protection
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumper
</UL>

<P><STRONG><a name="[138]"></a>mpu_armv8m_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mpu_armv8m_drv.o(.text.mpu_armv8m_enable))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_ApplyRunTimeProtections
</UL>

<P><STRONG><a name="[1ce]"></a>mpu_armv8m_region_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mpu_armv8m_drv.o(.text.mpu_armv8m_region_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateLoaderRunTimeProtections
</UL>

<P><STRONG><a name="[136]"></a>mpu_armv8m_region_enable</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, mpu_armv8m_drv.o(.text.mpu_armv8m_region_enable))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateRunTimeProtections
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateLoaderRunTimeProtections
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_ApplyRunTimeProtections
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f1]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l5xx_hal_cortex.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>

<P><STRONG><a name="[dd]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l5xx_hal_flash.o(.text.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[dc]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l5xx_hal_flash.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[d8]"></a>FLASH_MassErase</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32l5xx_hal_flash_ex.o(.text.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[d9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_flash_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[105]"></a>HASH_GetDigest</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32l5xx_hal_hash.o(.text.HASH_GetDigest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HASH_GetDigest
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>

<P><STRONG><a name="[107]"></a>HASH_WaitOnFlagUntilTimeout</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32l5xx_hal_hash.o(.text.HASH_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
</UL>

<P><STRONG><a name="[102]"></a>HASH_WriteData</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32l5xx_hal_hash.o(.text.HASH_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HASH_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>

<P><STRONG><a name="[106]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_GetDigest
</UL>

<P><STRONG><a name="[104]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>

<P><STRONG><a name="[e7]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HASH_Init
</UL>

<P><STRONG><a name="[103]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_hash.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Start
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_Accumulate
</UL>

<P><STRONG><a name="[f8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[110]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[14a]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[141]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[143]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[142]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[146]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[147]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[140]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[fe]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[145]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[13e]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[148]"></a>OUTLINED_FUNCTION_29</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_29))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[13f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[fa]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f9]"></a>OUTLINED_FUNCTION_32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_32 &rArr; UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[124]"></a>OUTLINED_FUNCTION_33</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_33))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[f7]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fb]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l5xx_hal_uart.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[77]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[78]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_16BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[7a]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[79]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_8BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[189]"></a>bootutil_sha256_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, image_rsa.o(.text.bootutil_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bootutil_sha256_init &rArr; mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_verify_sig
</UL>

<P><STRONG><a name="[185]"></a>bootutil_sha256_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, image_validate.o(.text.bootutil_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bootutil_sha256_init &rArr; mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_img_validate
</UL>

<P><STRONG><a name="[17e]"></a>boot_read_image_headers</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loader.o(.text.boot_read_image_headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = boot_read_image_headers &rArr; boot_read_image_header &rArr; flash_area_read
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_read_image_header
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>

<P><STRONG><a name="[17f]"></a>boot_read_sectors</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loader.o(.text.boot_read_sectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = boot_read_sectors &rArr; flash_area_get_sectors &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_get_sectors
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>

<P><STRONG><a name="[182]"></a>boot_update_security_counter</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loader.o(.text.boot_update_security_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = boot_update_security_counter &rArr; boot_nv_security_counter_update &rArr; tfm_plat_set_nv_counter &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_open
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_id_from_multi_image_slot
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_close
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_nv_security_counter_update
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootutil_get_img_security_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_boot_go
</UL>

<P><STRONG><a name="[109]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asn1parse.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
</UL>

<P><STRONG><a name="[10b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[112]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[118]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[1a5]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[11a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[11f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[127]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[12b]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[12f]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[131]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[132]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[133]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; mbedtls_mpi_sub_mpi &rArr; OUTLINED_FUNCTION_7 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[1ae]"></a>mbedtls_mpi_zeroize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_zeroize))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[1ad]"></a>mpi_bigendian_to_host</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(.text.mpi_bigendian_to_host))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[119]"></a>mpi_montmul</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, bignum.o(.text.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[1ac]"></a>mpi_montred</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, bignum.o(.text.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[1b3]"></a>mpi_mul_hlp</STRONG> (Thumb, 398 bytes, Stack size 20 bytes, bignum.o(.text.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[1b4]"></a>mpi_sub_hlp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bignum.o(.text.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[a0]"></a>sha224_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_clone_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[9e]"></a>sha224_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md_wrap.o(.text.sha224_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha224_ctx_alloc &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[9f]"></a>sha224_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text.sha224_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[9c]"></a>sha224_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[a1]"></a>sha224_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_internal_sha256_process &rArr; HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[9a]"></a>sha224_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha224_starts_wrap &rArr; mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
</UL>
<P><STRONG><a name="[9b]"></a>sha224_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update_ret &rArr; HAL_HASHEx_SHA256_Accmlt &rArr; HASH_Accumulate &rArr; HASH_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 2]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
<LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[9d]"></a>sha224_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha224_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha224_info)
</UL>
<P><STRONG><a name="[a2]"></a>sha256_starts_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha256_starts_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sha256_starts_wrap &rArr; mbedtls_sha256_starts_ret &rArr; HAL_HASH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[a3]"></a>sha256_wrap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, md_wrap.o(.text.sha256_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_finish_ret &rArr; HAL_HASHEx_SHA256_Accmlt_End &rArr; HASH_Start &rArr; HASH_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.rodata.mbedtls_sha256_info)
</UL>
<P><STRONG><a name="[18f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
</UL>

<P><STRONG><a name="[7d]"></a>buffer_alloc_calloc</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, memory_buffer_alloc.o(.text.buffer_alloc_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buffer_alloc_calloc &rArr; verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init)
</UL>
<P><STRONG><a name="[7e]"></a>buffer_alloc_free</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, memory_buffer_alloc.o(.text.buffer_alloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buffer_alloc_free &rArr; verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory_buffer_alloc.o(.text.mbedtls_memory_buffer_alloc_init)
</UL>
<P><STRONG><a name="[190]"></a>verify_chain</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, memory_buffer_alloc.o(.text.verify_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = verify_chain
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_header
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_calloc
</UL>

<P><STRONG><a name="[192]"></a>verify_header</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, memory_buffer_alloc.o(.text.verify_header))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_chain
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_alloc_free
</UL>

<P><STRONG><a name="[a5]"></a>platform_calloc_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform.o(.text.platform_calloc_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[a7]"></a>platform_exit_uninit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(.text.platform_exit_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data.mbedtls_exit)
</UL>
<P><STRONG><a name="[a6]"></a>platform_free_uninit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(.text.platform_free_uninit))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[10d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>

<P><STRONG><a name="[114]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rsa.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>

<P><STRONG><a name="[11c]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rsa.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; mbedtls_md_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[120]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; mbedtls_mpi_fill_random &rArr; OUTLINED_FUNCTION_0 &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[1bd]"></a>mgf_mask</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, rsa.o(.text.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mgf_mask &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[1b6]"></a>rsa_check_context</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rsa.o(.text.rsa_check_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rsa_check_context &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[10f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa_internal.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
</UL>

<P><STRONG><a name="[116]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa_internal.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; OUTLINED_FUNCTION_7 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
</UL>

<P><STRONG><a name="[11e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rsa_internal.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; OUTLINED_FUNCTION_7 &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
</UL>

<P><STRONG><a name="[122]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa_internal.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
</UL>

<P><STRONG><a name="[129]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa_internal.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
</UL>

<P><STRONG><a name="[12d]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rsa_internal.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; OUTLINED_FUNCTION_4 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
</UL>

<P><STRONG><a name="[1c6]"></a>CalculateCrc</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, bl2_nv_services.o(.text.CalculateCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalculateCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_set_nv_counter
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_read_nv_counter
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfm_plat_init_nv_counter
</UL>

<P><STRONG><a name="[174]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, boot_hal.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_init
</UL>

<P><STRONG><a name="[172]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, boot_hal.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_init
</UL>

<P><STRONG><a name="[177]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, boot_hal.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_noimage
</UL>

<P><STRONG><a name="[173]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boot_hal.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_platform_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_init
</UL>

<P><STRONG><a name="[14b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_com.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Transfer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SetModemControl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_PowerControl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetTxCount
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetRxCount
</UL>

<P><STRONG><a name="[14c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, low_level_com.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Initialize
</UL>

<P><STRONG><a name="[96]"></a>USART0_Control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.USART0_Control))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[99]"></a>USART0_GetModemStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, low_level_com.o(.text.USART0_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[95]"></a>USART0_GetRxCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.USART0_GetRxCount))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[97]"></a>USART0_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, low_level_com.o(.text.USART0_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[94]"></a>USART0_GetTxCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.USART0_GetTxCount))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[8e]"></a>USART0_Initialize</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, low_level_com.o(.text.USART0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART0_Initialize &rArr; HAL_UART_Init &rArr; UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddIO2
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[90]"></a>USART0_PowerControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.USART0_PowerControl))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[92]"></a>USART0_Receive</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, low_level_com.o(.text.USART0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART0_Receive &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[91]"></a>USART0_Send</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, low_level_com.o(.text.USART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART0_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[98]"></a>USART0_SetModemControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.USART0_SetModemControl))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[93]"></a>USART0_Transfer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.USART0_Transfer))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[8f]"></a>USART0_Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.USART0_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[8d]"></a>USART_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_com.o(.text.USART_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[8c]"></a>USART_GetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_level_com.o(.text.USART_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> low_level_com.o(.rodata.TFM_Driver_USART0)
</UL>
<P><STRONG><a name="[89]"></a>Flash_EraseChip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, low_level_flash.o(.text.Flash_EraseChip))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[88]"></a>Flash_EraseSector</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, low_level_flash.o(.text.Flash_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_EraseSector &rArr; HAL_FLASHEx_Erase &rArr; OUTLINED_FUNCTION_0 &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_range_secure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[82]"></a>Flash_GetCapabilities</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_flash.o(.text.Flash_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[8b]"></a>Flash_GetInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_level_flash.o(.text.Flash_GetInfo))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[8a]"></a>Flash_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, low_level_flash.o(.text.Flash_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Flash_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[81]"></a>Flash_GetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, low_level_flash.o(.text.Flash_GetVersion))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[83]"></a>Flash_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, low_level_flash.o(.text.Flash_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_Initialize &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[85]"></a>Flash_PowerControl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, low_level_flash.o(.text.Flash_PowerControl))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[87]"></a>Flash_ProgramData</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, low_level_flash.o(.text.Flash_ProgramData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Flash_ProgramData &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_range_secure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[86]"></a>Flash_ReadData</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, low_level_flash.o(.text.Flash_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Flash_ReadData &rArr; is_range_secure
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_range_secure
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[84]"></a>Flash_Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_level_flash.o(.text.Flash_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> low_level_flash.o(.rodata.TFM_Driver_FLASH0)
</UL>
<P><STRONG><a name="[d1]"></a>is_range_secure</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, low_level_flash.o(.text.is_range_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_range_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ProgramData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[1cf]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mpu_armv8m_drv.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_region_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_armv8m_enable
</UL>

<P><STRONG><a name="[1c1]"></a>mbedtls_zeroize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha256_alt.o(.text.mbedtls_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[1cd]"></a>enable_hdp_protection</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tfm_low_level_security.o(.BL2_NoHdp_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_hdp_protection &rArr; Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateRunTimeProtections
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFM_LL_SECU_UpdateLoaderRunTimeProtections
</UL>

<P><STRONG><a name="[76]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
