
SBSFU_Loader_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003634  0807b000  0807b000  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0807e634  0807e634  0000e634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .copy.table   00000018  0807e63c  0807e63c  0000e63c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .zero.table   00000010  0807e654  0807e654  0000e654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000ac  20000000  0807e664  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000558  200000ac  0807e710  000100ac  2**2
                  ALLOC
  6 .msp_stack    00000400  20000620  0807eca0  00010620  2**5
                  ALLOC
  7 .psp_stack    00000400  20000a20  0807f0a0  00010620  2**5
                  ALLOC
  8 .heap         00000200  20000e20  0807f4a0  00010620  2**3
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000100ac  2**0
                  CONTENTS, READONLY
 10 .comment      00000053  00000000  00000000  000100e2  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012590  00000000  00000000  00010135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000034a6  00000000  00000000  000226c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000063c0  00000000  00000000  00025b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002bf2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0002c893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299a0  00000000  00000000  0002d503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110f6  00000000  00000000  00056ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff789  00000000  00000000  00067f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00002104  00000000  00000000  00167724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         00000084  00000000  00000000  00169828  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000117  00000000  00000000  001698ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0807b000 <__Vectors>:
 807b000:	20000a20 	.word	0x20000a20
 807b004:	0807b2b1 	.word	0x0807b2b1
 807b008:	0807b301 	.word	0x0807b301
 807b00c:	0807b305 	.word	0x0807b305
 807b010:	0807b309 	.word	0x0807b309
 807b014:	0807b30d 	.word	0x0807b30d
 807b018:	0807b311 	.word	0x0807b311
 807b01c:	0807b315 	.word	0x0807b315
	...
 807b02c:	0807b319 	.word	0x0807b319
 807b030:	0807b31d 	.word	0x0807b31d
 807b034:	00000000 	.word	0x00000000
 807b038:	0807b321 	.word	0x0807b321
 807b03c:	0807b325 	.word	0x0807b325
 807b040:	0807b329 	.word	0x0807b329
 807b044:	0807b32d 	.word	0x0807b32d
 807b048:	0807b331 	.word	0x0807b331
 807b04c:	0807b335 	.word	0x0807b335
 807b050:	0807b339 	.word	0x0807b339
 807b054:	0807b33d 	.word	0x0807b33d
 807b058:	0807b341 	.word	0x0807b341
 807b05c:	0807b345 	.word	0x0807b345
 807b060:	0807b349 	.word	0x0807b349
 807b064:	0807b34d 	.word	0x0807b34d
 807b068:	0807b351 	.word	0x0807b351
 807b06c:	0807b355 	.word	0x0807b355
 807b070:	0807b359 	.word	0x0807b359
 807b074:	0807b35d 	.word	0x0807b35d
 807b078:	0807b361 	.word	0x0807b361
 807b07c:	0807b365 	.word	0x0807b365
 807b080:	0807b369 	.word	0x0807b369
 807b084:	0807b36d 	.word	0x0807b36d
 807b088:	0807b371 	.word	0x0807b371
 807b08c:	0807b375 	.word	0x0807b375
 807b090:	0807b379 	.word	0x0807b379
 807b094:	0807b37d 	.word	0x0807b37d
 807b098:	0807b381 	.word	0x0807b381
 807b09c:	0807b385 	.word	0x0807b385
 807b0a0:	0807b389 	.word	0x0807b389
 807b0a4:	0807b38d 	.word	0x0807b38d
 807b0a8:	0807b391 	.word	0x0807b391
 807b0ac:	0807b395 	.word	0x0807b395
 807b0b0:	0807b399 	.word	0x0807b399
 807b0b4:	0807b39d 	.word	0x0807b39d
 807b0b8:	0807b3a1 	.word	0x0807b3a1
 807b0bc:	0807b3a5 	.word	0x0807b3a5
 807b0c0:	0807b3a9 	.word	0x0807b3a9
 807b0c4:	0807b3ad 	.word	0x0807b3ad
 807b0c8:	0807b3b1 	.word	0x0807b3b1
 807b0cc:	0807b3b5 	.word	0x0807b3b5
 807b0d0:	0807b3b9 	.word	0x0807b3b9
 807b0d4:	0807b3bd 	.word	0x0807b3bd
 807b0d8:	0807b3c1 	.word	0x0807b3c1
 807b0dc:	0807b3c5 	.word	0x0807b3c5
 807b0e0:	0807b3c9 	.word	0x0807b3c9
 807b0e4:	0807b3cd 	.word	0x0807b3cd
 807b0e8:	0807b3d1 	.word	0x0807b3d1
 807b0ec:	0807b3d5 	.word	0x0807b3d5
 807b0f0:	0807b3d9 	.word	0x0807b3d9
 807b0f4:	0807b3dd 	.word	0x0807b3dd
 807b0f8:	0807b3e1 	.word	0x0807b3e1
 807b0fc:	0807b3e5 	.word	0x0807b3e5
 807b100:	0807b3e9 	.word	0x0807b3e9
 807b104:	0807b3ed 	.word	0x0807b3ed
 807b108:	0807b3f1 	.word	0x0807b3f1
 807b10c:	0807b3f5 	.word	0x0807b3f5
 807b110:	0807b3f9 	.word	0x0807b3f9
 807b114:	0807b3fd 	.word	0x0807b3fd
 807b118:	0807b401 	.word	0x0807b401
 807b11c:	0807b405 	.word	0x0807b405
 807b120:	0807b409 	.word	0x0807b409
 807b124:	0807b40d 	.word	0x0807b40d
 807b128:	0807b411 	.word	0x0807b411
 807b12c:	0807b415 	.word	0x0807b415
 807b130:	0807b419 	.word	0x0807b419
 807b134:	0807b41d 	.word	0x0807b41d
 807b138:	0807b421 	.word	0x0807b421
 807b13c:	0807b425 	.word	0x0807b425
 807b140:	0807b429 	.word	0x0807b429
 807b144:	0807b42d 	.word	0x0807b42d
 807b148:	0807b431 	.word	0x0807b431
 807b14c:	0807b435 	.word	0x0807b435
 807b150:	0807b439 	.word	0x0807b439
 807b154:	0807b43d 	.word	0x0807b43d
 807b158:	0807b441 	.word	0x0807b441
 807b15c:	0807b445 	.word	0x0807b445
 807b160:	0807b449 	.word	0x0807b449
 807b164:	0807b44d 	.word	0x0807b44d
 807b168:	0807b451 	.word	0x0807b451
 807b16c:	0807b455 	.word	0x0807b455
 807b170:	0807b459 	.word	0x0807b459
 807b174:	00000000 	.word	0x00000000
 807b178:	0807b45d 	.word	0x0807b45d
 807b17c:	00000000 	.word	0x00000000
 807b180:	0807b461 	.word	0x0807b461
 807b184:	0807b465 	.word	0x0807b465
 807b188:	0807b469 	.word	0x0807b469
 807b18c:	0807b46d 	.word	0x0807b46d
 807b190:	0807b471 	.word	0x0807b471
 807b194:	0807b475 	.word	0x0807b475
 807b198:	0807b479 	.word	0x0807b479
 807b19c:	0807b47d 	.word	0x0807b47d
 807b1a0:	0807b481 	.word	0x0807b481
 807b1a4:	0807b485 	.word	0x0807b485
 807b1a8:	0807b489 	.word	0x0807b489
 807b1ac:	0807b48d 	.word	0x0807b48d
 807b1b0:	0807b491 	.word	0x0807b491
 807b1b4:	00000000 	.word	0x00000000
 807b1b8:	0807b495 	.word	0x0807b495
 807b1bc:	0807b499 	.word	0x0807b499
	...
 807b1c8:	0807b49d 	.word	0x0807b49d
 807b1cc:	0807b4a1 	.word	0x0807b4a1
 807b1d0:	0807b4a5 	.word	0x0807b4a5
 807b1d4:	0807b4a9 	.word	0x0807b4a9
 807b1d8:	0807b4ad 	.word	0x0807b4ad
 807b1dc:	0807b4b1 	.word	0x0807b4b1
 807b1e0:	0807b4b5 	.word	0x0807b4b5
 807b1e4:	0807b4b9 	.word	0x0807b4b9
 807b1e8:	0807b4bd 	.word	0x0807b4bd
 807b1ec:	0807b4c1 	.word	0x0807b4c1
 807b1f0:	0807b4c5 	.word	0x0807b4c5

0807b1f4 <__do_global_dtors_aux>:
 807b1f4:	b510      	push	{r4, lr}
 807b1f6:	4c05      	ldr	r4, [pc, #20]	; (807b20c <__do_global_dtors_aux+0x18>)
 807b1f8:	7823      	ldrb	r3, [r4, #0]
 807b1fa:	b933      	cbnz	r3, 807b20a <__do_global_dtors_aux+0x16>
 807b1fc:	4b04      	ldr	r3, [pc, #16]	; (807b210 <__do_global_dtors_aux+0x1c>)
 807b1fe:	b113      	cbz	r3, 807b206 <__do_global_dtors_aux+0x12>
 807b200:	4804      	ldr	r0, [pc, #16]	; (807b214 <__do_global_dtors_aux+0x20>)
 807b202:	e000      	b.n	807b206 <__do_global_dtors_aux+0x12>
 807b204:	bf00      	nop
 807b206:	2301      	movs	r3, #1
 807b208:	7023      	strb	r3, [r4, #0]
 807b20a:	bd10      	pop	{r4, pc}
 807b20c:	200000ac 	.word	0x200000ac
 807b210:	00000000 	.word	0x00000000
 807b214:	0807e630 	.word	0x0807e630

0807b218 <frame_dummy>:
 807b218:	b508      	push	{r3, lr}
 807b21a:	4b03      	ldr	r3, [pc, #12]	; (807b228 <frame_dummy+0x10>)
 807b21c:	b11b      	cbz	r3, 807b226 <frame_dummy+0xe>
 807b21e:	4903      	ldr	r1, [pc, #12]	; (807b22c <frame_dummy+0x14>)
 807b220:	4803      	ldr	r0, [pc, #12]	; (807b230 <frame_dummy+0x18>)
 807b222:	e000      	b.n	807b226 <frame_dummy+0xe>
 807b224:	bf00      	nop
 807b226:	bd08      	pop	{r3, pc}
 807b228:	00000000 	.word	0x00000000
 807b22c:	200000b0 	.word	0x200000b0
 807b230:	0807e630 	.word	0x0807e630

0807b234 <_stack_init>:
 807b234:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 807b238:	4770      	bx	lr
 807b23a:	bf00      	nop

0807b23c <_mainCRTStartup>:
 807b23c:	4b17      	ldr	r3, [pc, #92]	; (807b29c <_mainCRTStartup+0x60>)
 807b23e:	2b00      	cmp	r3, #0
 807b240:	bf08      	it	eq
 807b242:	4b13      	ldreq	r3, [pc, #76]	; (807b290 <_mainCRTStartup+0x54>)
 807b244:	469d      	mov	sp, r3
 807b246:	f7ff fff5 	bl	807b234 <_stack_init>
 807b24a:	2100      	movs	r1, #0
 807b24c:	468b      	mov	fp, r1
 807b24e:	460f      	mov	r7, r1
 807b250:	4813      	ldr	r0, [pc, #76]	; (807b2a0 <_mainCRTStartup+0x64>)
 807b252:	4a14      	ldr	r2, [pc, #80]	; (807b2a4 <_mainCRTStartup+0x68>)
 807b254:	1a12      	subs	r2, r2, r0
 807b256:	f001 fd09 	bl	807cc6c <memset>
 807b25a:	4b0e      	ldr	r3, [pc, #56]	; (807b294 <_mainCRTStartup+0x58>)
 807b25c:	2b00      	cmp	r3, #0
 807b25e:	d000      	beq.n	807b262 <_mainCRTStartup+0x26>
 807b260:	4798      	blx	r3
 807b262:	4b0d      	ldr	r3, [pc, #52]	; (807b298 <_mainCRTStartup+0x5c>)
 807b264:	2b00      	cmp	r3, #0
 807b266:	d000      	beq.n	807b26a <_mainCRTStartup+0x2e>
 807b268:	4798      	blx	r3
 807b26a:	2000      	movs	r0, #0
 807b26c:	2100      	movs	r1, #0
 807b26e:	0004      	movs	r4, r0
 807b270:	000d      	movs	r5, r1
 807b272:	480d      	ldr	r0, [pc, #52]	; (807b2a8 <_mainCRTStartup+0x6c>)
 807b274:	2800      	cmp	r0, #0
 807b276:	d002      	beq.n	807b27e <_mainCRTStartup+0x42>
 807b278:	480c      	ldr	r0, [pc, #48]	; (807b2ac <_mainCRTStartup+0x70>)
 807b27a:	e000      	b.n	807b27e <_mainCRTStartup+0x42>
 807b27c:	bf00      	nop
 807b27e:	f001 fcd1 	bl	807cc24 <__libc_init_array>
 807b282:	0020      	movs	r0, r4
 807b284:	0029      	movs	r1, r5
 807b286:	f000 fbe7 	bl	807ba58 <main>
 807b28a:	f001 fcb7 	bl	807cbfc <exit>
 807b28e:	bf00      	nop
 807b290:	00080000 	.word	0x00080000
	...
 807b29c:	20000e20 	.word	0x20000e20
 807b2a0:	200000ac 	.word	0x200000ac
 807b2a4:	20000604 	.word	0x20000604
	...

0807b2b0 <Reset_Handler>:
 807b2b0:	4c0f      	ldr	r4, [pc, #60]	; (807b2f0 <Reset_Handler+0x40>)
 807b2b2:	4d10      	ldr	r5, [pc, #64]	; (807b2f4 <Reset_Handler+0x44>)
 807b2b4:	42ac      	cmp	r4, r5
 807b2b6:	da09      	bge.n	807b2cc <Reset_Handler+0x1c>
 807b2b8:	6821      	ldr	r1, [r4, #0]
 807b2ba:	6862      	ldr	r2, [r4, #4]
 807b2bc:	68a3      	ldr	r3, [r4, #8]
 807b2be:	3b04      	subs	r3, #4
 807b2c0:	bfa2      	ittt	ge
 807b2c2:	58c8      	ldrge	r0, [r1, r3]
 807b2c4:	50d0      	strge	r0, [r2, r3]
 807b2c6:	e7fa      	bge.n	807b2be <Reset_Handler+0xe>
 807b2c8:	340c      	adds	r4, #12
 807b2ca:	e7f3      	b.n	807b2b4 <Reset_Handler+0x4>
 807b2cc:	4b0a      	ldr	r3, [pc, #40]	; (807b2f8 <Reset_Handler+0x48>)
 807b2ce:	4c0b      	ldr	r4, [pc, #44]	; (807b2fc <Reset_Handler+0x4c>)
 807b2d0:	42a3      	cmp	r3, r4
 807b2d2:	da08      	bge.n	807b2e6 <Reset_Handler+0x36>
 807b2d4:	6819      	ldr	r1, [r3, #0]
 807b2d6:	685a      	ldr	r2, [r3, #4]
 807b2d8:	2000      	movs	r0, #0
 807b2da:	3a04      	subs	r2, #4
 807b2dc:	bfa4      	itt	ge
 807b2de:	5088      	strge	r0, [r1, r2]
 807b2e0:	e7fb      	bge.n	807b2da <Reset_Handler+0x2a>
 807b2e2:	3308      	adds	r3, #8
 807b2e4:	e7f4      	b.n	807b2d0 <Reset_Handler+0x20>
 807b2e6:	f000 fbdb 	bl	807baa0 <SystemInit>
 807b2ea:	f7ff ffa7 	bl	807b23c <_mainCRTStartup>
 807b2ee:	0000      	.short	0x0000
 807b2f0:	0807e63c 	.word	0x0807e63c
 807b2f4:	0807e654 	.word	0x0807e654
 807b2f8:	0807e654 	.word	0x0807e654
 807b2fc:	0807e664 	.word	0x0807e664

0807b300 <NMI_Handler>:
 807b300:	f7ff bffe 	b.w	807b300 <NMI_Handler>

0807b304 <HardFault_Handler>:
 807b304:	f7ff bffe 	b.w	807b304 <HardFault_Handler>

0807b308 <MemManage_Handler>:
 807b308:	f7ff bffe 	b.w	807b308 <MemManage_Handler>

0807b30c <BusFault_Handler>:
 807b30c:	f7ff bffe 	b.w	807b30c <BusFault_Handler>

0807b310 <UsageFault_Handler>:
 807b310:	f7ff bffe 	b.w	807b310 <UsageFault_Handler>

0807b314 <SecureFault_Handler>:
 807b314:	f7ff bffe 	b.w	807b314 <SecureFault_Handler>

0807b318 <SVC_Handler>:
 807b318:	f7ff bffe 	b.w	807b318 <SVC_Handler>

0807b31c <DebugMon_Handler>:
 807b31c:	f7ff bffe 	b.w	807b31c <DebugMon_Handler>

0807b320 <PendSV_Handler>:
 807b320:	f7ff bffe 	b.w	807b320 <PendSV_Handler>

0807b324 <SysTick_Handler>:
 807b324:	f7ff bffe 	b.w	807b324 <SysTick_Handler>

0807b328 <WWDG_IRQHandler>:
 807b328:	f7ff bffe 	b.w	807b328 <WWDG_IRQHandler>

0807b32c <PVD_PVM_IRQHandler>:
 807b32c:	f7ff bffe 	b.w	807b32c <PVD_PVM_IRQHandler>

0807b330 <RTC_IRQHandler>:
 807b330:	f7ff bffe 	b.w	807b330 <RTC_IRQHandler>

0807b334 <RTC_IRQHandler_S>:
 807b334:	f7ff bffe 	b.w	807b334 <RTC_IRQHandler_S>

0807b338 <TAMP_IRQHandler>:
 807b338:	f7ff bffe 	b.w	807b338 <TAMP_IRQHandler>

0807b33c <TAMP_IRQHandler_S>:
 807b33c:	f7ff bffe 	b.w	807b33c <TAMP_IRQHandler_S>

0807b340 <FLASH_IRQHandler>:
 807b340:	f7ff bffe 	b.w	807b340 <FLASH_IRQHandler>

0807b344 <FLASH_IRQHandler_S>:
 807b344:	f7ff bffe 	b.w	807b344 <FLASH_IRQHandler_S>

0807b348 <SERR_IRQHandler>:
 807b348:	f7ff bffe 	b.w	807b348 <SERR_IRQHandler>

0807b34c <RCC_IRQHandler>:
 807b34c:	f7ff bffe 	b.w	807b34c <RCC_IRQHandler>

0807b350 <RCC_IRQHandler_S>:
 807b350:	f7ff bffe 	b.w	807b350 <RCC_IRQHandler_S>

0807b354 <EXTI0_IRQHandler>:
 807b354:	f7ff bffe 	b.w	807b354 <EXTI0_IRQHandler>

0807b358 <EXTI1_IRQHandler>:
 807b358:	f7ff bffe 	b.w	807b358 <EXTI1_IRQHandler>

0807b35c <EXTI2_IRQHandler>:
 807b35c:	f7ff bffe 	b.w	807b35c <EXTI2_IRQHandler>

0807b360 <EXTI3_IRQHandler>:
 807b360:	f7ff bffe 	b.w	807b360 <EXTI3_IRQHandler>

0807b364 <EXTI4_IRQHandler>:
 807b364:	f7ff bffe 	b.w	807b364 <EXTI4_IRQHandler>

0807b368 <EXTI5_IRQHandler>:
 807b368:	f7ff bffe 	b.w	807b368 <EXTI5_IRQHandler>

0807b36c <EXTI6_IRQHandler>:
 807b36c:	f7ff bffe 	b.w	807b36c <EXTI6_IRQHandler>

0807b370 <EXTI7_IRQHandler>:
 807b370:	f7ff bffe 	b.w	807b370 <EXTI7_IRQHandler>

0807b374 <EXTI8_IRQHandler>:
 807b374:	f7ff bffe 	b.w	807b374 <EXTI8_IRQHandler>

0807b378 <EXTI9_IRQHandler>:
 807b378:	f7ff bffe 	b.w	807b378 <EXTI9_IRQHandler>

0807b37c <EXTI10_IRQHandler>:
 807b37c:	f7ff bffe 	b.w	807b37c <EXTI10_IRQHandler>

0807b380 <EXTI11_IRQHandler>:
 807b380:	f7ff bffe 	b.w	807b380 <EXTI11_IRQHandler>

0807b384 <EXTI12_IRQHandler>:
 807b384:	f7ff bffe 	b.w	807b384 <EXTI12_IRQHandler>

0807b388 <EXTI13_IRQHandler>:
 807b388:	f7ff bffe 	b.w	807b388 <EXTI13_IRQHandler>

0807b38c <EXTI14_IRQHandler>:
 807b38c:	f7ff bffe 	b.w	807b38c <EXTI14_IRQHandler>

0807b390 <EXTI15_IRQHandler>:
 807b390:	f7ff bffe 	b.w	807b390 <EXTI15_IRQHandler>

0807b394 <DMAMUX1_IRQHandler>:
 807b394:	f7ff bffe 	b.w	807b394 <DMAMUX1_IRQHandler>

0807b398 <DMAMUX1_IRQHandler_S>:
 807b398:	f7ff bffe 	b.w	807b398 <DMAMUX1_IRQHandler_S>

0807b39c <DMA1_Channel1_IRQHandler>:
 807b39c:	f7ff bffe 	b.w	807b39c <DMA1_Channel1_IRQHandler>

0807b3a0 <DMA1_Channel2_IRQHandler>:
 807b3a0:	f7ff bffe 	b.w	807b3a0 <DMA1_Channel2_IRQHandler>

0807b3a4 <DMA1_Channel3_IRQHandler>:
 807b3a4:	f7ff bffe 	b.w	807b3a4 <DMA1_Channel3_IRQHandler>

0807b3a8 <DMA1_Channel4_IRQHandler>:
 807b3a8:	f7ff bffe 	b.w	807b3a8 <DMA1_Channel4_IRQHandler>

0807b3ac <DMA1_Channel5_IRQHandler>:
 807b3ac:	f7ff bffe 	b.w	807b3ac <DMA1_Channel5_IRQHandler>

0807b3b0 <DMA1_Channel6_IRQHandler>:
 807b3b0:	f7ff bffe 	b.w	807b3b0 <DMA1_Channel6_IRQHandler>

0807b3b4 <DMA1_Channel7_IRQHandler>:
 807b3b4:	f7ff bffe 	b.w	807b3b4 <DMA1_Channel7_IRQHandler>

0807b3b8 <DMA1_Channel8_IRQHandler>:
 807b3b8:	f7ff bffe 	b.w	807b3b8 <DMA1_Channel8_IRQHandler>

0807b3bc <ADC1_2_IRQHandler>:
 807b3bc:	f7ff bffe 	b.w	807b3bc <ADC1_2_IRQHandler>

0807b3c0 <DAC_IRQHandler>:
 807b3c0:	f7ff bffe 	b.w	807b3c0 <DAC_IRQHandler>

0807b3c4 <FDCAN1_IT0_IRQHandler>:
 807b3c4:	f7ff bffe 	b.w	807b3c4 <FDCAN1_IT0_IRQHandler>

0807b3c8 <FDCAN1_IT1_IRQHandler>:
 807b3c8:	f7ff bffe 	b.w	807b3c8 <FDCAN1_IT1_IRQHandler>

0807b3cc <TIM1_BRK_IRQHandler>:
 807b3cc:	f7ff bffe 	b.w	807b3cc <TIM1_BRK_IRQHandler>

0807b3d0 <TIM1_UP_IRQHandler>:
 807b3d0:	f7ff bffe 	b.w	807b3d0 <TIM1_UP_IRQHandler>

0807b3d4 <TIM1_TRG_COM_IRQHandler>:
 807b3d4:	f7ff bffe 	b.w	807b3d4 <TIM1_TRG_COM_IRQHandler>

0807b3d8 <TIM1_CC_IRQHandler>:
 807b3d8:	f7ff bffe 	b.w	807b3d8 <TIM1_CC_IRQHandler>

0807b3dc <TIM2_IRQHandler>:
 807b3dc:	f7ff bffe 	b.w	807b3dc <TIM2_IRQHandler>

0807b3e0 <TIM3_IRQHandler>:
 807b3e0:	f7ff bffe 	b.w	807b3e0 <TIM3_IRQHandler>

0807b3e4 <TIM4_IRQHandler>:
 807b3e4:	f7ff bffe 	b.w	807b3e4 <TIM4_IRQHandler>

0807b3e8 <TIM5_IRQHandler>:
 807b3e8:	f7ff bffe 	b.w	807b3e8 <TIM5_IRQHandler>

0807b3ec <TIM6_IRQHandler>:
 807b3ec:	f7ff bffe 	b.w	807b3ec <TIM6_IRQHandler>

0807b3f0 <TIM7_IRQHandler>:
 807b3f0:	f7ff bffe 	b.w	807b3f0 <TIM7_IRQHandler>

0807b3f4 <TIM8_BRK_IRQHandler>:
 807b3f4:	f7ff bffe 	b.w	807b3f4 <TIM8_BRK_IRQHandler>

0807b3f8 <TIM8_UP_IRQHandler>:
 807b3f8:	f7ff bffe 	b.w	807b3f8 <TIM8_UP_IRQHandler>

0807b3fc <TIM8_TRG_COM_IRQHandler>:
 807b3fc:	f7ff bffe 	b.w	807b3fc <TIM8_TRG_COM_IRQHandler>

0807b400 <TIM8_CC_IRQHandler>:
 807b400:	f7ff bffe 	b.w	807b400 <TIM8_CC_IRQHandler>

0807b404 <I2C1_EV_IRQHandler>:
 807b404:	f7ff bffe 	b.w	807b404 <I2C1_EV_IRQHandler>

0807b408 <I2C1_ER_IRQHandler>:
 807b408:	f7ff bffe 	b.w	807b408 <I2C1_ER_IRQHandler>

0807b40c <I2C2_EV_IRQHandler>:
 807b40c:	f7ff bffe 	b.w	807b40c <I2C2_EV_IRQHandler>

0807b410 <I2C2_ER_IRQHandler>:
 807b410:	f7ff bffe 	b.w	807b410 <I2C2_ER_IRQHandler>

0807b414 <SPI1_IRQHandler>:
 807b414:	f7ff bffe 	b.w	807b414 <SPI1_IRQHandler>

0807b418 <SPI2_IRQHandler>:
 807b418:	f7ff bffe 	b.w	807b418 <SPI2_IRQHandler>

0807b41c <USART1_IRQHandler>:
 807b41c:	f7ff bffe 	b.w	807b41c <USART1_IRQHandler>

0807b420 <USART2_IRQHandler>:
 807b420:	f7ff bffe 	b.w	807b420 <USART2_IRQHandler>

0807b424 <USART3_IRQHandler>:
 807b424:	f7ff bffe 	b.w	807b424 <USART3_IRQHandler>

0807b428 <UART4_IRQHandler>:
 807b428:	f7ff bffe 	b.w	807b428 <UART4_IRQHandler>

0807b42c <UART5_IRQHandler>:
 807b42c:	f7ff bffe 	b.w	807b42c <UART5_IRQHandler>

0807b430 <LPUART1_IRQHandler>:
 807b430:	f7ff bffe 	b.w	807b430 <LPUART1_IRQHandler>

0807b434 <LPTIM1_IRQHandler>:
 807b434:	f7ff bffe 	b.w	807b434 <LPTIM1_IRQHandler>

0807b438 <LPTIM2_IRQHandler>:
 807b438:	f7ff bffe 	b.w	807b438 <LPTIM2_IRQHandler>

0807b43c <TIM15_IRQHandler>:
 807b43c:	f7ff bffe 	b.w	807b43c <TIM15_IRQHandler>

0807b440 <TIM16_IRQHandler>:
 807b440:	f7ff bffe 	b.w	807b440 <TIM16_IRQHandler>

0807b444 <TIM17_IRQHandler>:
 807b444:	f7ff bffe 	b.w	807b444 <TIM17_IRQHandler>

0807b448 <COMP_IRQHandler>:
 807b448:	f7ff bffe 	b.w	807b448 <COMP_IRQHandler>

0807b44c <USB_FS_IRQHandler>:
 807b44c:	f7ff bffe 	b.w	807b44c <USB_FS_IRQHandler>

0807b450 <CRS_IRQHandler>:
 807b450:	f7ff bffe 	b.w	807b450 <CRS_IRQHandler>

0807b454 <FMC_IRQHandler>:
 807b454:	f7ff bffe 	b.w	807b454 <FMC_IRQHandler>

0807b458 <OCTOSPI1_IRQHandler>:
 807b458:	f7ff bffe 	b.w	807b458 <OCTOSPI1_IRQHandler>

0807b45c <SDMMC1_IRQHandler>:
 807b45c:	f7ff bffe 	b.w	807b45c <SDMMC1_IRQHandler>

0807b460 <DMA2_Channel1_IRQHandler>:
 807b460:	f7ff bffe 	b.w	807b460 <DMA2_Channel1_IRQHandler>

0807b464 <DMA2_Channel2_IRQHandler>:
 807b464:	f7ff bffe 	b.w	807b464 <DMA2_Channel2_IRQHandler>

0807b468 <DMA2_Channel3_IRQHandler>:
 807b468:	f7ff bffe 	b.w	807b468 <DMA2_Channel3_IRQHandler>

0807b46c <DMA2_Channel4_IRQHandler>:
 807b46c:	f7ff bffe 	b.w	807b46c <DMA2_Channel4_IRQHandler>

0807b470 <DMA2_Channel5_IRQHandler>:
 807b470:	f7ff bffe 	b.w	807b470 <DMA2_Channel5_IRQHandler>

0807b474 <DMA2_Channel6_IRQHandler>:
 807b474:	f7ff bffe 	b.w	807b474 <DMA2_Channel6_IRQHandler>

0807b478 <DMA2_Channel7_IRQHandler>:
 807b478:	f7ff bffe 	b.w	807b478 <DMA2_Channel7_IRQHandler>

0807b47c <DMA2_Channel8_IRQHandler>:
 807b47c:	f7ff bffe 	b.w	807b47c <DMA2_Channel8_IRQHandler>

0807b480 <I2C3_EV_IRQHandler>:
 807b480:	f7ff bffe 	b.w	807b480 <I2C3_EV_IRQHandler>

0807b484 <I2C3_ER_IRQHandler>:
 807b484:	f7ff bffe 	b.w	807b484 <I2C3_ER_IRQHandler>

0807b488 <SAI1_IRQHandler>:
 807b488:	f7ff bffe 	b.w	807b488 <SAI1_IRQHandler>

0807b48c <SAI2_IRQHandler>:
 807b48c:	f7ff bffe 	b.w	807b48c <SAI2_IRQHandler>

0807b490 <TSC_IRQHandler>:
 807b490:	f7ff bffe 	b.w	807b490 <TSC_IRQHandler>

0807b494 <RNG_IRQHandler>:
 807b494:	f7ff bffe 	b.w	807b494 <RNG_IRQHandler>

0807b498 <FPU_IRQHandler>:
 807b498:	f7ff bffe 	b.w	807b498 <FPU_IRQHandler>

0807b49c <LPTIM3_IRQHandler>:
 807b49c:	f7ff bffe 	b.w	807b49c <LPTIM3_IRQHandler>

0807b4a0 <SPI3_IRQHandler>:
 807b4a0:	f7ff bffe 	b.w	807b4a0 <SPI3_IRQHandler>

0807b4a4 <I2C4_ER_IRQHandler>:
 807b4a4:	f7ff bffe 	b.w	807b4a4 <I2C4_ER_IRQHandler>

0807b4a8 <I2C4_EV_IRQHandler>:
 807b4a8:	f7ff bffe 	b.w	807b4a8 <I2C4_EV_IRQHandler>

0807b4ac <DFSDM1_FLT0_IRQHandler>:
 807b4ac:	f7ff bffe 	b.w	807b4ac <DFSDM1_FLT0_IRQHandler>

0807b4b0 <DFSDM1_FLT1_IRQHandler>:
 807b4b0:	f7ff bffe 	b.w	807b4b0 <DFSDM1_FLT1_IRQHandler>

0807b4b4 <DFSDM1_FLT2_IRQHandler>:
 807b4b4:	f7ff bffe 	b.w	807b4b4 <DFSDM1_FLT2_IRQHandler>

0807b4b8 <DFSDM1_FLT3_IRQHandler>:
 807b4b8:	f7ff bffe 	b.w	807b4b8 <DFSDM1_FLT3_IRQHandler>

0807b4bc <UCPD1_IRQHandler>:
 807b4bc:	f7ff bffe 	b.w	807b4bc <UCPD1_IRQHandler>

0807b4c0 <ICACHE_IRQHandler>:
 807b4c0:	f7ff bffe 	b.w	807b4c0 <ICACHE_IRQHandler>

0807b4c4 <OTFDEC1_IRQHandler>:
 807b4c4:	f7ff bffe 	b.w	807b4c4 <OTFDEC1_IRQHandler>

0807b4c8 <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef  COM_Init(void)
{
 807b4c8:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 807b4ca:	4b10      	ldr	r3, [pc, #64]	; (807b50c <COM_Init+0x44>)
 807b4cc:	2202      	movs	r2, #2
 807b4ce:	6818      	ldr	r0, [r3, #0]
 807b4d0:	2300      	movs	r3, #0
 807b4d2:	6880      	ldr	r0, [r0, #8]
 807b4d4:	4619      	mov	r1, r3
 807b4d6:	f001 fc5f 	bl	807cd98 <setvbuf>
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  UartHandle.Instance = COM_UART;
  UartHandle.Init.BaudRate = 115200U;
 807b4da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  UartHandle.Instance = COM_UART;
 807b4de:	480c      	ldr	r0, [pc, #48]	; (807b510 <COM_Init+0x48>)
  UartHandle.Init.BaudRate = 115200U;
 807b4e0:	4a0c      	ldr	r2, [pc, #48]	; (807b514 <COM_Init+0x4c>)
 807b4e2:	e9c0 2300 	strd	r2, r3, [r0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 807b4e6:	2300      	movs	r3, #0
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 807b4e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 807b4ec:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 807b4ee:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 807b4f0:	230c      	movs	r3, #12
 807b4f2:	6143      	str	r3, [r0, #20]
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 807b4f4:	2310      	movs	r3, #16
 807b4f6:	6283      	str	r3, [r0, #40]	; 0x28
  UartHandle.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 807b4f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 807b4fc:	63c3      	str	r3, [r0, #60]	; 0x3c
  UartHandle.FifoMode = UART_FIFOMODE_ENABLE;
 807b4fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 807b502:	6643      	str	r3, [r0, #100]	; 0x64
  return HAL_UART_Init(&UartHandle);
}
 807b504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&UartHandle);
 807b508:	f001 bb48 	b.w	807cb9c <HAL_UART_Init>
 807b50c:	20000040 	.word	0x20000040
 807b510:	200000c8 	.word	0x200000c8
 807b514:	40008000 	.word	0x40008000

0807b518 <HAL_UART_MspInit>:
  * @brief  UART MSP Init.
  * @param  huart: UART handler pointer.
  * @retval None.
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 807b518:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if (huart->Instance == COM_UART)
 807b51a:	6802      	ldr	r2, [r0, #0]
 807b51c:	4b22      	ldr	r3, [pc, #136]	; (807b5a8 <HAL_UART_MspInit+0x90>)
{
 807b51e:	b08b      	sub	sp, #44	; 0x2c
  if (huart->Instance == COM_UART)
 807b520:	429a      	cmp	r2, r3
 807b522:	d13f      	bne.n	807b5a4 <HAL_UART_MspInit+0x8c>
  {
    /* Peripheral Clock Enable */
    COM_UART_CLK_ENABLE();
 807b524:	4c21      	ldr	r4, [pc, #132]	; (807b5ac <HAL_UART_MspInit+0x94>)
    COM_UART_TX_GPIO_CLK_ENABLE();
    COM_UART_RX_GPIO_CLK_ENABLE();

    /*Configure GPIO pins : COM_UART_TX_Pin  */
    GPIO_InitStruct.Pin = COM_UART_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 807b526:	2702      	movs	r7, #2
    COM_UART_CLK_ENABLE();
 807b528:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 807b52a:	2600      	movs	r6, #0
    COM_UART_CLK_ENABLE();
 807b52c:	f043 0301 	orr.w	r3, r3, #1
 807b530:	65e3      	str	r3, [r4, #92]	; 0x5c
 807b532:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 807b534:	2503      	movs	r5, #3
    COM_UART_CLK_ENABLE();
 807b536:	f003 0301 	and.w	r3, r3, #1
 807b53a:	9301      	str	r3, [sp, #4]
 807b53c:	9b01      	ldr	r3, [sp, #4]
    COM_UART_TX_GPIO_CLK_ENABLE();
 807b53e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 807b540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 807b544:	64e3      	str	r3, [r4, #76]	; 0x4c
 807b546:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 807b548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 807b54c:	9302      	str	r3, [sp, #8]
 807b54e:	9b02      	ldr	r3, [sp, #8]
 807b550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 807b552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807b556:	65a3      	str	r3, [r4, #88]	; 0x58
 807b558:	6da3      	ldr	r3, [r4, #88]	; 0x58
 807b55a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 807b55e:	9303      	str	r3, [sp, #12]
 807b560:	9b03      	ldr	r3, [sp, #12]
 807b562:	f000 ff83 	bl	807c46c <HAL_PWREx_EnableVddIO2>
    COM_UART_RX_GPIO_CLK_ENABLE();
 807b566:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 807b568:	4811      	ldr	r0, [pc, #68]	; (807b5b0 <HAL_UART_MspInit+0x98>)
    COM_UART_RX_GPIO_CLK_ENABLE();
 807b56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 807b56e:	64e3      	str	r3, [r4, #76]	; 0x4c
 807b570:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
 807b572:	2408      	movs	r4, #8
    COM_UART_RX_GPIO_CLK_ENABLE();
 807b574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 807b578:	9304      	str	r3, [sp, #16]
 807b57a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 807b57c:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 807b57e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 807b580:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 807b584:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
 807b588:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 807b58a:	f000 fea5 	bl	807c2d8 <HAL_GPIO_Init>

    /*Configure GPIO pins : COM_UART_RX_Pin  */
    GPIO_InitStruct.Pin = COM_UART_RX_PIN;
 807b58e:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = COM_UART_RX_AF;
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 807b592:	4807      	ldr	r0, [pc, #28]	; (807b5b0 <HAL_UART_MspInit+0x98>)
 807b594:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 807b596:	e9cd 3705 	strd	r3, r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 807b59a:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Alternate = COM_UART_RX_AF;
 807b59e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 807b5a0:	f000 fe9a 	bl	807c2d8 <HAL_GPIO_Init>

  }

}
 807b5a4:	b00b      	add	sp, #44	; 0x2c
 807b5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 807b5a8:	40008000 	.word	0x40008000
 807b5ac:	40021000 	.word	0x40021000
 807b5b0:	42021800 	.word	0x42021800

0807b5b4 <COM_Transmit>:
  * @param uDataLength: Data pointer to the Data to transmit.
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
 807b5b4:	4613      	mov	r3, r2
  return HAL_UART_Transmit(&UartHandle, (uint8_t *)Data, uDataLength, uTimeout);
 807b5b6:	460a      	mov	r2, r1
 807b5b8:	4601      	mov	r1, r0
 807b5ba:	4801      	ldr	r0, [pc, #4]	; (807b5c0 <COM_Transmit+0xc>)
 807b5bc:	f001 b9e3 	b.w	807c986 <HAL_UART_Transmit>
 807b5c0:	200000c8 	.word	0x200000c8

0807b5c4 <COM_Receive>:
  * @param uDataLength: Data pointer to the Data to receive.
  * @param uTimeout: Timeout duration.
  * @retval Status of the Receive operation.
  */
HAL_StatusTypeDef COM_Receive(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
 807b5c4:	4613      	mov	r3, r2
  return HAL_UART_Receive(&UartHandle, (uint8_t *)Data, uDataLength, uTimeout);
 807b5c6:	460a      	mov	r2, r1
 807b5c8:	4601      	mov	r1, r0
 807b5ca:	4801      	ldr	r0, [pc, #4]	; (807b5d0 <COM_Receive+0xc>)
 807b5cc:	f001 ba38 	b.w	807ca40 <HAL_UART_Receive>
 807b5d0:	200000c8 	.word	0x200000c8

0807b5d4 <COM_Flush>:
  * @retval HAL_Status.
  */
HAL_StatusTypeDef COM_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 807b5d4:	4b05      	ldr	r3, [pc, #20]	; (807b5ec <COM_Flush+0x18>)
  return HAL_OK;
}
 807b5d6:	2000      	movs	r0, #0
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 807b5d8:	681b      	ldr	r3, [r3, #0]
 807b5da:	699a      	ldr	r2, [r3, #24]
 807b5dc:	f042 0208 	orr.w	r2, r2, #8
 807b5e0:	619a      	str	r2, [r3, #24]
 807b5e2:	699a      	ldr	r2, [r3, #24]
 807b5e4:	f042 0210 	orr.w	r2, r2, #16
 807b5e8:	619a      	str	r2, [r3, #24]
}
 807b5ea:	4770      	bx	lr
 807b5ec:	200000c8 	.word	0x200000c8

0807b5f0 <Str2Int>:
  * @param  pIntNum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *pInputStr, uint32_t *pIntNum)
{
 807b5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  uint32_t res = 0U;
  uint32_t val = 0U;

  if ((pInputStr[0U] == '0') && ((pInputStr[1U] == 'x') || (pInputStr[1U] == 'X')))
 807b5f2:	7803      	ldrb	r3, [r0, #0]
 807b5f4:	2b30      	cmp	r3, #48	; 0x30
 807b5f6:	d129      	bne.n	807b64c <Str2Int+0x5c>
 807b5f8:	7843      	ldrb	r3, [r0, #1]
 807b5fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 807b5fe:	2b58      	cmp	r3, #88	; 0x58
 807b600:	d124      	bne.n	807b64c <Str2Int+0x5c>
 807b602:	2400      	movs	r4, #0
 807b604:	2502      	movs	r5, #2
  {
    i = 2U;
    while ((i < 11U) && (pInputStr[i] != '\0'))
 807b606:	5d43      	ldrb	r3, [r0, r5]
 807b608:	b193      	cbz	r3, 807b630 <Str2Int+0x40>
    {
      if (ISVALIDHEX(pInputStr[i]))
 807b60a:	f023 0620 	bic.w	r6, r3, #32
 807b60e:	3e41      	subs	r6, #65	; 0x41
 807b610:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 807b614:	2e05      	cmp	r6, #5
 807b616:	b2d7      	uxtb	r7, r2
 807b618:	d901      	bls.n	807b61e <Str2Int+0x2e>
 807b61a:	2f09      	cmp	r7, #9
 807b61c:	d808      	bhi.n	807b630 <Str2Int+0x40>
      {
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 807b61e:	2f09      	cmp	r7, #9
 807b620:	ea4f 1404 	mov.w	r4, r4, lsl #4
 807b624:	d808      	bhi.n	807b638 <Str2Int+0x48>
 807b626:	4613      	mov	r3, r2
      {
        /* Return 0, Invalid input */
        res = 0U;
        break;
      }
      i++;
 807b628:	3501      	adds	r5, #1
    while ((i < 11U) && (pInputStr[i] != '\0'))
 807b62a:	2d0b      	cmp	r5, #11
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 807b62c:	441c      	add	r4, r3
    while ((i < 11U) && (pInputStr[i] != '\0'))
 807b62e:	d1ea      	bne.n	807b606 <Str2Int+0x16>
    }

    /* valid result */
    if (pInputStr[i] == '\0')
 807b630:	5d43      	ldrb	r3, [r0, r5]
 807b632:	b143      	cbz	r3, 807b646 <Str2Int+0x56>
      res = 1U;
    }
  }
  else /* max 10-digit decimal input */
  {
    while ((i < 11U) && (res != 1U))
 807b634:	2000      	movs	r0, #0
      i++;
    }
  }

  return res;
}
 807b636:	bdf0      	pop	{r4, r5, r6, r7, pc}
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 807b638:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 807b63c:	2a05      	cmp	r2, #5
 807b63e:	bf94      	ite	ls
 807b640:	3b37      	subls	r3, #55	; 0x37
 807b642:	3b57      	subhi	r3, #87	; 0x57
 807b644:	e7f0      	b.n	807b628 <Str2Int+0x38>
      *pIntNum = val;
 807b646:	600c      	str	r4, [r1, #0]
      res = 1U;
 807b648:	2001      	movs	r0, #1
 807b64a:	e7f4      	b.n	807b636 <Str2Int+0x46>
 807b64c:	2300      	movs	r3, #0
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 807b64e:	270a      	movs	r7, #10
 807b650:	1e44      	subs	r4, r0, #1
 807b652:	f100 060a 	add.w	r6, r0, #10
      if (pInputStr[i] == '\0')
 807b656:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 807b65a:	b90a      	cbnz	r2, 807b660 <Str2Int+0x70>
        *pIntNum = val;
 807b65c:	600b      	str	r3, [r1, #0]
        res = 1U;
 807b65e:	e7f3      	b.n	807b648 <Str2Int+0x58>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 807b660:	f002 05df 	and.w	r5, r2, #223	; 0xdf
 807b664:	2d4b      	cmp	r5, #75	; 0x4b
 807b666:	d103      	bne.n	807b670 <Str2Int+0x80>
 807b668:	42a0      	cmp	r0, r4
 807b66a:	d003      	beq.n	807b674 <Str2Int+0x84>
        val = val << 10U;
 807b66c:	029b      	lsls	r3, r3, #10
 807b66e:	e7f5      	b.n	807b65c <Str2Int+0x6c>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 807b670:	2d4d      	cmp	r5, #77	; 0x4d
 807b672:	d008      	beq.n	807b686 <Str2Int+0x96>
      else if (ISVALIDDEC(pInputStr[i]))
 807b674:	3a30      	subs	r2, #48	; 0x30
 807b676:	b2d5      	uxtb	r5, r2
 807b678:	2d09      	cmp	r5, #9
 807b67a:	d8db      	bhi.n	807b634 <Str2Int+0x44>
    while ((i < 11U) && (res != 1U))
 807b67c:	42b4      	cmp	r4, r6
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 807b67e:	fb07 2303 	mla	r3, r7, r3, r2
    while ((i < 11U) && (res != 1U))
 807b682:	d1e8      	bne.n	807b656 <Str2Int+0x66>
 807b684:	e7d6      	b.n	807b634 <Str2Int+0x44>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 807b686:	42a0      	cmp	r0, r4
 807b688:	d0d4      	beq.n	807b634 <Str2Int+0x44>
        val = val << 20U;
 807b68a:	051b      	lsls	r3, r3, #20
 807b68c:	e7e6      	b.n	807b65c <Str2Int+0x6c>

0807b68e <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t uParam)
{
 807b68e:	b507      	push	{r0, r1, r2, lr}
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 807b690:	2264      	movs	r2, #100	; 0x64
{
 807b692:	f88d 0007 	strb.w	r0, [sp, #7]
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 807b696:	2101      	movs	r1, #1
 807b698:	f10d 0007 	add.w	r0, sp, #7
 807b69c:	f7ff ff8a 	bl	807b5b4 <COM_Transmit>
}
 807b6a0:	b003      	add	sp, #12
 807b6a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0807b6a8 <FW_UPDATE_PrintWelcome>:
  * @brief  Display the FW_UPDATE Main Menu choices on HyperTerminal
  * @param  None.
  * @retval None.
  */
static void FW_UPDATE_PrintWelcome(void)
{
 807b6a8:	b508      	push	{r3, lr}
  printf("\r\n================ New Fw Download =========================\r\n\n");
 807b6aa:	4805      	ldr	r0, [pc, #20]	; (807b6c0 <FW_UPDATE_PrintWelcome+0x18>)
 807b6ac:	f001 fb6c 	bl	807cd88 <puts>
  printf("  Reset to trigger Installation ------------------------- 1\r\n\n");
 807b6b0:	4804      	ldr	r0, [pc, #16]	; (807b6c4 <FW_UPDATE_PrintWelcome+0x1c>)
 807b6b2:	f001 fb69 	bl	807cd88 <puts>
  printf("  Download Secure Image --------------------------------- 2\r\n\n");
  printf("  Download NonSecure Image ------------------------------ 3\r\n\n");
#else
  printf("  Download Image ---------------------------------------- 2\r\n\n");
#endif /* (MCUBOOT_IMAGE_NUMBER == 2) */
}
 807b6b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("  Download Image ---------------------------------------- 2\r\n\n");
 807b6ba:	4803      	ldr	r0, [pc, #12]	; (807b6c8 <FW_UPDATE_PrintWelcome+0x20>)
 807b6bc:	f001 bb64 	b.w	807cd88 <puts>
 807b6c0:	0807e190 	.word	0x0807e190
 807b6c4:	0807e1cf 	.word	0x0807e1cf
 807b6c8:	0807e20d 	.word	0x0807e20d

0807b6cc <FW_UPDATE_Run>:
  uint8_t key = 0U;
 807b6cc:	2300      	movs	r3, #0
{
 807b6ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t key = 0U;
 807b6d0:	f88d 3003 	strb.w	r3, [sp, #3]
  FW_UPDATE_PrintWelcome();
 807b6d4:	f7ff ffe8 	bl	807b6a8 <FW_UPDATE_PrintWelcome>
          printf("Invalid Number !\r");
 807b6d8:	4e40      	ldr	r6, [pc, #256]	; (807b7dc <FW_UPDATE_Run+0x110>)
  ARM_FLASH_INFO *data = LOADER_FLASH_DEV_NAME.GetInfo();
 807b6da:	4d41      	ldr	r5, [pc, #260]	; (807b7e0 <FW_UPDATE_Run+0x114>)
    key = 0U;
 807b6dc:	2400      	movs	r4, #0
 807b6de:	f88d 4003 	strb.w	r4, [sp, #3]
    COM_Flush();
 807b6e2:	f7ff ff77 	bl	807b5d4 <COM_Flush>
    if (COM_Receive(&key, 1U, RX_TIMEOUT) == HAL_OK)
 807b6e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 807b6ea:	2101      	movs	r1, #1
 807b6ec:	f10d 0003 	add.w	r0, sp, #3
 807b6f0:	f7ff ff68 	bl	807b5c4 <COM_Receive>
 807b6f4:	2800      	cmp	r0, #0
 807b6f6:	d1f2      	bne.n	807b6de <FW_UPDATE_Run+0x12>
      switch (key)
 807b6f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 807b6fc:	2b31      	cmp	r3, #49	; 0x31
 807b6fe:	d005      	beq.n	807b70c <FW_UPDATE_Run+0x40>
 807b700:	2b32      	cmp	r3, #50	; 0x32
 807b702:	d013      	beq.n	807b72c <FW_UPDATE_Run+0x60>
          printf("Invalid Number !\r");
 807b704:	4630      	mov	r0, r6
 807b706:	f001 fab9 	bl	807cc7c <iprintf>
          break;
 807b70a:	e04f      	b.n	807b7ac <FW_UPDATE_Run+0xe0>
          printf("  -- Install image : reboot\r\n\n");
 807b70c:	4835      	ldr	r0, [pc, #212]	; (807b7e4 <FW_UPDATE_Run+0x118>)
 807b70e:	f001 fb3b 	bl	807cd88 <puts>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 807b712:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 807b716:	4934      	ldr	r1, [pc, #208]	; (807b7e8 <FW_UPDATE_Run+0x11c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 807b718:	4b34      	ldr	r3, [pc, #208]	; (807b7ec <FW_UPDATE_Run+0x120>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 807b71a:	68ca      	ldr	r2, [r1, #12]
 807b71c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 807b720:	4313      	orrs	r3, r2
 807b722:	60cb      	str	r3, [r1, #12]
 807b724:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 807b728:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 807b72a:	e7fd      	b.n	807b728 <FW_UPDATE_Run+0x5c>
  ARM_FLASH_INFO *data = LOADER_FLASH_DEV_NAME.GetInfo();
 807b72c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 807b72e:	4798      	blx	r3
 807b730:	4604      	mov	r4, r0
  printf("Download Image\r\n");
 807b732:	482f      	ldr	r0, [pc, #188]	; (807b7f0 <FW_UPDATE_Run+0x124>)
 807b734:	f001 fb28 	bl	807cd88 <puts>
  m_uFlashSectorSize = data->sector_size;
 807b738:	4f2e      	ldr	r7, [pc, #184]	; (807b7f4 <FW_UPDATE_Run+0x128>)
 807b73a:	68a3      	ldr	r3, [r4, #8]
  int32_t ret_arm;
  uint32_t u_fw_size = pFwImageDwlArea->MaxSizeInBytes ;
  uint32_t sector_address;

  /* Clear download area */
  printf("  -- Erasing download area \r\n\n");
 807b73c:	482e      	ldr	r0, [pc, #184]	; (807b7f8 <FW_UPDATE_Run+0x12c>)
  m_uFlashSectorSize = data->sector_size;
 807b73e:	603b      	str	r3, [r7, #0]
  m_uFlashMinWriteSize = data->program_unit;
 807b740:	6923      	ldr	r3, [r4, #16]

  for (sector_address = pFwImageDwlArea->DownloadAddr;
 807b742:	f44f 4450 	mov.w	r4, #53248	; 0xd000
  m_uFlashMinWriteSize = data->program_unit;
 807b746:	607b      	str	r3, [r7, #4]
  uint32_t u_fw_size = pFwImageDwlArea->MaxSizeInBytes ;
 807b748:	f44f 23d6 	mov.w	r3, #438272	; 0x6b000
 807b74c:	9301      	str	r3, [sp, #4]
  printf("  -- Erasing download area \r\n\n");
 807b74e:	f001 fb1b 	bl	807cd88 <puts>
       sector_address < pFwImageDwlArea->DownloadAddr + pFwImageDwlArea->MaxSizeInBytes;
       sector_address += m_uFlashSectorSize)
  {
#if defined(MCUBOOT_PRIMARY_ONLY)
    if (sector_address < NS_IMAGE_PRIMARY_PARTITION_OFFSET)
 807b752:	f5b4 3fa8 	cmp.w	r4, #86016	; 0x15000
 807b756:	d22c      	bcs.n	807b7b2 <FW_UPDATE_Run+0xe6>
    {
      ret_arm = SECURE_Flash_EraseSector(sector_address);
 807b758:	4620      	mov	r0, r4
 807b75a:	f002 fd09 	bl	807e170 <__SECURE_Flash_EraseSector_veneer>
      ret_arm = LOADER_FLASH_DEV_NAME.EraseSector(sector_address);
    }
#else
    ret_arm = LOADER_FLASH_DEV_NAME.EraseSector(sector_address);
#endif /*  defined(MCUBOOT_PRIMARY_ONLY) */
    if (ret_arm < 0)
 807b75e:	2800      	cmp	r0, #0
 807b760:	db24      	blt.n	807b7ac <FW_UPDATE_Run+0xe0>
       sector_address += m_uFlashSectorSize)
 807b762:	683b      	ldr	r3, [r7, #0]
 807b764:	441c      	add	r4, r3
  for (sector_address = pFwImageDwlArea->DownloadAddr;
 807b766:	f5b4 2ff0 	cmp.w	r4, #491520	; 0x78000
 807b76a:	d3f2      	bcc.n	807b752 <FW_UPDATE_Run+0x86>
    {
      return HAL_ERROR;
    }
  }

  printf("  -- Send Firmware \r\n\n");
 807b76c:	4823      	ldr	r0, [pc, #140]	; (807b7fc <FW_UPDATE_Run+0x130>)
 807b76e:	f001 fb0b 	bl	807cd88 <puts>

  /* Download binary */
  printf("  -- -- File> Transfer> YMODEM> Send \t\n");
 807b772:	4823      	ldr	r0, [pc, #140]	; (807b800 <FW_UPDATE_Run+0x134>)
 807b774:	f001 fb08 	bl	807cd88 <puts>

  /*Init of Ymodem*/
  Ymodem_Init();
 807b778:	f000 fa14 	bl	807bba4 <Ymodem_Init>

  /*Receive through Ymodem*/
  e_result = Ymodem_Receive(&u_fw_size, pFwImageDwlArea->DownloadAddr);
 807b77c:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 807b780:	a801      	add	r0, sp, #4
 807b782:	f000 fa39 	bl	807bbf8 <Ymodem_Receive>
 807b786:	4604      	mov	r4, r0
  printf("\r\n\n");
 807b788:	481e      	ldr	r0, [pc, #120]	; (807b804 <FW_UPDATE_Run+0x138>)
 807b78a:	f001 fafd 	bl	807cd88 <puts>

  if ((e_result == COM_OK))
 807b78e:	b9a4      	cbnz	r4, 807b7ba <FW_UPDATE_Run+0xee>
  {
    printf("  -- -- Programming Completed Successfully!\r\n\n");
 807b790:	481d      	ldr	r0, [pc, #116]	; (807b808 <FW_UPDATE_Run+0x13c>)
 807b792:	f001 faf9 	bl	807cd88 <puts>
#if defined(__ARMCC_VERSION)
    printf("  -- -- Bytes: %u\r\n\n", u_fw_size);
#else
    printf("  -- -- Bytes: %lu\r\n\n", u_fw_size);
 807b796:	9901      	ldr	r1, [sp, #4]
 807b798:	481c      	ldr	r0, [pc, #112]	; (807b80c <FW_UPDATE_Run+0x140>)
 807b79a:	f001 fa6f 	bl	807cc7c <iprintf>
    printf("  -- Image correctly downloaded \r\n\n");
 807b79e:	481c      	ldr	r0, [pc, #112]	; (807b810 <FW_UPDATE_Run+0x144>)
 807b7a0:	f001 faf2 	bl	807cd88 <puts>
    HAL_Delay(1000U);
 807b7a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 807b7a8:	f000 fb90 	bl	807becc <HAL_Delay>
      FW_UPDATE_PrintWelcome();
 807b7ac:	f7ff ff7c 	bl	807b6a8 <FW_UPDATE_PrintWelcome>
 807b7b0:	e794      	b.n	807b6dc <FW_UPDATE_Run+0x10>
      ret_arm = LOADER_FLASH_DEV_NAME.EraseSector(sector_address);
 807b7b2:	4620      	mov	r0, r4
 807b7b4:	69eb      	ldr	r3, [r5, #28]
 807b7b6:	4798      	blx	r3
 807b7b8:	e7d1      	b.n	807b75e <FW_UPDATE_Run+0x92>
        ret = HAL_ERROR;
      }
    }
#endif /* !defined(MCUBOOT_PRIMARY_ONLY) */
  }
  else if (e_result == COM_ABORT)
 807b7ba:	2c02      	cmp	r4, #2
 807b7bc:	d105      	bne.n	807b7ca <FW_UPDATE_Run+0xfe>
  {
    printf("  -- -- !!Aborted by user!!\r\n\n");
 807b7be:	4815      	ldr	r0, [pc, #84]	; (807b814 <FW_UPDATE_Run+0x148>)
 807b7c0:	f001 fae2 	bl	807cd88 <puts>
  else
  {
    printf("  -- -- !!Error during file download!!\r\n\n");
    ret = HAL_ERROR;
    HAL_Delay(500U);
    COM_Flush();
 807b7c4:	f7ff ff06 	bl	807b5d4 <COM_Flush>
  if (HAL_OK == ret)
 807b7c8:	e7f0      	b.n	807b7ac <FW_UPDATE_Run+0xe0>
    printf("  -- -- !!Error during file download!!\r\n\n");
 807b7ca:	4813      	ldr	r0, [pc, #76]	; (807b818 <FW_UPDATE_Run+0x14c>)
 807b7cc:	f001 fadc 	bl	807cd88 <puts>
    HAL_Delay(500U);
 807b7d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 807b7d4:	f000 fb7a 	bl	807becc <HAL_Delay>
 807b7d8:	e7f4      	b.n	807b7c4 <FW_UPDATE_Run+0xf8>
 807b7da:	bf00      	nop
 807b7dc:	0807e382 	.word	0x0807e382
 807b7e0:	0807e3ac 	.word	0x0807e3ac
 807b7e4:	0807e24b 	.word	0x0807e24b
 807b7e8:	e000ed00 	.word	0xe000ed00
 807b7ec:	05fa0004 	.word	0x05fa0004
 807b7f0:	0807e269 	.word	0x0807e269
 807b7f4:	20000158 	.word	0x20000158
 807b7f8:	0807e279 	.word	0x0807e279
 807b7fc:	0807e297 	.word	0x0807e297
 807b800:	0807e2ad 	.word	0x0807e2ad
 807b804:	0807e294 	.word	0x0807e294
 807b808:	0807e2d4 	.word	0x0807e2d4
 807b80c:	0807e302 	.word	0x0807e302
 807b810:	0807e318 	.word	0x0807e318
 807b814:	0807e33b 	.word	0x0807e33b
 807b818:	0807e359 	.word	0x0807e359

0807b81c <Ymodem_HeaderPktRxCpltCallback>:
  * @brief  Ymodem Header Packet Transfer completed callback.
  * @param  uFileSize Dimension of the file that will be received (Bytes).
  * @retval None
  */
HAL_StatusTypeDef Ymodem_HeaderPktRxCpltCallback(uint32_t uFlashDestination, uint32_t uFileSize)
{
 807b81c:	b510      	push	{r4, lr}
  /*Reset of the ymodem variables */
  m_uFileSizeYmodem = 0U;
  m_uPacketsReceived = 0U;
 807b81e:	2400      	movs	r4, #0
 807b820:	4b06      	ldr	r3, [pc, #24]	; (807b83c <Ymodem_HeaderPktRxCpltCallback+0x20>)

  /* compute the number of 1K blocks */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_1K_SIZE - 1U)) / PACKET_1K_SIZE;

  /* NOTE : delay inserted for Ymodem protocol*/
  HAL_Delay(1000);
 807b822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  m_uFileSizeYmodem = uFileSize;
 807b826:	e9c3 4102 	strd	r4, r1, [r3, #8]
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_1K_SIZE - 1U)) / PACKET_1K_SIZE;
 807b82a:	f201 31ff 	addw	r1, r1, #1023	; 0x3ff
 807b82e:	0a89      	lsrs	r1, r1, #10
 807b830:	6119      	str	r1, [r3, #16]
  HAL_Delay(1000);
 807b832:	f000 fb4b 	bl	807becc <HAL_Delay>
  return HAL_OK;
}
 807b836:	4620      	mov	r0, r4
 807b838:	bd10      	pop	{r4, pc}
 807b83a:	bf00      	nop
 807b83c:	20000158 	.word	0x20000158

0807b840 <Ymodem_DataPktRxCpltCallback>:
  * @param  pData Pointer to the buffer.
  * @param  uSize Packet dimension (Bytes).
  * @retval None
  */
HAL_StatusTypeDef Ymodem_DataPktRxCpltCallback(uint8_t *pData, uint32_t uFlashDestination, uint32_t uSize)
{
 807b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t ret;
  m_uPacketsReceived++;
 807b844:	4d1c      	ldr	r5, [pc, #112]	; (807b8b8 <Ymodem_DataPktRxCpltCallback+0x78>)
{
 807b846:	4614      	mov	r4, r2
  m_uPacketsReceived++;
 807b848:	68ab      	ldr	r3, [r5, #8]

  /*Increase the number of received packets*/
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 807b84a:	692a      	ldr	r2, [r5, #16]
  m_uPacketsReceived++;
 807b84c:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 807b84e:	4293      	cmp	r3, r2
{
 807b850:	4680      	mov	r8, r0
 807b852:	460f      	mov	r7, r1
  m_uPacketsReceived++;
 807b854:	60ab      	str	r3, [r5, #8]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 807b856:	d108      	bne.n	807b86a <Ymodem_DataPktRxCpltCallback+0x2a>
  {
    /*Extracting actual payload from last packet*/
    if (0 == (m_uFileSizeYmodem % PACKET_1K_SIZE))
 807b858:	68ec      	ldr	r4, [r5, #12]
    {
      /* The last packet is not full, drop the extra bytes */
      uSize = m_uFileSizeYmodem - ((uint32_t)(m_uFileSizeYmodem / PACKET_1K_SIZE) * PACKET_1K_SIZE);
    }

    m_uPacketsReceived = 0U;
 807b85a:	2300      	movs	r3, #0
    if (0 == (m_uFileSizeYmodem % PACKET_1K_SIZE))
 807b85c:	f3c4 0409 	ubfx	r4, r4, #0, #10
      uSize = PACKET_1K_SIZE;
 807b860:	2c00      	cmp	r4, #0
 807b862:	bf08      	it	eq
 807b864:	f44f 6480 	moveq.w	r4, #1024	; 0x400
    m_uPacketsReceived = 0U;
 807b868:	60ab      	str	r3, [r5, #8]
  }
  /*Adjust dimension to 64-bit length */
  if (uSize %  m_uFlashMinWriteSize != 0U)
 807b86a:	686a      	ldr	r2, [r5, #4]
 807b86c:	fbb4 f6f2 	udiv	r6, r4, r2
 807b870:	fb02 4616 	mls	r6, r2, r6, r4
 807b874:	b13e      	cbz	r6, 807b886 <Ymodem_DataPktRxCpltCallback+0x46>
  {
    memset(&pData[uSize], 0xff, (m_uFlashMinWriteSize - (uSize %  m_uFlashMinWriteSize)));
 807b876:	1b96      	subs	r6, r2, r6
 807b878:	eb08 0004 	add.w	r0, r8, r4
 807b87c:	4632      	mov	r2, r6
 807b87e:	21ff      	movs	r1, #255	; 0xff
 807b880:	f001 f9f4 	bl	807cc6c <memset>
    uSize += (m_uFlashMinWriteSize - (uSize %  m_uFlashMinWriteSize));
 807b884:	4434      	add	r4, r6
  }
  /* Write Data in Flash - size has to be 64-bit aligned */
#if defined(MCUBOOT_PRIMARY_ONLY)
  if (uFlashDestination < NS_IMAGE_PRIMARY_PARTITION_OFFSET)
 807b886:	f5b7 3fa8 	cmp.w	r7, #86016	; 0x15000
 807b88a:	d20e      	bcs.n	807b8aa <Ymodem_DataPktRxCpltCallback+0x6a>
  {
    ret = SECURE_Flash_ProgramData(uFlashDestination, pData, uSize);
 807b88c:	4622      	mov	r2, r4
 807b88e:	4641      	mov	r1, r8
 807b890:	4638      	mov	r0, r7
 807b892:	f002 fc75 	bl	807e180 <__SECURE_Flash_ProgramData_veneer>
  else
    ret = LOADER_FLASH_DEV_NAME.ProgramData(uFlashDestination, pData, uSize);
#else
  ret = LOADER_FLASH_DEV_NAME.ProgramData(uFlashDestination, pData, uSize);
#endif /*defined(MCUBOOT_PRIMARY_ONLY) */
  if (ret < 0)
 807b896:	2800      	cmp	r0, #0
 807b898:	f04f 0000 	mov.w	r0, #0
  {
    /*Reset of the ymodem variables */
    m_uFileSizeYmodem = 0U;
    m_uPacketsReceived = 0U;
 807b89c:	bfbe      	ittt	lt
 807b89e:	e9c5 0002 	strdlt	r0, r0, [r5, #8]
    m_uNbrBlocksYmodem = 0U;
 807b8a2:	6128      	strlt	r0, [r5, #16]
    return HAL_ERROR;
 807b8a4:	2001      	movlt	r0, #1
  }
  else
    return HAL_OK;
}
 807b8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = LOADER_FLASH_DEV_NAME.ProgramData(uFlashDestination, pData, uSize);
 807b8aa:	4b04      	ldr	r3, [pc, #16]	; (807b8bc <Ymodem_DataPktRxCpltCallback+0x7c>)
 807b8ac:	4622      	mov	r2, r4
 807b8ae:	4641      	mov	r1, r8
 807b8b0:	4638      	mov	r0, r7
 807b8b2:	699b      	ldr	r3, [r3, #24]
 807b8b4:	4798      	blx	r3
 807b8b6:	e7ee      	b.n	807b896 <Ymodem_DataPktRxCpltCallback+0x56>
 807b8b8:	20000158 	.word	0x20000158
 807b8bc:	0807e3ac 	.word	0x0807e3ac

0807b8c0 <Flash_GetInfo>:
}
#endif
static ARM_FLASH_INFO *Flash_GetInfo(void)
{
  return ARM_FLASH0_DEV.data;
}
 807b8c0:	4800      	ldr	r0, [pc, #0]	; (807b8c4 <Flash_GetInfo+0x4>)
 807b8c2:	4770      	bx	lr
 807b8c4:	0807e394 	.word	0x0807e394

0807b8c8 <Flash_Initialize>:
{
 807b8c8:	b508      	push	{r3, lr}
  FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 807b8ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 807b8ce:	f000 fc0d 	bl	807c0ec <FLASH_WaitForLastOperation>
}
 807b8d2:	2000      	movs	r0, #0
 807b8d4:	bd08      	pop	{r3, pc}
	...

0807b8d8 <Flash_EraseSector>:
{
 807b8d8:	b530      	push	{r4, r5, lr}
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 807b8da:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
{
 807b8de:	b087      	sub	sp, #28
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 807b8e0:	d208      	bcs.n	807b8f4 <Flash_EraseSector+0x1c>
  return ((param % (flash_dev->data->sector_size)) != 0) ? (false) : (true);
 807b8e2:	f3c0 030b 	ubfx	r3, r0, #0, #12
  if (!(is_range_valid(&ARM_FLASH0_DEV, addr)) ||
 807b8e6:	b92b      	cbnz	r3, 807b8f4 <Flash_EraseSector+0x1c>
  for (nb = 0; nb < vect->nb; nb++)
 807b8e8:	4a21      	ldr	r2, [pc, #132]	; (807b970 <Flash_EraseSector+0x98>)
    if ((param >= vect->range[nb].base) && (param <= vect->range[nb].limit))
 807b8ea:	e9d2 1200 	ldrd	r1, r2, [r2]
 807b8ee:	1d14      	adds	r4, r2, #4
  for (nb = 0; nb < vect->nb; nb++)
 807b8f0:	428b      	cmp	r3, r1
 807b8f2:	d108      	bne.n	807b906 <Flash_EraseSector+0x2e>
    return ARM_DRIVER_ERROR_PARAMETER;
 807b8f4:	f06f 0004 	mvn.w	r0, #4
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_ERROR;
 807b8f8:	4a1e      	ldr	r2, [pc, #120]	; (807b974 <Flash_EraseSector+0x9c>)
 807b8fa:	6813      	ldr	r3, [r2, #0]
 807b8fc:	f043 0302 	orr.w	r3, r3, #2
 807b900:	6013      	str	r3, [r2, #0]
}
 807b902:	b007      	add	sp, #28
 807b904:	bd30      	pop	{r4, r5, pc}
    if ((param >= vect->range[nb].base) && (param <= vect->range[nb].limit))
 807b906:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 807b90a:	42a8      	cmp	r0, r5
 807b90c:	d303      	bcc.n	807b916 <Flash_EraseSector+0x3e>
 807b90e:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
 807b912:	42a8      	cmp	r0, r5
 807b914:	d901      	bls.n	807b91a <Flash_EraseSector+0x42>
  for (nb = 0; nb < vect->nb; nb++)
 807b916:	3301      	adds	r3, #1
 807b918:	e7ea      	b.n	807b8f0 <Flash_EraseSector+0x18>
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 807b91a:	2302      	movs	r3, #2
  return ((param >= (FLASH_TOTAL_SIZE / 2)) ? 2 : 1);
 807b91c:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 807b920:	bf2c      	ite	cs
 807b922:	461a      	movcs	r2, r3
 807b924:	2201      	movcc	r2, #1
  page = ((page > (flash_dev->data->sector_count))) ? page - ((flash_dev->data->sector_count)) : page;
 807b926:	f5b0 2f81 	cmp.w	r0, #264192	; 0x40800
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 807b92a:	9302      	str	r3, [sp, #8]
  EraseInit.NbPages = 2;
 807b92c:	9305      	str	r3, [sp, #20]
  EraseInit.Banks = bank_number(&ARM_FLASH0_DEV, addr);
 807b92e:	9203      	str	r2, [sp, #12]
  uint32_t page = param / flash_dev->data->page_size ;
 807b930:	ea4f 23d0 	mov.w	r3, r0, lsr #11
  page = ((page > (flash_dev->data->sector_count))) ? page - ((flash_dev->data->sector_count)) : page;
 807b934:	d300      	bcc.n	807b938 <Flash_EraseSector+0x60>
 807b936:	3b80      	subs	r3, #128	; 0x80
  ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 807b938:	4d0e      	ldr	r5, [pc, #56]	; (807b974 <Flash_EraseSector+0x9c>)
  EraseInit.Page = page_number(&ARM_FLASH0_DEV, addr);
 807b93a:	9304      	str	r3, [sp, #16]
  ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 807b93c:	682b      	ldr	r3, [r5, #0]
 807b93e:	f36f 0341 	bfc	r3, #1, #1
 807b942:	602b      	str	r3, [r5, #0]
  HAL_FLASH_Unlock();
 807b944:	f000 fbb4 	bl	807c0b0 <HAL_FLASH_Unlock>
  ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 807b948:	682b      	ldr	r3, [r5, #0]
  err = HAL_FLASHEx_Erase(&EraseInit, &pageError);
 807b94a:	a901      	add	r1, sp, #4
  ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 807b94c:	f043 0301 	orr.w	r3, r3, #1
 807b950:	602b      	str	r3, [r5, #0]
  err = HAL_FLASHEx_Erase(&EraseInit, &pageError);
 807b952:	a802      	add	r0, sp, #8
 807b954:	f000 fc72 	bl	807c23c <HAL_FLASHEx_Erase>
 807b958:	4604      	mov	r4, r0
  ARM_FLASH0_STATUS.busy = DRIVER_STATUS_IDLE;
 807b95a:	682b      	ldr	r3, [r5, #0]
 807b95c:	f36f 0300 	bfc	r3, #0, #1
 807b960:	602b      	str	r3, [r5, #0]
  HAL_FLASH_Lock();
 807b962:	f000 fbb7 	bl	807c0d4 <HAL_FLASH_Lock>
  return (err == HAL_OK) ? ARM_DRIVER_OK : ARM_DRIVER_ERROR;
 807b966:	1e20      	subs	r0, r4, #0
 807b968:	bf18      	it	ne
 807b96a:	2001      	movne	r0, #1
 807b96c:	4240      	negs	r0, r0
 807b96e:	e7c8      	b.n	807b902 <Flash_EraseSector+0x2a>
 807b970:	20000000 	.word	0x20000000
 807b974:	2000016c 	.word	0x2000016c

0807b978 <Flash_ProgramData>:
{
 807b978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 807b97c:	4c29      	ldr	r4, [pc, #164]	; (807ba24 <Flash_ProgramData+0xac>)
{
 807b97e:	4617      	mov	r7, r2
  ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 807b980:	6823      	ldr	r3, [r4, #0]
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 807b982:	3a01      	subs	r2, #1
 807b984:	4402      	add	r2, r0
  ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 807b986:	f36f 0341 	bfc	r3, #1, #1
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 807b98a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
{
 807b98e:	4681      	mov	r9, r0
 807b990:	4688      	mov	r8, r1
  ARM_FLASH0_STATUS.error = DRIVER_STATUS_NO_ERROR;
 807b992:	6023      	str	r3, [r4, #0]
  if ((!is_range_valid(&ARM_FLASH0_DEV, addr + cnt - 1)) ||
 807b994:	d20c      	bcs.n	807b9b0 <Flash_ProgramData+0x38>
  return ((param % flash_dev->data->program_unit) != 0) ? (false) : (true);
 807b996:	ea40 0507 	orr.w	r5, r0, r7
      (!is_write_aligned(&ARM_FLASH0_DEV, addr))     ||
 807b99a:	f015 0507 	ands.w	r5, r5, #7
 807b99e:	d107      	bne.n	807b9b0 <Flash_ProgramData+0x38>
  for (nb = 0; nb < vect->nb; nb++)
 807b9a0:	4b21      	ldr	r3, [pc, #132]	; (807ba28 <Flash_ProgramData+0xb0>)
    if ((start >= vect->range[nb].base) && ((start + len - 1) <= vect->range[nb].limit))
 807b9a2:	e9d3 1002 	ldrd	r1, r0, [r3, #8]
  for (nb = 0; nb < vect->nb; nb++)
 807b9a6:	462b      	mov	r3, r5
    if ((start >= vect->range[nb].base) && ((start + len - 1) <= vect->range[nb].limit))
 807b9a8:	f100 0e04 	add.w	lr, r0, #4
  for (nb = 0; nb < vect->nb; nb++)
 807b9ac:	428b      	cmp	r3, r1
 807b9ae:	d108      	bne.n	807b9c2 <Flash_ProgramData+0x4a>
    return ARM_DRIVER_ERROR_PARAMETER;
 807b9b0:	f06f 0004 	mvn.w	r0, #4
    ARM_FLASH0_STATUS.error = DRIVER_STATUS_ERROR;
 807b9b4:	6823      	ldr	r3, [r4, #0]
 807b9b6:	f043 0302 	orr.w	r3, r3, #2
 807b9ba:	6023      	str	r3, [r4, #0]
}
 807b9bc:	b003      	add	sp, #12
 807b9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((start >= vect->range[nb].base) && ((start + len - 1) <= vect->range[nb].limit))
 807b9c2:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
 807b9c6:	45b1      	cmp	r9, r6
 807b9c8:	d303      	bcc.n	807b9d2 <Flash_ProgramData+0x5a>
 807b9ca:	f85e 6033 	ldr.w	r6, [lr, r3, lsl #3]
 807b9ce:	42b2      	cmp	r2, r6
 807b9d0:	d91f      	bls.n	807ba12 <Flash_ProgramData+0x9a>
  for (nb = 0; nb < vect->nb; nb++)
 807b9d2:	3301      	adds	r3, #1
 807b9d4:	e7ea      	b.n	807b9ac <Flash_ProgramData+0x34>
  } while ((loop != cnt) && (err == HAL_OK));
 807b9d6:	b988      	cbnz	r0, 807b9fc <Flash_ProgramData+0x84>
    memcpy(&dword, (void *)((uint32_t)data + loop), sizeof(dword));
 807b9d8:	466b      	mov	r3, sp
 807b9da:	eb08 0205 	add.w	r2, r8, r5
 807b9de:	f858 0005 	ldr.w	r0, [r8, r5]
 807b9e2:	6851      	ldr	r1, [r2, #4]
 807b9e4:	c303      	stmia	r3!, {r0, r1}
    err = HAL_FLASH_Program(write_type, (flash_base + addr), dword);
 807b9e6:	eb09 0105 	add.w	r1, r9, r5
 807b9ea:	2001      	movs	r0, #1
 807b9ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 807b9f0:	f000 fba8 	bl	807c144 <HAL_FLASH_Program>
    loop += sizeof(dword);
 807b9f4:	3508      	adds	r5, #8
  } while ((loop != cnt) && (err == HAL_OK));
 807b9f6:	42af      	cmp	r7, r5
    err = HAL_FLASH_Program(write_type, (flash_base + addr), dword);
 807b9f8:	4606      	mov	r6, r0
  } while ((loop != cnt) && (err == HAL_OK));
 807b9fa:	d1ec      	bne.n	807b9d6 <Flash_ProgramData+0x5e>
  ARM_FLASH0_STATUS.busy = DRIVER_STATUS_IDLE;
 807b9fc:	6823      	ldr	r3, [r4, #0]
 807b9fe:	f36f 0300 	bfc	r3, #0, #1
 807ba02:	6023      	str	r3, [r4, #0]
  HAL_FLASH_Lock();
 807ba04:	f000 fb66 	bl	807c0d4 <HAL_FLASH_Lock>
  return (err == HAL_OK) ? ARM_DRIVER_OK : ARM_DRIVER_ERROR;
 807ba08:	1e30      	subs	r0, r6, #0
 807ba0a:	bf18      	it	ne
 807ba0c:	2001      	movne	r0, #1
 807ba0e:	4240      	negs	r0, r0
 807ba10:	e7d4      	b.n	807b9bc <Flash_ProgramData+0x44>
  HAL_FLASH_Unlock();
 807ba12:	f000 fb4d 	bl	807c0b0 <HAL_FLASH_Unlock>
  ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 807ba16:	6823      	ldr	r3, [r4, #0]
    err = HAL_FLASH_Program(write_type, (flash_base + addr), dword);
 807ba18:	f109 6900 	add.w	r9, r9, #134217728	; 0x8000000
  ARM_FLASH0_STATUS.busy = DRIVER_STATUS_BUSY;
 807ba1c:	f043 0301 	orr.w	r3, r3, #1
 807ba20:	6023      	str	r3, [r4, #0]
static int32_t Flash_ProgramData(uint32_t addr,
 807ba22:	e7d9      	b.n	807b9d8 <Flash_ProgramData+0x60>
 807ba24:	2000016c 	.word	0x2000016c
 807ba28:	20000000 	.word	0x20000000

0807ba2c <_write>:
  return ch;
}
#elif defined(__GNUC__)
/* Redirects printf to TFM_DRIVER_STDIO in case of GNUARM */
int _write(int fd, char *str, int len)
{
 807ba2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 807ba2e:	460e      	mov	r6, r1
 807ba30:	4614      	mov	r4, r2
  int i;

  for (i = 0; i < len; i++)
 807ba32:	2500      	movs	r5, #0
 807ba34:	42a5      	cmp	r5, r4
 807ba36:	db02      	blt.n	807ba3e <_write+0x12>
    uart_putc(str[i]);
  }

  /* Return the number of characters written */
  return len;
}
 807ba38:	4620      	mov	r0, r4
 807ba3a:	b002      	add	sp, #8
 807ba3c:	bd70      	pop	{r4, r5, r6, pc}
    uart_putc(str[i]);
 807ba3e:	5d73      	ldrb	r3, [r6, r5]
  COM_Transmit(&c, 1, 1000U);
 807ba40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 807ba44:	2101      	movs	r1, #1
 807ba46:	f10d 0007 	add.w	r0, sp, #7
 807ba4a:	f88d 3007 	strb.w	r3, [sp, #7]
  for (i = 0; i < len; i++)
 807ba4e:	3501      	adds	r5, #1
  COM_Transmit(&c, 1, 1000U);
 807ba50:	f7ff fdb0 	bl	807b5b4 <COM_Transmit>
  for (i = 0; i < len; i++)
 807ba54:	e7ee      	b.n	807ba34 <_write+0x8>
	...

0807ba58 <main>:
  * @param  None
  * @retval None
  */
int main(int argc, char **argv)
/*int main(void) */
{
 807ba58:	b508      	push	{r3, lr}
  duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
  handled in milliseconds basis.
  - Set NVIC Group Priority to 3
  - Low Level Initialization
  */
  HAL_Init();
 807ba5a:	f000 fa26 	bl	807beaa <HAL_Init>

  /* Configure Communication module */
  COM_Init();
 807ba5e:	f7ff fd33 	bl	807b4c8 <COM_Init>

  printf("\r\n======================================================================");
 807ba62:	480a      	ldr	r0, [pc, #40]	; (807ba8c <main+0x34>)
 807ba64:	f001 f90a 	bl	807cc7c <iprintf>
  printf("\r\n=              (C) COPYRIGHT 2020 STMicroelectronics                 =");
 807ba68:	4809      	ldr	r0, [pc, #36]	; (807ba90 <main+0x38>)
 807ba6a:	f001 f907 	bl	807cc7c <iprintf>
  printf("\r\n=                                                                    =");
 807ba6e:	4809      	ldr	r0, [pc, #36]	; (807ba94 <main+0x3c>)
 807ba70:	f001 f904 	bl	807cc7c <iprintf>
  printf("\r\n=                          LOCAL LOADER                              =");
 807ba74:	4808      	ldr	r0, [pc, #32]	; (807ba98 <main+0x40>)
 807ba76:	f001 f901 	bl	807cc7c <iprintf>
  printf("\r\n======================================================================");
 807ba7a:	4804      	ldr	r0, [pc, #16]	; (807ba8c <main+0x34>)
 807ba7c:	f001 f8fe 	bl	807cc7c <iprintf>
  printf("\r\n\r\n");
 807ba80:	4806      	ldr	r0, [pc, #24]	; (807ba9c <main+0x44>)
 807ba82:	f001 f981 	bl	807cd88 <puts>

  /* User App firmware runs*/
  FW_UPDATE_Run();
 807ba86:	f7ff fe21 	bl	807b6cc <FW_UPDATE_Run>

  while (1U)
 807ba8a:	e7fe      	b.n	807ba8a <main+0x32>
 807ba8c:	0807e3d8 	.word	0x0807e3d8
 807ba90:	0807e421 	.word	0x0807e421
 807ba94:	0807e46a 	.word	0x0807e46a
 807ba98:	0807e4b3 	.word	0x0807e4b3
 807ba9c:	0807e4fc 	.word	0x0807e4fc

0807baa0 <SystemInit>:
  */

void SystemInit(void)
{
  
}
 807baa0:	4770      	bx	lr
	...

0807baa4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 807baa4:	4a22      	ldr	r2, [pc, #136]	; (807bb30 <SystemCoreClockUpdate+0x8c>)
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 807baa6:	4823      	ldr	r0, [pc, #140]	; (807bb34 <SystemCoreClockUpdate+0x90>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 807baa8:	6813      	ldr	r3, [r2, #0]
{
 807baaa:	b530      	push	{r4, r5, lr}
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 807baac:	071b      	lsls	r3, r3, #28
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 807baae:	bf54      	ite	pl
 807bab0:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 807bab4:	6813      	ldrmi	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 807bab6:	6891      	ldr	r1, [r2, #8]
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 807bab8:	bf58      	it	pl
 807baba:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 807babe:	f001 010c 	and.w	r1, r1, #12
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 807bac2:	bf48      	it	mi
 807bac4:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 807bac8:	2908      	cmp	r1, #8
  msirange = MSIRangeTable[msirange];
 807baca:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 807bace:	4c1a      	ldr	r4, [pc, #104]	; (807bb38 <SystemCoreClockUpdate+0x94>)
 807bad0:	d003      	beq.n	807bada <SystemCoreClockUpdate+0x36>
 807bad2:	290c      	cmp	r1, #12
 807bad4:	d00d      	beq.n	807baf2 <SystemCoreClockUpdate+0x4e>
 807bad6:	2904      	cmp	r1, #4
 807bad8:	d128      	bne.n	807bb2c <SystemCoreClockUpdate+0x88>
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 807bada:	4b18      	ldr	r3, [pc, #96]	; (807bb3c <SystemCoreClockUpdate+0x98>)
          pllvco = (msirange / pllm);
          break;
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
      SystemCoreClock = pllvco/pllr;
 807badc:	6023      	str	r3, [r4, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 807bade:	6893      	ldr	r3, [r2, #8]
 807bae0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 807bae4:	4418      	add	r0, r3
 807bae6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 807baea:	6823      	ldr	r3, [r4, #0]
 807baec:	40d3      	lsrs	r3, r2
 807baee:	6023      	str	r3, [r4, #0]
}
 807baf0:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 807baf2:	68d1      	ldr	r1, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 807baf4:	68d3      	ldr	r3, [r2, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 807baf6:	f001 0103 	and.w	r1, r1, #3
 807bafa:	3902      	subs	r1, #2
 807bafc:	2901      	cmp	r1, #1
          pllvco = (HSE_VALUE / pllm);
 807bafe:	bf98      	it	ls
 807bb00:	490e      	ldrls	r1, [pc, #56]	; (807bb3c <SystemCoreClockUpdate+0x98>)
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 807bb02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 807bb06:	f103 0301 	add.w	r3, r3, #1
          pllvco = (HSE_VALUE / pllm);
 807bb0a:	bf94      	ite	ls
 807bb0c:	fbb1 f3f3 	udivls	r3, r1, r3
          pllvco = (msirange / pllm);
 807bb10:	fbb5 f3f3 	udivhi	r3, r5, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 807bb14:	68d5      	ldr	r5, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 807bb16:	68d1      	ldr	r1, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 807bb18:	f3c5 2506 	ubfx	r5, r5, #8, #7
 807bb1c:	436b      	muls	r3, r5
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 807bb1e:	f3c1 6141 	ubfx	r1, r1, #25, #2
 807bb22:	3101      	adds	r1, #1
 807bb24:	0049      	lsls	r1, r1, #1
      SystemCoreClock = pllvco/pllr;
 807bb26:	fbb3 f3f1 	udiv	r3, r3, r1
 807bb2a:	e7d7      	b.n	807badc <SystemCoreClockUpdate+0x38>
      SystemCoreClock = msirange;
 807bb2c:	6025      	str	r5, [r4, #0]
      break;
 807bb2e:	e7d6      	b.n	807bade <SystemCoreClockUpdate+0x3a>
 807bb30:	40021000 	.word	0x40021000
 807bb34:	0807e500 	.word	0x0807e500
 807bb38:	20000018 	.word	0x20000018
 807bb3c:	00f42400 	.word	0x00f42400

0807bb40 <HAL_InitTick>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* load 1Hz for timeout 1 second */
  uint32_t ticks = SystemCoreClock ;
 807bb40:	4b04      	ldr	r3, [pc, #16]	; (807bb54 <HAL_InitTick+0x14>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 807bb42:	2000      	movs	r0, #0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 807bb44:	681a      	ldr	r2, [r3, #0]
 807bb46:	4b04      	ldr	r3, [pc, #16]	; (807bb58 <HAL_InitTick+0x18>)
 807bb48:	3a01      	subs	r2, #1
 807bb4a:	605a      	str	r2, [r3, #4]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 807bb4c:	2205      	movs	r2, #5
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 807bb4e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 807bb50:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;
  return HAL_OK;
}
 807bb52:	4770      	bx	lr
 807bb54:	20000018 	.word	0x20000018
 807bb58:	e000e010 	.word	0xe000e010

0807bb5c <HAL_GetTick>:
{
  static uint32_t m_uTick = 0U;
  static uint32_t t1 = 0U, tdelta = 0U;
  uint32_t t2;

  t2 =  SysTick->VAL;
 807bb5c:	490e      	ldr	r1, [pc, #56]	; (807bb98 <HAL_GetTick+0x3c>)

  if (t2 <= t1)
 807bb5e:	4a0f      	ldr	r2, [pc, #60]	; (807bb9c <HAL_GetTick+0x40>)
  t2 =  SysTick->VAL;
 807bb60:	6888      	ldr	r0, [r1, #8]
{
 807bb62:	b510      	push	{r4, lr}
 807bb64:	e9d2 3400 	ldrd	r3, r4, [r2]
  if (t2 <= t1)
 807bb68:	4283      	cmp	r3, r0
 807bb6a:	4423      	add	r3, r4
  else
  {
    tdelta += t1 + SysTick->LOAD - t2;
  }

  if (tdelta > (SystemCoreClock / (1000U)))
 807bb6c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    tdelta += t1 + SysTick->LOAD - t2;
 807bb70:	bf3c      	itt	cc
 807bb72:	6849      	ldrcc	r1, [r1, #4]
 807bb74:	185b      	addcc	r3, r3, r1
  if (tdelta > (SystemCoreClock / (1000U)))
 807bb76:	490a      	ldr	r1, [pc, #40]	; (807bba0 <HAL_GetTick+0x44>)
    tdelta += t1 + SysTick->LOAD - t2;
 807bb78:	1a1b      	subs	r3, r3, r0
  if (tdelta > (SystemCoreClock / (1000U)))
 807bb7a:	6809      	ldr	r1, [r1, #0]
 807bb7c:	6053      	str	r3, [r2, #4]
 807bb7e:	fbb1 f1f4 	udiv	r1, r1, r4
 807bb82:	4299      	cmp	r1, r3
 807bb84:	d204      	bcs.n	807bb90 <HAL_GetTick+0x34>
  {
    tdelta = 0U;
 807bb86:	2100      	movs	r1, #0
 807bb88:	6893      	ldr	r3, [r2, #8]
 807bb8a:	6051      	str	r1, [r2, #4]
    m_uTick ++;
 807bb8c:	3301      	adds	r3, #1
 807bb8e:	6093      	str	r3, [r2, #8]
  }

  t1 = t2;
 807bb90:	6010      	str	r0, [r2, #0]
  return m_uTick;
 807bb92:	6890      	ldr	r0, [r2, #8]
 807bb94:	bd10      	pop	{r4, pc}
 807bb96:	bf00      	nop
 807bb98:	e000e010 	.word	0xe000e010
 807bb9c:	20000170 	.word	0x20000170
 807bba0:	20000018 	.word	0x20000018

0807bba4 <Ymodem_Init>:
  * @param None.
  * @retval None.
  */
void Ymodem_Init(void)
{
  __HAL_RCC_CRC_CLK_ENABLE();
 807bba4:	4b11      	ldr	r3, [pc, #68]	; (807bbec <Ymodem_Init+0x48>)
{
 807bba6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_CRC_CLK_ENABLE();
 807bba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  /*-1- Configure the CRC peripheral */
  CrcHandle.Instance = CRC;

  /* The CRC-16-CCIT polynomial is used */
  CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
  CrcHandle.Init.GeneratingPolynomial    = 0x1021U;
 807bbaa:	4811      	ldr	r0, [pc, #68]	; (807bbf0 <Ymodem_Init+0x4c>)
  __HAL_RCC_CRC_CLK_ENABLE();
 807bbac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 807bbb0:	649a      	str	r2, [r3, #72]	; 0x48
 807bbb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 807bbb4:	f241 0221 	movw	r2, #4129	; 0x1021
  __HAL_RCC_CRC_CLK_ENABLE();
 807bbb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 807bbbc:	9301      	str	r3, [sp, #4]
 807bbbe:	9b01      	ldr	r3, [sp, #4]
  CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 807bbc0:	2308      	movs	r3, #8
 807bbc2:	e9c0 2302 	strd	r2, r3, [r0, #8]
  CrcHandle.Instance = CRC;
 807bbc6:	4b0b      	ldr	r3, [pc, #44]	; (807bbf4 <Ymodem_Init+0x50>)
 807bbc8:	6003      	str	r3, [r0, #0]
  CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 807bbca:	f240 1301 	movw	r3, #257	; 0x101
 807bbce:	8083      	strh	r3, [r0, #4]

  /* The zero init value is used */
  CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_DISABLE;
  CrcHandle.Init.InitValue               = 0U;
 807bbd0:	2300      	movs	r3, #0

  /* The input data are not inverted */
  CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 807bbd2:	e9c0 3304 	strd	r3, r3, [r0, #16]

  /* The output data are not inverted */
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 807bbd6:	6183      	str	r3, [r0, #24]

  /* The input data are 32-bit long words */
  CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 807bbd8:	2301      	movs	r3, #1
 807bbda:	6203      	str	r3, [r0, #32]

  if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 807bbdc:	f000 f9e8 	bl	807bfb0 <HAL_CRC_Init>
 807bbe0:	b100      	cbz	r0, 807bbe4 <Ymodem_Init+0x40>
  {
    /* Initialization Error */
    while (1);
 807bbe2:	e7fe      	b.n	807bbe2 <Ymodem_Init+0x3e>
  }
}
 807bbe4:	b003      	add	sp, #12
 807bbe6:	f85d fb04 	ldr.w	pc, [sp], #4
 807bbea:	bf00      	nop
 807bbec:	40021000 	.word	0x40021000
 807bbf0:	2000017c 	.word	0x2000017c
 807bbf4:	40023000 	.word	0x40023000

0807bbf8 <Ymodem_Receive>:
  * @param  puSize The uSize of the file.
  * @param  uFlashDestination where the file has to be downloaded.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive(uint32_t *puSize, uint32_t uFlashDestination)
{
 807bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH + 1U], tmp;
  uint32_t packets_received;
  COM_StatusTypeDef e_result = COM_OK;
  uint32_t cause = 0;
 807bbfc:	2700      	movs	r7, #0
{
 807bbfe:	4681      	mov	r9, r0
 807bc00:	468a      	mov	sl, r1
 807bc02:	b08b      	sub	sp, #44	; 0x2c
    *pData = char1;
 807bc04:	f8df b29c 	ldr.w	fp, [pc, #668]	; 807bea4 <Ymodem_Receive+0x2ac>
  uint32_t i, packet_length, session_done = 0U, file_done, errors = 0U, session_begin = 0U;
 807bc08:	9700      	str	r7, [sp, #0]
                    else
                    {
                      /* End session */
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
                      cause = 2;
 807bc0a:	f04f 0800 	mov.w	r8, #0
 807bc0e:	e104      	b.n	807be1a <Ymodem_Receive+0x222>
 807bc10:	4626      	mov	r6, r4
 807bc12:	2702      	movs	r7, #2
  status = (HAL_StatusTypeDef)COM_Receive(&char1, 1, uTimeout);
 807bc14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 807bc18:	2101      	movs	r1, #1
 807bc1a:	f10d 000f 	add.w	r0, sp, #15
 807bc1e:	f7ff fcd1 	bl	807b5c4 <COM_Receive>
  if (status == HAL_OK)
 807bc22:	4604      	mov	r4, r0
 807bc24:	2800      	cmp	r0, #0
 807bc26:	f040 80bb 	bne.w	807bda0 <Ymodem_Receive+0x1a8>
    switch (char1)
 807bc2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 807bc2e:	2b18      	cmp	r3, #24
 807bc30:	f000 808d 	beq.w	807bd4e <Ymodem_Receive+0x156>
 807bc34:	f200 8081 	bhi.w	807bd3a <Ymodem_Receive+0x142>
 807bc38:	2b02      	cmp	r3, #2
 807bc3a:	f000 80a9 	beq.w	807bd90 <Ymodem_Receive+0x198>
 807bc3e:	2b04      	cmp	r3, #4
 807bc40:	f000 8083 	beq.w	807bd4a <Ymodem_Receive+0x152>
 807bc44:	2b01      	cmp	r3, #1
 807bc46:	bf15      	itete	ne
 807bc48:	2001      	movne	r0, #1
 807bc4a:	2000      	moveq	r0, #0
 807bc4c:	2500      	movne	r5, #0
 807bc4e:	2580      	moveq	r5, #128	; 0x80
    *pData = char1;
 807bc50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    if (packet_size >= PACKET_SIZE)
 807bc54:	2d7f      	cmp	r5, #127	; 0x7f
    *pData = char1;
 807bc56:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
    if (packet_size >= PACKET_SIZE)
 807bc5a:	f240 80a0 	bls.w	807bd9e <Ymodem_Receive+0x1a6>
      status = COM_Receive(&pData[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, uTimeout);
 807bc5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 807bc62:	488b      	ldr	r0, [pc, #556]	; (807be90 <Ymodem_Receive+0x298>)
 807bc64:	1d29      	adds	r1, r5, #4
 807bc66:	f7ff fcad 	bl	807b5c4 <COM_Receive>
      if (status == HAL_OK)
 807bc6a:	2800      	cmp	r0, #0
 807bc6c:	f040 8098 	bne.w	807bda0 <Ymodem_Receive+0x1a8>
        if (pData[PACKET_NUMBER_INDEX] != ((pData[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 807bc70:	f89b 3027 	ldrb.w	r3, [fp, #39]	; 0x27
 807bc74:	f89b 2026 	ldrb.w	r2, [fp, #38]	; 0x26
 807bc78:	43db      	mvns	r3, r3
 807bc7a:	b2db      	uxtb	r3, r3
 807bc7c:	429a      	cmp	r2, r3
 807bc7e:	f040 8091 	bne.w	807bda4 <Ymodem_Receive+0x1ac>
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 807bc82:	eb0b 0205 	add.w	r2, fp, r5
 807bc86:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 807bc8a:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
          if (HAL_CRC_Calculate(&CrcHandle, (uint32_t *)&pData[PACKET_DATA_INDEX], packet_size) != crc)
 807bc8e:	462a      	mov	r2, r5
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 807bc90:	eb03 2301 	add.w	r3, r3, r1, lsl #8
          if (HAL_CRC_Calculate(&CrcHandle, (uint32_t *)&pData[PACKET_DATA_INDEX], packet_size) != crc)
 807bc94:	497f      	ldr	r1, [pc, #508]	; (807be94 <Ymodem_Receive+0x29c>)
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 807bc96:	9301      	str	r3, [sp, #4]
          if (HAL_CRC_Calculate(&CrcHandle, (uint32_t *)&pData[PACKET_DATA_INDEX], packet_size) != crc)
 807bc98:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
 807bc9c:	f000 f9c2 	bl	807c024 <HAL_CRC_Calculate>
 807bca0:	9b01      	ldr	r3, [sp, #4]
 807bca2:	4283      	cmp	r3, r0
 807bca4:	d17e      	bne.n	807bda4 <Ymodem_Receive+0x1ac>
              if (m_aPacketData[PACKET_NUMBER_INDEX] != (packets_received & 0xff))
 807bca6:	f89b 2026 	ldrb.w	r2, [fp, #38]	; 0x26
 807bcaa:	fa5f f388 	uxtb.w	r3, r8
 807bcae:	429a      	cmp	r2, r3
 807bcb0:	f040 80b3 	bne.w	807be1a <Ymodem_Receive+0x222>
                if (packets_received == 0U)
 807bcb4:	f1b8 0f00 	cmp.w	r8, #0
 807bcb8:	f040 80be 	bne.w	807be38 <Ymodem_Receive+0x240>
                  if (m_aPacketData[PACKET_DATA_INDEX] != 0U)
 807bcbc:	f89b 5028 	ldrb.w	r5, [fp, #40]	; 0x28
 807bcc0:	2d00      	cmp	r5, #0
 807bcc2:	f000 80ac 	beq.w	807be1e <Ymodem_Receive+0x226>
 807bcc6:	4b74      	ldr	r3, [pc, #464]	; (807be98 <Ymodem_Receive+0x2a0>)
                    i = 0U;
 807bcc8:	4642      	mov	r2, r8
 807bcca:	461d      	mov	r5, r3
                    file_ptr = m_aPacketData + PACKET_DATA_INDEX;
 807bccc:	4971      	ldr	r1, [pc, #452]	; (807be94 <Ymodem_Receive+0x29c>)
                    while ((*file_ptr != 0U) && (i < FILE_NAME_LENGTH))
 807bcce:	f811 0b01 	ldrb.w	r0, [r1], #1
 807bcd2:	b110      	cbz	r0, 807bcda <Ymodem_Receive+0xe2>
 807bcd4:	2a40      	cmp	r2, #64	; 0x40
 807bcd6:	f040 8085 	bne.w	807bde4 <Ymodem_Receive+0x1ec>
                    m_aFileName[i++] = '\0';
 807bcda:	2300      	movs	r3, #0
 807bcdc:	54ab      	strb	r3, [r5, r2]
                    while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 807bcde:	aa05      	add	r2, sp, #20
 807bce0:	4610      	mov	r0, r2
 807bce2:	5ccd      	ldrb	r5, [r1, r3]
 807bce4:	2d20      	cmp	r5, #32
 807bce6:	d001      	beq.n	807bcec <Ymodem_Receive+0xf4>
 807bce8:	2b10      	cmp	r3, #16
 807bcea:	d17f      	bne.n	807bdec <Ymodem_Receive+0x1f4>
                    file_size[i++] = '\0';
 807bcec:	2500      	movs	r5, #0
 807bcee:	aa0a      	add	r2, sp, #40	; 0x28
 807bcf0:	4413      	add	r3, r2
                    Str2Int(file_size, &filesize);
 807bcf2:	a904      	add	r1, sp, #16
                    file_size[i++] = '\0';
 807bcf4:	f803 5c14 	strb.w	r5, [r3, #-20]
                    Str2Int(file_size, &filesize);
 807bcf8:	f7ff fc7a 	bl	807b5f0 <Str2Int>
                    if ((uint32_t)filesize > *puSize)
 807bcfc:	f8d9 3000 	ldr.w	r3, [r9]
 807bd00:	9904      	ldr	r1, [sp, #16]
 807bd02:	428b      	cmp	r3, r1
 807bd04:	d276      	bcs.n	807bdf4 <Ymodem_Receive+0x1fc>
                      tmp = CA;
 807bd06:	2318      	movs	r3, #24
                      e_result = COM_ABORT;
 807bd08:	2402      	movs	r4, #2
                      *puSize = 0;
 807bd0a:	f8c9 5000 	str.w	r5, [r9]
                      tmp = CA;
 807bd0e:	f88d 300e 	strb.w	r3, [sp, #14]
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 807bd12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 807bd16:	2101      	movs	r1, #1
 807bd18:	f10d 000e 	add.w	r0, sp, #14
 807bd1c:	f7ff fc4a 	bl	807b5b4 <COM_Transmit>
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 807bd20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 807bd24:	2101      	movs	r1, #1
 807bd26:	f10d 000e 	add.w	r0, sp, #14
 807bd2a:	f7ff fc43 	bl	807b5b4 <COM_Transmit>
    while ((file_done == 0U) && (e_result == COM_OK))
 807bd2e:	2c00      	cmp	r4, #0
 807bd30:	f43f af6e 	beq.w	807bc10 <Ymodem_Receive+0x18>
                      cause = 2;
 807bd34:	2702      	movs	r7, #2
                  else
                  {
                    Serial_PutByte(ACK);
                    file_done = 1;
                    session_done = 1;
                    cause = 3;
 807bd36:	4625      	mov	r5, r4
 807bd38:	e075      	b.n	807be26 <Ymodem_Receive+0x22e>
    switch (char1)
 807bd3a:	2b61      	cmp	r3, #97	; 0x61
 807bd3c:	d02b      	beq.n	807bd96 <Ymodem_Receive+0x19e>
 807bd3e:	2b72      	cmp	r3, #114	; 0x72
 807bd40:	d015      	beq.n	807bd6e <Ymodem_Receive+0x176>
        status = HAL_BUSY;
 807bd42:	2b41      	cmp	r3, #65	; 0x41
 807bd44:	bf14      	ite	ne
 807bd46:	2001      	movne	r0, #1
 807bd48:	2002      	moveq	r0, #2
  uint32_t packet_size = 0U;
 807bd4a:	4625      	mov	r5, r4
 807bd4c:	e780      	b.n	807bc50 <Ymodem_Receive+0x58>
        if ((COM_Receive(&char1, 1U, uTimeout) == HAL_OK) && (char1 == CA))
 807bd4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 807bd52:	2101      	movs	r1, #1
 807bd54:	f10d 000f 	add.w	r0, sp, #15
 807bd58:	f7ff fc34 	bl	807b5c4 <COM_Receive>
 807bd5c:	b9e8      	cbnz	r0, 807bd9a <Ymodem_Receive+0x1a2>
 807bd5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
          packet_size = 2U;
 807bd62:	2b18      	cmp	r3, #24
 807bd64:	bf16      	itet	ne
 807bd66:	2500      	movne	r5, #0
 807bd68:	2502      	moveq	r5, #2
 807bd6a:	2001      	movne	r0, #1
 807bd6c:	e770      	b.n	807bc50 <Ymodem_Receive+0x58>
        COM_Receive(&char1, 1U, uTimeout);                /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 807bd6e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 807bd72:	2101      	movs	r1, #1
 807bd74:	f10d 000f 	add.w	r0, sp, #15
 807bd78:	f7ff fc24 	bl	807b5c4 <COM_Receive>
        COM_Receive(&char1, 1U, uTimeout);
 807bd7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 807bd80:	2101      	movs	r1, #1
 807bd82:	f10d 000f 	add.w	r0, sp, #15
 807bd86:	f7ff fc1d 	bl	807b5c4 <COM_Receive>
        packet_size = 3U;
 807bd8a:	2503      	movs	r5, #3
  status = (HAL_StatusTypeDef)COM_Receive(&char1, 1, uTimeout);
 807bd8c:	4620      	mov	r0, r4
        break;
 807bd8e:	e75f      	b.n	807bc50 <Ymodem_Receive+0x58>
        packet_size = PACKET_1K_SIZE;
 807bd90:	f44f 6580 	mov.w	r5, #1024	; 0x400
 807bd94:	e75c      	b.n	807bc50 <Ymodem_Receive+0x58>
        status = HAL_BUSY;
 807bd96:	2002      	movs	r0, #2
 807bd98:	e7d7      	b.n	807bd4a <Ymodem_Receive+0x152>
          status = HAL_ERROR;
 807bd9a:	2001      	movs	r0, #1
 807bd9c:	e7d5      	b.n	807bd4a <Ymodem_Receive+0x152>
      switch (ReceivePacket(m_aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 807bd9e:	b168      	cbz	r0, 807bdbc <Ymodem_Receive+0x1c4>
 807bda0:	2802      	cmp	r0, #2
 807bda2:	d065      	beq.n	807be70 <Ymodem_Receive+0x278>
          Serial_PutByte(CA);
          e_result = COM_ABORT;
          cause  = 5;
          break;
        default:
          if (session_begin > 0U)
 807bda4:	9b00      	ldr	r3, [sp, #0]
 807bda6:	b103      	cbz	r3, 807bdaa <Ymodem_Receive+0x1b2>
          {
            errors ++;
 807bda8:	3601      	adds	r6, #1
          }
          if (errors > MAX_ERRORS)
 807bdaa:	2e05      	cmp	r6, #5
 807bdac:	d968      	bls.n	807be80 <Ymodem_Receive+0x288>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 807bdae:	2018      	movs	r0, #24
 807bdb0:	f7ff fc6d 	bl	807b68e <Serial_PutByte>
            Serial_PutByte(CA);
 807bdb4:	2018      	movs	r0, #24
 807bdb6:	f7ff fc6a 	bl	807b68e <Serial_PutByte>
 807bdba:	e72b      	b.n	807bc14 <Ymodem_Receive+0x1c>
          switch (packet_length)
 807bdbc:	2d03      	cmp	r5, #3
 807bdbe:	d02c      	beq.n	807be1a <Ymodem_Receive+0x222>
 807bdc0:	f63f af71 	bhi.w	807bca6 <Ymodem_Receive+0xae>
 807bdc4:	b13d      	cbz	r5, 807bdd6 <Ymodem_Receive+0x1de>
 807bdc6:	2d02      	cmp	r5, #2
 807bdc8:	f47f af6d 	bne.w	807bca6 <Ymodem_Receive+0xae>
              Serial_PutByte(ACK);
 807bdcc:	2006      	movs	r0, #6
 807bdce:	f7ff fc5e 	bl	807b68e <Serial_PutByte>
  uint32_t i, packet_length, session_done = 0U, file_done, errors = 0U, session_begin = 0U;
 807bdd2:	2402      	movs	r4, #2
 807bdd4:	e7af      	b.n	807bd36 <Ymodem_Receive+0x13e>
              Serial_PutByte(ACK);
 807bdd6:	2006      	movs	r0, #6
 807bdd8:	f7ff fc59 	bl	807b68e <Serial_PutByte>
              *puSize = filesize;
 807bddc:	9b04      	ldr	r3, [sp, #16]
 807bdde:	f8c9 3000 	str.w	r3, [r9]
  while ((session_done == 0U) && (e_result == COM_OK))
 807bde2:	e712      	b.n	807bc0a <Ymodem_Receive+0x12>
                      m_aFileName[i++] = *file_ptr++;
 807bde4:	3201      	adds	r2, #1
 807bde6:	f803 0b01 	strb.w	r0, [r3], #1
 807bdea:	e770      	b.n	807bcce <Ymodem_Receive+0xd6>
                      file_size[i++] = *file_ptr++;
 807bdec:	3301      	adds	r3, #1
 807bdee:	f802 5b01 	strb.w	r5, [r2], #1
 807bdf2:	e776      	b.n	807bce2 <Ymodem_Receive+0xea>
                    if ((*puSize) && (Ymodem_HeaderPktRxCpltCallback(uFlashDestination, (uint32_t) filesize) == HAL_OK))
 807bdf4:	2b00      	cmp	r3, #0
 807bdf6:	d08c      	beq.n	807bd12 <Ymodem_Receive+0x11a>
 807bdf8:	4650      	mov	r0, sl
 807bdfa:	f7ff fd0f 	bl	807b81c <Ymodem_HeaderPktRxCpltCallback>
 807bdfe:	2800      	cmp	r0, #0
 807be00:	d187      	bne.n	807bd12 <Ymodem_Receive+0x11a>
                      Serial_PutByte(ACK);
 807be02:	2006      	movs	r0, #6
 807be04:	f7ff fc43 	bl	807b68e <Serial_PutByte>
                      COM_Flush();
 807be08:	f7ff fbe4 	bl	807b5d4 <COM_Flush>
                      Serial_PutByte(CRC16);
 807be0c:	2043      	movs	r0, #67	; 0x43
                    Serial_PutByte(ACK);
 807be0e:	f7ff fc3e 	bl	807b68e <Serial_PutByte>
                session_begin = 1U;
 807be12:	2301      	movs	r3, #1
                packets_received ++;
 807be14:	f108 0801 	add.w	r8, r8, #1
                session_begin = 1U;
 807be18:	9300      	str	r3, [sp, #0]
          errors = 0U;
 807be1a:	2600      	movs	r6, #0
    while ((file_done == 0U) && (e_result == COM_OK))
 807be1c:	e6fa      	b.n	807bc14 <Ymodem_Receive+0x1c>
                    Serial_PutByte(ACK);
 807be1e:	2006      	movs	r0, #6
 807be20:	f7ff fc35 	bl	807b68e <Serial_PutByte>
                    cause = 3;
 807be24:	2703      	movs	r7, #3
    }
  }
#if defined(__ARMCC_VERSION)
  printf("e_result = %x , %u\n", e_result, cause);
#else
  printf("e_result = %x , %lu\n", e_result, cause);
 807be26:	463a      	mov	r2, r7
 807be28:	4629      	mov	r1, r5
 807be2a:	481c      	ldr	r0, [pc, #112]	; (807be9c <Ymodem_Receive+0x2a4>)
 807be2c:	f000 ff26 	bl	807cc7c <iprintf>
#endif /* __ARMCC_VERSION */
  return e_result;
}
 807be30:	4628      	mov	r0, r5
 807be32:	b00b      	add	sp, #44	; 0x2c
 807be34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  if ((*puSize) && (Ymodem_DataPktRxCpltCallback((uint8_t *)
 807be38:	f8d9 3000 	ldr.w	r3, [r9]
 807be3c:	b143      	cbz	r3, 807be50 <Ymodem_Receive+0x258>
 807be3e:	462a      	mov	r2, r5
 807be40:	4651      	mov	r1, sl
 807be42:	4814      	ldr	r0, [pc, #80]	; (807be94 <Ymodem_Receive+0x29c>)
 807be44:	f7ff fcfc 	bl	807b840 <Ymodem_DataPktRxCpltCallback>
 807be48:	b910      	cbnz	r0, 807be50 <Ymodem_Receive+0x258>
                    Serial_PutByte(ACK);
 807be4a:	2006      	movs	r0, #6
                    uFlashDestination += (packet_length);
 807be4c:	44aa      	add	sl, r5
                    Serial_PutByte(ACK);
 807be4e:	e7de      	b.n	807be0e <Ymodem_Receive+0x216>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 807be50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 807be54:	2101      	movs	r1, #1
 807be56:	f10d 000e 	add.w	r0, sp, #14
 807be5a:	f7ff fbab 	bl	807b5b4 <COM_Transmit>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 807be5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 807be62:	2101      	movs	r1, #1
 807be64:	f10d 000e 	add.w	r0, sp, #14
 807be68:	f7ff fba4 	bl	807b5b4 <COM_Transmit>
                    cause = 4;
 807be6c:	2704      	movs	r7, #4
 807be6e:	e7d0      	b.n	807be12 <Ymodem_Receive+0x21a>
          Serial_PutByte(CA);
 807be70:	2018      	movs	r0, #24
 807be72:	f7ff fc0c 	bl	807b68e <Serial_PutByte>
          Serial_PutByte(CA);
 807be76:	2018      	movs	r0, #24
 807be78:	f7ff fc09 	bl	807b68e <Serial_PutByte>
          cause  = 5;
 807be7c:	2705      	movs	r7, #5
          break;
 807be7e:	e7a8      	b.n	807bdd2 <Ymodem_Receive+0x1da>
            Serial_PutByte(CRC16); /* Ask for a packet */
 807be80:	2043      	movs	r0, #67	; 0x43
 807be82:	f7ff fc04 	bl	807b68e <Serial_PutByte>
            printf("\b.");         /* Replace C char by . on display console */
 807be86:	4806      	ldr	r0, [pc, #24]	; (807bea0 <Ymodem_Receive+0x2a8>)
 807be88:	f000 fef8 	bl	807cc7c <iprintf>
 807be8c:	e6c2      	b.n	807bc14 <Ymodem_Receive+0x1c>
 807be8e:	bf00      	nop
 807be90:	200001a2 	.word	0x200001a2
 807be94:	200001a4 	.word	0x200001a4
 807be98:	200005b4 	.word	0x200005b4
 807be9c:	0807e55b 	.word	0x0807e55b
 807bea0:	0807e558 	.word	0x0807e558
 807bea4:	2000017c 	.word	0x2000017c

0807bea8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 807bea8:	4770      	bx	lr

0807beaa <HAL_Init>:
{
 807beaa:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 807beac:	2004      	movs	r0, #4
 807beae:	f000 f81f 	bl	807bef0 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 807beb2:	f7ff fdf7 	bl	807baa4 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 807beb6:	2007      	movs	r0, #7
 807beb8:	f7ff fe42 	bl	807bb40 <HAL_InitTick>
 807bebc:	4604      	mov	r4, r0
 807bebe:	b918      	cbnz	r0, 807bec8 <HAL_Init+0x1e>
    HAL_MspInit();
 807bec0:	f7ff fff2 	bl	807bea8 <HAL_MspInit>
}
 807bec4:	4620      	mov	r0, r4
 807bec6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 807bec8:	2401      	movs	r4, #1
 807beca:	e7fb      	b.n	807bec4 <HAL_Init+0x1a>

0807becc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 807becc:	b538      	push	{r3, r4, r5, lr}
 807bece:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 807bed0:	f7ff fe44 	bl	807bb5c <HAL_GetTick>
 807bed4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 807bed6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 807bed8:	bf1e      	ittt	ne
 807beda:	4b04      	ldrne	r3, [pc, #16]	; (807beec <HAL_Delay+0x20>)
 807bedc:	781b      	ldrbne	r3, [r3, #0]
 807bede:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 807bee0:	f7ff fe3c 	bl	807bb5c <HAL_GetTick>
 807bee4:	1b43      	subs	r3, r0, r5
 807bee6:	42a3      	cmp	r3, r4
 807bee8:	d3fa      	bcc.n	807bee0 <HAL_Delay+0x14>
  {
  }
}
 807beea:	bd38      	pop	{r3, r4, r5, pc}
 807beec:	2000001c 	.word	0x2000001c

0807bef0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 807bef0:	4907      	ldr	r1, [pc, #28]	; (807bf10 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 807bef2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 807bef4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 807bef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 807befa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 807befe:	0412      	lsls	r2, r2, #16
 807bf00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 807bf02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 807bf04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 807bf08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 807bf0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 807bf0e:	4770      	bx	lr
 807bf10:	e000ed00 	.word	0xe000ed00

0807bf14 <CRC_Handle_8>:
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 807bf14:	460b      	mov	r3, r1
{
 807bf16:	b5f0      	push	{r4, r5, r6, r7, lr}
 807bf18:	f022 0703 	bic.w	r7, r2, #3
 807bf1c:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 807bf1e:	0896      	lsrs	r6, r2, #2
 807bf20:	440f      	add	r7, r1
 807bf22:	42bb      	cmp	r3, r7
 807bf24:	d108      	bne.n	807bf38 <CRC_Handle_8+0x24>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 807bf26:	f012 0203 	ands.w	r2, r2, #3
 807bf2a:	d01e      	beq.n	807bf6a <CRC_Handle_8+0x56>
  {
    if ((BufferLength % 4U) == 1U)
 807bf2c:	2a01      	cmp	r2, #1
 807bf2e:	d114      	bne.n	807bf5a <CRC_Handle_8+0x46>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 807bf30:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 807bf34:	702b      	strb	r3, [r5, #0]
 807bf36:	e018      	b.n	807bf6a <CRC_Handle_8+0x56>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 807bf38:	785c      	ldrb	r4, [r3, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 807bf3a:	f893 c000 	ldrb.w	ip, [r3]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 807bf3e:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 807bf40:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 807bf44:	f893 c003 	ldrb.w	ip, [r3, #3]
 807bf48:	3304      	adds	r3, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 807bf4a:	ea44 040c 	orr.w	r4, r4, ip
 807bf4e:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 807bf52:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 807bf56:	602c      	str	r4, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 807bf58:	e7e3      	b.n	807bf22 <CRC_Handle_8+0xe>
    if ((BufferLength % 4U) == 2U)
 807bf5a:	2a02      	cmp	r2, #2
 807bf5c:	d108      	bne.n	807bf70 <CRC_Handle_8+0x5c>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 807bf5e:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 807bf62:	785b      	ldrb	r3, [r3, #1]
 807bf64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 807bf68:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 807bf6a:	6803      	ldr	r3, [r0, #0]
 807bf6c:	6818      	ldr	r0, [r3, #0]
}
 807bf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 807bf70:	785a      	ldrb	r2, [r3, #1]
 807bf72:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 807bf76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 807bf7a:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 807bf7c:	789b      	ldrb	r3, [r3, #2]
 807bf7e:	e7d9      	b.n	807bf34 <CRC_Handle_8+0x20>

0807bf80 <CRC_Handle_16>:
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 807bf80:	2300      	movs	r3, #0
 807bf82:	6800      	ldr	r0, [r0, #0]
{
 807bf84:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (i = 0U; i < (BufferLength / 2U); i++)
 807bf86:	0855      	lsrs	r5, r2, #1
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 807bf88:	1c8e      	adds	r6, r1, #2
  for (i = 0U; i < (BufferLength / 2U); i++)
 807bf8a:	429d      	cmp	r5, r3
 807bf8c:	d106      	bne.n	807bf9c <CRC_Handle_16+0x1c>
  }
  if ((BufferLength % 2U) != 0U)
 807bf8e:	07d3      	lsls	r3, r2, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 807bf90:	bf44      	itt	mi
 807bf92:	f831 3025 	ldrhmi.w	r3, [r1, r5, lsl #2]
 807bf96:	8003      	strhmi	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 807bf98:	6800      	ldr	r0, [r0, #0]
}
 807bf9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 807bf9c:	f831 7023 	ldrh.w	r7, [r1, r3, lsl #2]
 807bfa0:	f836 4023 	ldrh.w	r4, [r6, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 807bfa4:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 807bfa6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 807bfaa:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 807bfac:	e7ed      	b.n	807bf8a <CRC_Handle_16+0xa>

0807bfae <HAL_CRC_MspInit>:
}
 807bfae:	4770      	bx	lr

0807bfb0 <HAL_CRC_Init>:
{
 807bfb0:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 807bfb2:	4604      	mov	r4, r0
 807bfb4:	b908      	cbnz	r0, 807bfba <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 807bfb6:	2001      	movs	r0, #1
}
 807bfb8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 807bfba:	7f43      	ldrb	r3, [r0, #29]
 807bfbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 807bfc0:	b913      	cbnz	r3, 807bfc8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 807bfc2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 807bfc4:	f7ff fff3 	bl	807bfae <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 807bfc8:	2302      	movs	r3, #2
 807bfca:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 807bfcc:	7923      	ldrb	r3, [r4, #4]
 807bfce:	b9e3      	cbnz	r3, 807c00a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 807bfd0:	6823      	ldr	r3, [r4, #0]
 807bfd2:	4a13      	ldr	r2, [pc, #76]	; (807c020 <HAL_CRC_Init+0x70>)
 807bfd4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 807bfd6:	689a      	ldr	r2, [r3, #8]
 807bfd8:	f022 0218 	bic.w	r2, r2, #24
 807bfdc:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 807bfde:	7962      	ldrb	r2, [r4, #5]
 807bfe0:	6823      	ldr	r3, [r4, #0]
 807bfe2:	b9d2      	cbnz	r2, 807c01a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 807bfe4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 807bfe8:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 807bfea:	689a      	ldr	r2, [r3, #8]
 807bfec:	6961      	ldr	r1, [r4, #20]
 807bfee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 807bff2:	430a      	orrs	r2, r1
 807bff4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 807bff6:	689a      	ldr	r2, [r3, #8]
 807bff8:	69a1      	ldr	r1, [r4, #24]
 807bffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 807bffe:	430a      	orrs	r2, r1
 807c000:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 807c002:	2301      	movs	r3, #1
  return HAL_OK;
 807c004:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 807c006:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 807c008:	e7d6      	b.n	807bfb8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 807c00a:	4620      	mov	r0, r4
 807c00c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 807c010:	f000 f82c 	bl	807c06c <HAL_CRCEx_Polynomial_Set>
 807c014:	2800      	cmp	r0, #0
 807c016:	d0e2      	beq.n	807bfde <HAL_CRC_Init+0x2e>
 807c018:	e7cd      	b.n	807bfb6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 807c01a:	6922      	ldr	r2, [r4, #16]
 807c01c:	e7e4      	b.n	807bfe8 <HAL_CRC_Init+0x38>
 807c01e:	bf00      	nop
 807c020:	04c11db7 	.word	0x04c11db7

0807c024 <HAL_CRC_Calculate>:
{
 807c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 807c026:	2602      	movs	r6, #2
 807c028:	7746      	strb	r6, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 807c02a:	6806      	ldr	r6, [r0, #0]
{
 807c02c:	4604      	mov	r4, r0
  __HAL_CRC_DR_RESET(hcrc);
 807c02e:	68b7      	ldr	r7, [r6, #8]
 807c030:	f047 0701 	orr.w	r7, r7, #1
 807c034:	60b7      	str	r7, [r6, #8]
  switch (hcrc->InputDataFormat)
 807c036:	6a07      	ldr	r7, [r0, #32]
 807c038:	2f02      	cmp	r7, #2
 807c03a:	d014      	beq.n	807c066 <HAL_CRC_Calculate+0x42>
 807c03c:	2f03      	cmp	r7, #3
 807c03e:	d005      	beq.n	807c04c <HAL_CRC_Calculate+0x28>
 807c040:	2f01      	cmp	r7, #1
 807c042:	d00d      	beq.n	807c060 <HAL_CRC_Calculate+0x3c>
 807c044:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 807c046:	2301      	movs	r3, #1
 807c048:	7763      	strb	r3, [r4, #29]
}
 807c04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 807c04c:	eb01 0582 	add.w	r5, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 807c050:	42a9      	cmp	r1, r5
 807c052:	d101      	bne.n	807c058 <HAL_CRC_Calculate+0x34>
      temp = hcrc->Instance->DR;
 807c054:	6830      	ldr	r0, [r6, #0]
      break;
 807c056:	e7f6      	b.n	807c046 <HAL_CRC_Calculate+0x22>
        hcrc->Instance->DR = pBuffer[index];
 807c058:	f851 3b04 	ldr.w	r3, [r1], #4
 807c05c:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 807c05e:	e7f7      	b.n	807c050 <HAL_CRC_Calculate+0x2c>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 807c060:	f7ff ff58 	bl	807bf14 <CRC_Handle_8>
      break;
 807c064:	e7ef      	b.n	807c046 <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 807c066:	f7ff ff8b 	bl	807bf80 <CRC_Handle_16>
      break;
 807c06a:	e7ec      	b.n	807c046 <HAL_CRC_Calculate+0x22>

0807c06c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 807c06c:	231f      	movs	r3, #31
{
 807c06e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 807c070:	3b01      	subs	r3, #1
 807c072:	d306      	bcc.n	807c082 <HAL_CRCEx_Polynomial_Set+0x16>
 807c074:	fa21 f403 	lsr.w	r4, r1, r3
 807c078:	07e4      	lsls	r4, r4, #31
 807c07a:	d5f9      	bpl.n	807c070 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 807c07c:	2a08      	cmp	r2, #8
 807c07e:	d014      	beq.n	807c0aa <HAL_CRCEx_Polynomial_Set+0x3e>
 807c080:	d802      	bhi.n	807c088 <HAL_CRCEx_Polynomial_Set+0x1c>
 807c082:	b13a      	cbz	r2, 807c094 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 807c084:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 807c086:	e00d      	b.n	807c0a4 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 807c088:	2a10      	cmp	r2, #16
 807c08a:	d00c      	beq.n	807c0a6 <HAL_CRCEx_Polynomial_Set+0x3a>
 807c08c:	2a18      	cmp	r2, #24
 807c08e:	d1f9      	bne.n	807c084 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 807c090:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 807c092:	d8f7      	bhi.n	807c084 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 807c094:	6800      	ldr	r0, [r0, #0]
 807c096:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 807c098:	6883      	ldr	r3, [r0, #8]
 807c09a:	f023 0318 	bic.w	r3, r3, #24
 807c09e:	431a      	orrs	r2, r3
 807c0a0:	6082      	str	r2, [r0, #8]
 807c0a2:	2000      	movs	r0, #0
}
 807c0a4:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 807c0a6:	2b07      	cmp	r3, #7
 807c0a8:	e7f3      	b.n	807c092 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 807c0aa:	2b0f      	cmp	r3, #15
 807c0ac:	e7f1      	b.n	807c092 <HAL_CRCEx_Polynomial_Set+0x26>
	...

0807c0b0 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 807c0b0:	4b06      	ldr	r3, [pc, #24]	; (807c0cc <HAL_FLASH_Unlock+0x1c>)
 807c0b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 807c0b4:	2a00      	cmp	r2, #0
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 807c0b6:	bfbf      	itttt	lt
 807c0b8:	4a05      	ldrlt	r2, [pc, #20]	; (807c0d0 <HAL_FLASH_Unlock+0x20>)
 807c0ba:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 807c0bc:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 807c0c0:	609a      	strlt	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 807c0c2:	bfba      	itte	lt
 807c0c4:	6a98      	ldrlt	r0, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 807c0c6:	0fc0      	lsrlt	r0, r0, #31
 807c0c8:	2000      	movge	r0, #0
    }
  }
#endif

  return status;
}
 807c0ca:	4770      	bx	lr
 807c0cc:	40022000 	.word	0x40022000
 807c0d0:	45670123 	.word	0x45670123

0807c0d4 <HAL_FLASH_Lock>:
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 807c0d4:	4b04      	ldr	r3, [pc, #16]	; (807c0e8 <HAL_FLASH_Lock+0x14>)
 807c0d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 807c0d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 807c0dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 807c0de:	6a98      	ldr	r0, [r3, #40]	; 0x28
    }
  }
#endif

  return status;
}
 807c0e0:	43c0      	mvns	r0, r0
 807c0e2:	0fc0      	lsrs	r0, r0, #31
 807c0e4:	4770      	bx	lr
 807c0e6:	bf00      	nop
 807c0e8:	40022000 	.word	0x40022000

0807c0ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 807c0ec:	b570      	push	{r4, r5, r6, lr}
 807c0ee:	4604      	mov	r4, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 807c0f0:	f7ff fd34 	bl	807bb5c <HAL_GetTick>
  uint32_t error;
  __IO uint32_t *reg_sr;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 807c0f4:	4e10      	ldr	r6, [pc, #64]	; (807c138 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t timeout = HAL_GetTick() + Timeout;
 807c0f6:	1905      	adds	r5, r0, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 807c0f8:	6a33      	ldr	r3, [r6, #32]
 807c0fa:	03db      	lsls	r3, r3, #15
 807c0fc:	d40c      	bmi.n	807c118 <FLASH_WaitForLastOperation+0x2c>
  
  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 807c0fe:	f242 02fa 	movw	r2, #8442	; 0x20fa
 807c102:	490e      	ldr	r1, [pc, #56]	; (807c13c <FLASH_WaitForLastOperation+0x50>)
 807c104:	6808      	ldr	r0, [r1, #0]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */ 

  if(error != 0u)
 807c106:	4002      	ands	r2, r0
 807c108:	d00e      	beq.n	807c128 <FLASH_WaitForLastOperation+0x3c>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 807c10a:	480d      	ldr	r0, [pc, #52]	; (807c140 <FLASH_WaitForLastOperation+0x54>)
 807c10c:	6843      	ldr	r3, [r0, #4]
 807c10e:	4313      	orrs	r3, r2
 807c110:	6043      	str	r3, [r0, #4]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 807c112:	2001      	movs	r0, #1
    (*reg_sr) = error;
 807c114:	600a      	str	r2, [r1, #0]
    (*reg_sr) = FLASH_FLAG_EOP;
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 807c116:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 807c118:	1c62      	adds	r2, r4, #1
 807c11a:	d0ed      	beq.n	807c0f8 <FLASH_WaitForLastOperation+0xc>
      if(HAL_GetTick() >= timeout)
 807c11c:	f7ff fd1e 	bl	807bb5c <HAL_GetTick>
 807c120:	42a8      	cmp	r0, r5
 807c122:	d3e9      	bcc.n	807c0f8 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 807c124:	2003      	movs	r0, #3
 807c126:	e7f6      	b.n	807c116 <FLASH_WaitForLastOperation+0x2a>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 807c128:	6808      	ldr	r0, [r1, #0]
 807c12a:	f010 0001 	ands.w	r0, r0, #1
 807c12e:	d0f2      	beq.n	807c116 <FLASH_WaitForLastOperation+0x2a>
    (*reg_sr) = FLASH_FLAG_EOP;
 807c130:	2301      	movs	r3, #1
 807c132:	4610      	mov	r0, r2
 807c134:	600b      	str	r3, [r1, #0]
 807c136:	e7ee      	b.n	807c116 <FLASH_WaitForLastOperation+0x2a>
 807c138:	40022000 	.word	0x40022000
 807c13c:	40022020 	.word	0x40022020
 807c140:	20000024 	.word	0x20000024

0807c144 <HAL_FLASH_Program>:
{
 807c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 807c148:	4c18      	ldr	r4, [pc, #96]	; (807c1ac <HAL_FLASH_Program+0x68>)
{
 807c14a:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 807c14c:	7823      	ldrb	r3, [r4, #0]
{
 807c14e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 807c150:	2b01      	cmp	r3, #1
{
 807c152:	460e      	mov	r6, r1
 807c154:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 807c156:	d027      	beq.n	807c1a8 <HAL_FLASH_Program+0x64>
 807c158:	2301      	movs	r3, #1
 807c15a:	7023      	strb	r3, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 807c15c:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 807c15e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 807c162:	6063      	str	r3, [r4, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 807c164:	f7ff ffc2 	bl	807c0ec <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 807c168:	b9d0      	cbnz	r0, 807c1a0 <HAL_FLASH_Program+0x5c>
    pFlash.ProcedureOnGoing = TypeProgram;
 807c16a:	60a5      	str	r5, [r4, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 807c16c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 807c170:	b672      	cpsid	i
  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 807c172:	4d0f      	ldr	r5, [pc, #60]	; (807c1b0 <HAL_FLASH_Program+0x6c>)
 807c174:	682b      	ldr	r3, [r5, #0]
 807c176:	f043 0301 	orr.w	r3, r3, #1
 807c17a:	602b      	str	r3, [r5, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 807c17c:	f8c6 8000 	str.w	r8, [r6]
  __ASM volatile ("isb 0xF":::"memory");
 807c180:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 807c184:	6077      	str	r7, [r6, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 807c186:	f382 8810 	msr	PRIMASK, r2
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 807c18a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 807c18e:	f7ff ffad 	bl	807c0ec <FLASH_WaitForLastOperation>
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 807c192:	68a2      	ldr	r2, [r4, #8]
 807c194:	682b      	ldr	r3, [r5, #0]
 807c196:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 807c19a:	ea23 0302 	bic.w	r3, r3, r2
 807c19e:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(&pFlash);
 807c1a0:	2300      	movs	r3, #0
 807c1a2:	7023      	strb	r3, [r4, #0]
}
 807c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(&pFlash);
 807c1a8:	2002      	movs	r0, #2
 807c1aa:	e7fb      	b.n	807c1a4 <HAL_FLASH_Program+0x60>
 807c1ac:	20000024 	.word	0x20000024
 807c1b0:	40022028 	.word	0x40022028

0807c1b4 <FLASH_MassErase>:
#endif
  
  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);

  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 807c1b4:	4b0e      	ldr	r3, [pc, #56]	; (807c1f0 <FLASH_MassErase+0x3c>)
 807c1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807c1b8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 807c1bc:	4b0d      	ldr	r3, [pc, #52]	; (807c1f4 <FLASH_MassErase+0x40>)
 807c1be:	d010      	beq.n	807c1e2 <FLASH_MassErase+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 807c1c0:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 807c1c2:	bf42      	ittt	mi
 807c1c4:	681a      	ldrmi	r2, [r3, #0]
 807c1c6:	f042 0204 	orrmi.w	r2, r2, #4
 807c1ca:	601a      	strmi	r2, [r3, #0]
    }

    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 807c1cc:	0782      	lsls	r2, r0, #30
 807c1ce:	d503      	bpl.n	807c1d8 <FLASH_MassErase+0x24>
    {
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 807c1d0:	681a      	ldr	r2, [r3, #0]
 807c1d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    }
  }
  else
  {
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 807c1d6:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase all sectors */
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 807c1d8:	681a      	ldr	r2, [r3, #0]
 807c1da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 807c1de:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 807c1e0:	4770      	bx	lr
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 807c1e2:	681a      	ldr	r2, [r3, #0]
 807c1e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 807c1e8:	f042 0204 	orr.w	r2, r2, #4
 807c1ec:	e7f3      	b.n	807c1d6 <FLASH_MassErase+0x22>
 807c1ee:	bf00      	nop
 807c1f0:	40022000 	.word	0x40022000
 807c1f4:	40022028 	.word	0x40022028

0807c1f8 <FLASH_PageErase>:
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 807c1f8:	4b0e      	ldr	r3, [pc, #56]	; (807c234 <FLASH_PageErase+0x3c>)
 807c1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807c1fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 807c200:	4b0d      	ldr	r3, [pc, #52]	; (807c238 <FLASH_PageErase+0x40>)
  {
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 807c202:	681a      	ldr	r2, [r3, #0]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 807c204:	d111      	bne.n	807c22a <FLASH_PageErase+0x32>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 807c206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 807c20a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 807c20c:	681a      	ldr	r2, [r3, #0]
 807c20e:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 807c212:	f022 0202 	bic.w	r2, r2, #2
 807c216:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 807c21a:	f040 0002 	orr.w	r0, r0, #2
 807c21e:	6018      	str	r0, [r3, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 807c220:	681a      	ldr	r2, [r3, #0]
 807c222:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 807c226:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif
}
 807c228:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 807c22a:	07c9      	lsls	r1, r1, #31
 807c22c:	d4eb      	bmi.n	807c206 <FLASH_PageErase+0xe>
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 807c22e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 807c232:	e7ea      	b.n	807c20a <FLASH_PageErase+0x12>
 807c234:	40022000 	.word	0x40022000
 807c238:	40022028 	.word	0x40022028

0807c23c <HAL_FLASHEx_Erase>:
{
 807c23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 807c240:	4d23      	ldr	r5, [pc, #140]	; (807c2d0 <HAL_FLASHEx_Erase+0x94>)
{
 807c242:	4606      	mov	r6, r0
  __HAL_LOCK(&pFlash);
 807c244:	782b      	ldrb	r3, [r5, #0]
{
 807c246:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 807c248:	2b01      	cmp	r3, #1
 807c24a:	d03e      	beq.n	807c2ca <HAL_FLASHEx_Erase+0x8e>
 807c24c:	2301      	movs	r3, #1
 807c24e:	702b      	strb	r3, [r5, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 807c250:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 807c252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 807c256:	606b      	str	r3, [r5, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 807c258:	f7ff ff48 	bl	807c0ec <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 807c25c:	4604      	mov	r4, r0
 807c25e:	b9b8      	cbnz	r0, 807c290 <HAL_FLASHEx_Erase+0x54>
    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 807c260:	f248 0204 	movw	r2, #32772	; 0x8004
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 807c264:	6833      	ldr	r3, [r6, #0]
 807c266:	60ab      	str	r3, [r5, #8]
    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 807c268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 807c26c:	4293      	cmp	r3, r2
 807c26e:	d114      	bne.n	807c29a <HAL_FLASHEx_Erase+0x5e>
      FLASH_MassErase(pEraseInit->Banks);
 807c270:	6870      	ldr	r0, [r6, #4]
 807c272:	f7ff ff9f 	bl	807c1b4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 807c276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 807c27a:	f7ff ff37 	bl	807c0ec <FLASH_WaitForLastOperation>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 807c27e:	4604      	mov	r4, r0
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 807c280:	4914      	ldr	r1, [pc, #80]	; (807c2d4 <HAL_FLASHEx_Erase+0x98>)
 807c282:	68aa      	ldr	r2, [r5, #8]
 807c284:	680b      	ldr	r3, [r1, #0]
 807c286:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 807c28a:	ea23 0302 	bic.w	r3, r3, r2
 807c28e:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(&pFlash);
 807c290:	2300      	movs	r3, #0
 807c292:	702b      	strb	r3, [r5, #0]
}
 807c294:	4620      	mov	r0, r4
 807c296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *PageError = 0xFFFFFFFFU;
 807c29a:	f04f 33ff 	mov.w	r3, #4294967295
 807c29e:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 807c2a2:	68b7      	ldr	r7, [r6, #8]
 807c2a4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 807c2a8:	4413      	add	r3, r2
 807c2aa:	42bb      	cmp	r3, r7
 807c2ac:	d9e8      	bls.n	807c280 <HAL_FLASHEx_Erase+0x44>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 807c2ae:	4638      	mov	r0, r7
 807c2b0:	6871      	ldr	r1, [r6, #4]
 807c2b2:	f7ff ffa1 	bl	807c1f8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 807c2b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 807c2ba:	f7ff ff17 	bl	807c0ec <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 807c2be:	b110      	cbz	r0, 807c2c6 <HAL_FLASHEx_Erase+0x8a>
          *PageError = page_index;
 807c2c0:	f8c8 7000 	str.w	r7, [r8]
 807c2c4:	e7db      	b.n	807c27e <HAL_FLASHEx_Erase+0x42>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 807c2c6:	3701      	adds	r7, #1
 807c2c8:	e7ec      	b.n	807c2a4 <HAL_FLASHEx_Erase+0x68>
  __HAL_LOCK(&pFlash);
 807c2ca:	2402      	movs	r4, #2
 807c2cc:	e7e2      	b.n	807c294 <HAL_FLASHEx_Erase+0x58>
 807c2ce:	bf00      	nop
 807c2d0:	20000024 	.word	0x20000024
 807c2d4:	40022028 	.word	0x40022028

0807c2d8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0U;
 807c2d8:	2300      	movs	r3, #0
{
 807c2da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 807c2de:	4c5f      	ldr	r4, [pc, #380]	; (807c45c <HAL_GPIO_Init+0x184>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 807c2e0:	f8df 8180 	ldr.w	r8, [pc, #384]	; 807c464 <HAL_GPIO_Init+0x18c>
 807c2e4:	f8df 9180 	ldr.w	r9, [pc, #384]	; 807c468 <HAL_GPIO_Init+0x190>
  while (((GPIO_Init->Pin) >> position) != 0U)
 807c2e8:	680a      	ldr	r2, [r1, #0]
 807c2ea:	fa32 f503 	lsrs.w	r5, r2, r3
 807c2ee:	d101      	bne.n	807c2f4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 807c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 807c2f4:	f04f 0c01 	mov.w	ip, #1
 807c2f8:	fa0c fc03 	lsl.w	ip, ip, r3
    if(iocurrent != 0U)
 807c2fc:	ea1c 0202 	ands.w	r2, ip, r2
 807c300:	f000 809d 	beq.w	807c43e <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 807c304:	2603      	movs	r6, #3
 807c306:	684d      	ldr	r5, [r1, #4]
 807c308:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 807c30c:	f025 0a10 	bic.w	sl, r5, #16
 807c310:	f10a 37ff 	add.w	r7, sl, #4294967295
 807c314:	fa06 f60e 	lsl.w	r6, r6, lr
 807c318:	2f01      	cmp	r7, #1
 807c31a:	ea6f 0606 	mvn.w	r6, r6
 807c31e:	d811      	bhi.n	807c344 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 807c320:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 807c322:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 807c326:	68cf      	ldr	r7, [r1, #12]
 807c328:	fa07 f70e 	lsl.w	r7, r7, lr
 807c32c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 807c330:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 807c332:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 807c334:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 807c338:	f3c5 1700 	ubfx	r7, r5, #4, #1
 807c33c:	409f      	lsls	r7, r3
 807c33e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 807c342:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 807c344:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 807c346:	f1ba 0f02 	cmp.w	sl, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 807c34a:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 807c34e:	688f      	ldr	r7, [r1, #8]
 807c350:	fa07 f70e 	lsl.w	r7, r7, lr
 807c354:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 807c358:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 807c35a:	d116      	bne.n	807c38a <HAL_GPIO_Init+0xb2>
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 807c35c:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3U];
 807c360:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 807c364:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 807c368:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 807c36c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 807c370:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 807c374:	fa0c fc0b 	lsl.w	ip, ip, fp
 807c378:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 807c37c:	690f      	ldr	r7, [r1, #16]
 807c37e:	fa07 f70b 	lsl.w	r7, r7, fp
 807c382:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 807c386:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 807c38a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 807c38c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 807c38e:	f005 0703 	and.w	r7, r5, #3
 807c392:	fa07 fe0e 	lsl.w	lr, r7, lr
 807c396:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 807c39a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 807c39c:	00ee      	lsls	r6, r5, #3
 807c39e:	d54e      	bpl.n	807c43e <HAL_GPIO_Init+0x166>
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 807c3a0:	f04f 0c0f 	mov.w	ip, #15
 807c3a4:	f023 0703 	bic.w	r7, r3, #3
 807c3a8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 807c3ac:	f507 373d 	add.w	r7, r7, #193536	; 0x2f400
 807c3b0:	f003 0e03 	and.w	lr, r3, #3
        temp = EXTI->EXTICR[position >> 2U];
 807c3b4:	6e3e      	ldr	r6, [r7, #96]	; 0x60
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 807c3b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 807c3ba:	fa0c fc0e 	lsl.w	ip, ip, lr
 807c3be:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 807c3c2:	4e27      	ldr	r6, [pc, #156]	; (807c460 <HAL_GPIO_Init+0x188>)
 807c3c4:	42b0      	cmp	r0, r6
 807c3c6:	d03c      	beq.n	807c442 <HAL_GPIO_Init+0x16a>
 807c3c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 807c3cc:	42b0      	cmp	r0, r6
 807c3ce:	d03a      	beq.n	807c446 <HAL_GPIO_Init+0x16e>
 807c3d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 807c3d4:	42b0      	cmp	r0, r6
 807c3d6:	d038      	beq.n	807c44a <HAL_GPIO_Init+0x172>
 807c3d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 807c3dc:	42b0      	cmp	r0, r6
 807c3de:	d036      	beq.n	807c44e <HAL_GPIO_Init+0x176>
 807c3e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 807c3e4:	42b0      	cmp	r0, r6
 807c3e6:	d034      	beq.n	807c452 <HAL_GPIO_Init+0x17a>
 807c3e8:	4540      	cmp	r0, r8
 807c3ea:	d034      	beq.n	807c456 <HAL_GPIO_Init+0x17e>
 807c3ec:	4548      	cmp	r0, r9
 807c3ee:	bf0c      	ite	eq
 807c3f0:	2606      	moveq	r6, #6
 807c3f2:	2607      	movne	r6, #7
 807c3f4:	fa06 f60e 	lsl.w	r6, r6, lr
 807c3f8:	ea46 060c 	orr.w	r6, r6, ip
        EXTI->EXTICR[position >> 2U] = temp;
 807c3fc:	663e      	str	r6, [r7, #96]	; 0x60
        temp &= ~(iocurrent);
 807c3fe:	43d7      	mvns	r7, r2
        temp = EXTI->IMR1;
 807c400:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 807c404:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 807c408:	bf0c      	ite	eq
 807c40a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 807c40c:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 807c40e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 807c412:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 807c416:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 807c41a:	bf0c      	ite	eq
 807c41c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 807c41e:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 807c420:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        temp = EXTI->RTSR1;
 807c424:	6826      	ldr	r6, [r4, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 807c426:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 807c42a:	bf0c      	ite	eq
 807c42c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 807c42e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 807c430:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 807c432:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 807c434:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 807c436:	bf54      	ite	pl
 807c438:	403e      	andpl	r6, r7
          temp |= iocurrent;
 807c43a:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 807c43c:	6066      	str	r6, [r4, #4]
    position++;
 807c43e:	3301      	adds	r3, #1
 807c440:	e752      	b.n	807c2e8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 807c442:	2600      	movs	r6, #0
 807c444:	e7d6      	b.n	807c3f4 <HAL_GPIO_Init+0x11c>
 807c446:	2601      	movs	r6, #1
 807c448:	e7d4      	b.n	807c3f4 <HAL_GPIO_Init+0x11c>
 807c44a:	2602      	movs	r6, #2
 807c44c:	e7d2      	b.n	807c3f4 <HAL_GPIO_Init+0x11c>
 807c44e:	2603      	movs	r6, #3
 807c450:	e7d0      	b.n	807c3f4 <HAL_GPIO_Init+0x11c>
 807c452:	2604      	movs	r6, #4
 807c454:	e7ce      	b.n	807c3f4 <HAL_GPIO_Init+0x11c>
 807c456:	2605      	movs	r6, #5
 807c458:	e7cc      	b.n	807c3f4 <HAL_GPIO_Init+0x11c>
 807c45a:	bf00      	nop
 807c45c:	4002f400 	.word	0x4002f400
 807c460:	42020000 	.word	0x42020000
 807c464:	42021400 	.word	0x42021400
 807c468:	42021800 	.word	0x42021800

0807c46c <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 807c46c:	4a02      	ldr	r2, [pc, #8]	; (807c478 <HAL_PWREx_EnableVddIO2+0xc>)
 807c46e:	6853      	ldr	r3, [r2, #4]
 807c470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 807c474:	6053      	str	r3, [r2, #4]
}
 807c476:	4770      	bx	lr
 807c478:	40007000 	.word	0x40007000

0807c47c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 807c47c:	4b23      	ldr	r3, [pc, #140]	; (807c50c <HAL_RCC_GetSysClockFreq+0x90>)
 807c47e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 807c480:	68d9      	ldr	r1, [r3, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 807c482:	f012 020c 	ands.w	r2, r2, #12
 807c486:	d005      	beq.n	807c494 <HAL_RCC_GetSysClockFreq+0x18>
 807c488:	2a0c      	cmp	r2, #12
 807c48a:	d115      	bne.n	807c4b8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 807c48c:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 807c490:	2901      	cmp	r1, #1
 807c492:	d118      	bne.n	807c4c6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 807c494:	6819      	ldr	r1, [r3, #0]
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 807c496:	481e      	ldr	r0, [pc, #120]	; (807c510 <HAL_RCC_GetSysClockFreq+0x94>)
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 807c498:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 807c49a:	bf55      	itete	pl
 807c49c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 807c4a0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 807c4a2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 807c4a6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 807c4aa:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 807c4ae:	b112      	cbz	r2, 807c4b6 <HAL_RCC_GetSysClockFreq+0x3a>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 807c4b0:	2a0c      	cmp	r2, #12
 807c4b2:	d009      	beq.n	807c4c8 <HAL_RCC_GetSysClockFreq+0x4c>
 807c4b4:	2000      	movs	r0, #0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
}
 807c4b6:	4770      	bx	lr
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 807c4b8:	2a04      	cmp	r2, #4
 807c4ba:	d024      	beq.n	807c506 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 807c4bc:	2a08      	cmp	r2, #8
 807c4be:	4815      	ldr	r0, [pc, #84]	; (807c514 <HAL_RCC_GetSysClockFreq+0x98>)
 807c4c0:	bf18      	it	ne
 807c4c2:	2000      	movne	r0, #0
 807c4c4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 807c4c6:	2000      	movs	r0, #0
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 807c4c8:	68d9      	ldr	r1, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 807c4ca:	68da      	ldr	r2, [r3, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 807c4cc:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 807c4d0:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 807c4d4:	2902      	cmp	r1, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 807c4d6:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 807c4da:	d005      	beq.n	807c4e8 <HAL_RCC_GetSysClockFreq+0x6c>
 807c4dc:	2903      	cmp	r1, #3
 807c4de:	d003      	beq.n	807c4e8 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 807c4e0:	68d9      	ldr	r1, [r3, #12]
 807c4e2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 807c4e6:	e003      	b.n	807c4f0 <HAL_RCC_GetSysClockFreq+0x74>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 807c4e8:	68d9      	ldr	r1, [r3, #12]
 807c4ea:	480a      	ldr	r0, [pc, #40]	; (807c514 <HAL_RCC_GetSysClockFreq+0x98>)
 807c4ec:	f3c1 2106 	ubfx	r1, r1, #8, #7
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 807c4f0:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 807c4f4:	68db      	ldr	r3, [r3, #12]
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 807c4f6:	4348      	muls	r0, r1
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 807c4f8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 807c4fc:	3301      	adds	r3, #1
 807c4fe:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 807c500:	fbb0 f0f3 	udiv	r0, r0, r3
 807c504:	4770      	bx	lr
 807c506:	4803      	ldr	r0, [pc, #12]	; (807c514 <HAL_RCC_GetSysClockFreq+0x98>)
 807c508:	4770      	bx	lr
 807c50a:	bf00      	nop
 807c50c:	40021000 	.word	0x40021000
 807c510:	0807e500 	.word	0x0807e500
 807c514:	00f42400 	.word	0x00f42400

0807c518 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 807c518:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 807c51a:	f7ff ffaf 	bl	807c47c <HAL_RCC_GetSysClockFreq>
 807c51e:	4b04      	ldr	r3, [pc, #16]	; (807c530 <HAL_RCC_GetHCLKFreq+0x18>)
 807c520:	4a04      	ldr	r2, [pc, #16]	; (807c534 <HAL_RCC_GetHCLKFreq+0x1c>)
 807c522:	689b      	ldr	r3, [r3, #8]
 807c524:	f3c3 1303 	ubfx	r3, r3, #4, #4
 807c528:	5cd3      	ldrb	r3, [r2, r3]
}
 807c52a:	40d8      	lsrs	r0, r3
 807c52c:	bd08      	pop	{r3, pc}
 807c52e:	bf00      	nop
 807c530:	40021000 	.word	0x40021000
 807c534:	0807e540 	.word	0x0807e540

0807c538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 807c538:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 807c53a:	f7ff ffed 	bl	807c518 <HAL_RCC_GetHCLKFreq>
 807c53e:	4b04      	ldr	r3, [pc, #16]	; (807c550 <HAL_RCC_GetPCLK1Freq+0x18>)
 807c540:	4a04      	ldr	r2, [pc, #16]	; (807c554 <HAL_RCC_GetPCLK1Freq+0x1c>)
 807c542:	689b      	ldr	r3, [r3, #8]
 807c544:	f3c3 2302 	ubfx	r3, r3, #8, #3
 807c548:	5cd3      	ldrb	r3, [r2, r3]
}
 807c54a:	40d8      	lsrs	r0, r3
 807c54c:	bd08      	pop	{r3, pc}
 807c54e:	bf00      	nop
 807c550:	40021000 	.word	0x40021000
 807c554:	0807e550 	.word	0x0807e550

0807c558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 807c558:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 807c55a:	f7ff ffdd 	bl	807c518 <HAL_RCC_GetHCLKFreq>
 807c55e:	4b04      	ldr	r3, [pc, #16]	; (807c570 <HAL_RCC_GetPCLK2Freq+0x18>)
 807c560:	4a04      	ldr	r2, [pc, #16]	; (807c574 <HAL_RCC_GetPCLK2Freq+0x1c>)
 807c562:	689b      	ldr	r3, [r3, #8]
 807c564:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 807c568:	5cd3      	ldrb	r3, [r2, r3]
}
 807c56a:	40d8      	lsrs	r0, r3
 807c56c:	bd08      	pop	{r3, pc}
 807c56e:	bf00      	nop
 807c570:	40021000 	.word	0x40021000
 807c574:	0807e550 	.word	0x0807e550

0807c578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 807c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807c57a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 807c57c:	6921      	ldr	r1, [r4, #16]
 807c57e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 807c580:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 807c582:	430a      	orrs	r2, r1
 807c584:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 807c586:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 807c588:	69c0      	ldr	r0, [r0, #28]
 807c58a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 807c58c:	49a3      	ldr	r1, [pc, #652]	; (807c81c <UART_SetConfig+0x2a4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 807c58e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 807c590:	4029      	ands	r1, r5
 807c592:	430a      	orrs	r2, r1
 807c594:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 807c596:	685a      	ldr	r2, [r3, #4]
 807c598:	68e1      	ldr	r1, [r4, #12]
 807c59a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 807c59e:	430a      	orrs	r2, r1
 807c5a0:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 807c5a2:	4a9f      	ldr	r2, [pc, #636]	; (807c820 <UART_SetConfig+0x2a8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 807c5a4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 807c5a6:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 807c5a8:	bf1c      	itt	ne
 807c5aa:	6a22      	ldrne	r2, [r4, #32]
 807c5ac:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 807c5ae:	689a      	ldr	r2, [r3, #8]
 807c5b0:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 807c5b4:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 807c5b8:	430a      	orrs	r2, r1
 807c5ba:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 807c5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807c5be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 807c5c0:	f022 020f 	bic.w	r2, r2, #15
 807c5c4:	430a      	orrs	r2, r1
 807c5c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 807c5c8:	4a96      	ldr	r2, [pc, #600]	; (807c824 <UART_SetConfig+0x2ac>)
 807c5ca:	4293      	cmp	r3, r2
 807c5cc:	d11b      	bne.n	807c606 <UART_SetConfig+0x8e>
 807c5ce:	4b96      	ldr	r3, [pc, #600]	; (807c828 <UART_SetConfig+0x2b0>)
 807c5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 807c5d4:	f003 0303 	and.w	r3, r3, #3
 807c5d8:	3b01      	subs	r3, #1
 807c5da:	2b02      	cmp	r3, #2
 807c5dc:	f200 80ed 	bhi.w	807c7ba <UART_SetConfig+0x242>
 807c5e0:	4a92      	ldr	r2, [pc, #584]	; (807c82c <UART_SetConfig+0x2b4>)
 807c5e2:	5cd3      	ldrb	r3, [r2, r3]
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 807c5e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 807c5e8:	f040 80ae 	bne.w	807c748 <UART_SetConfig+0x1d0>
  {
    switch (clocksource)
 807c5ec:	2b08      	cmp	r3, #8
 807c5ee:	d828      	bhi.n	807c642 <UART_SetConfig+0xca>
 807c5f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 807c5f4:	00e600f2 	.word	0x00e600f2
 807c5f8:	002700a8 	.word	0x002700a8
 807c5fc:	002700ec 	.word	0x002700ec
 807c600:	00270027 	.word	0x00270027
 807c604:	00f6      	.short	0x00f6
  UART_GETCLOCKSOURCE(huart, clocksource);
 807c606:	4a8a      	ldr	r2, [pc, #552]	; (807c830 <UART_SetConfig+0x2b8>)
 807c608:	4293      	cmp	r3, r2
 807c60a:	d108      	bne.n	807c61e <UART_SetConfig+0xa6>
 807c60c:	4b86      	ldr	r3, [pc, #536]	; (807c828 <UART_SetConfig+0x2b0>)
 807c60e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 807c612:	4b86      	ldr	r3, [pc, #536]	; (807c82c <UART_SetConfig+0x2b4>)
 807c614:	f002 020c 	and.w	r2, r2, #12
 807c618:	4413      	add	r3, r2
 807c61a:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 807c61c:	e7e2      	b.n	807c5e4 <UART_SetConfig+0x6c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 807c61e:	4a85      	ldr	r2, [pc, #532]	; (807c834 <UART_SetConfig+0x2bc>)
 807c620:	4293      	cmp	r3, r2
 807c622:	d119      	bne.n	807c658 <UART_SetConfig+0xe0>
 807c624:	4b80      	ldr	r3, [pc, #512]	; (807c828 <UART_SetConfig+0x2b0>)
 807c626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 807c62a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 807c62e:	2b20      	cmp	r3, #32
 807c630:	f000 80be 	beq.w	807c7b0 <UART_SetConfig+0x238>
 807c634:	d807      	bhi.n	807c646 <UART_SetConfig+0xce>
 807c636:	2b00      	cmp	r3, #0
 807c638:	f000 80cb 	beq.w	807c7d2 <UART_SetConfig+0x25a>
 807c63c:	2b10      	cmp	r3, #16
 807c63e:	f000 80c2 	beq.w	807c7c6 <UART_SetConfig+0x24e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 807c642:	2001      	movs	r0, #1
 807c644:	e04e      	b.n	807c6e4 <UART_SetConfig+0x16c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 807c646:	2b30      	cmp	r3, #48	; 0x30
 807c648:	d1fb      	bne.n	807c642 <UART_SetConfig+0xca>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 807c64a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 807c64e:	f000 80c7 	beq.w	807c7e0 <UART_SetConfig+0x268>
 807c652:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 807c656:	e093      	b.n	807c780 <UART_SetConfig+0x208>
  UART_GETCLOCKSOURCE(huart, clocksource);
 807c658:	4a77      	ldr	r2, [pc, #476]	; (807c838 <UART_SetConfig+0x2c0>)
 807c65a:	4293      	cmp	r3, r2
 807c65c:	d10f      	bne.n	807c67e <UART_SetConfig+0x106>
 807c65e:	4b72      	ldr	r3, [pc, #456]	; (807c828 <UART_SetConfig+0x2b0>)
 807c660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 807c664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 807c668:	2b80      	cmp	r3, #128	; 0x80
 807c66a:	f000 80a1 	beq.w	807c7b0 <UART_SetConfig+0x238>
 807c66e:	d804      	bhi.n	807c67a <UART_SetConfig+0x102>
 807c670:	2b00      	cmp	r3, #0
 807c672:	f000 80ae 	beq.w	807c7d2 <UART_SetConfig+0x25a>
 807c676:	2b40      	cmp	r3, #64	; 0x40
 807c678:	e7e1      	b.n	807c63e <UART_SetConfig+0xc6>
 807c67a:	2bc0      	cmp	r3, #192	; 0xc0
 807c67c:	e7e4      	b.n	807c648 <UART_SetConfig+0xd0>
 807c67e:	4a6f      	ldr	r2, [pc, #444]	; (807c83c <UART_SetConfig+0x2c4>)
 807c680:	4293      	cmp	r3, r2
 807c682:	d112      	bne.n	807c6aa <UART_SetConfig+0x132>
 807c684:	4b68      	ldr	r3, [pc, #416]	; (807c828 <UART_SetConfig+0x2b0>)
 807c686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 807c68a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 807c68e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 807c692:	f000 808d 	beq.w	807c7b0 <UART_SetConfig+0x238>
 807c696:	d805      	bhi.n	807c6a4 <UART_SetConfig+0x12c>
 807c698:	2b00      	cmp	r3, #0
 807c69a:	f000 809a 	beq.w	807c7d2 <UART_SetConfig+0x25a>
 807c69e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 807c6a2:	e7cc      	b.n	807c63e <UART_SetConfig+0xc6>
 807c6a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 807c6a8:	e7ce      	b.n	807c648 <UART_SetConfig+0xd0>
 807c6aa:	4a5d      	ldr	r2, [pc, #372]	; (807c820 <UART_SetConfig+0x2a8>)
 807c6ac:	4293      	cmp	r3, r2
 807c6ae:	d1c8      	bne.n	807c642 <UART_SetConfig+0xca>
 807c6b0:	4b5d      	ldr	r3, [pc, #372]	; (807c828 <UART_SetConfig+0x2b0>)
 807c6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 807c6b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 807c6ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 807c6be:	d018      	beq.n	807c6f2 <UART_SetConfig+0x17a>
 807c6c0:	d806      	bhi.n	807c6d0 <UART_SetConfig+0x158>
 807c6c2:	b15b      	cbz	r3, 807c6dc <UART_SetConfig+0x164>
 807c6c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 807c6c8:	d1bb      	bne.n	807c642 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 807c6ca:	f7ff fed7 	bl	807c47c <HAL_RCC_GetSysClockFreq>
        break;
 807c6ce:	e007      	b.n	807c6e0 <UART_SetConfig+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 807c6d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 807c6d4:	d1b5      	bne.n	807c642 <UART_SetConfig+0xca>
        pclk = (uint32_t) LSE_VALUE;
 807c6d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 807c6da:	e00b      	b.n	807c6f4 <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetPCLK1Freq();
 807c6dc:	f7ff ff2c 	bl	807c538 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 807c6e0:	b940      	cbnz	r0, 807c6f4 <UART_SetConfig+0x17c>
 807c6e2:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 807c6e4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 807c6e8:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 807c6ea:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 807c6ec:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 807c6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 807c6f2:	4853      	ldr	r0, [pc, #332]	; (807c840 <UART_SetConfig+0x2c8>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 807c6f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 807c6f6:	4b4d      	ldr	r3, [pc, #308]	; (807c82c <UART_SetConfig+0x2b4>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 807c6f8:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 807c6fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 807c6fe:	8a1a      	ldrh	r2, [r3, #16]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 807c700:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 807c704:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 807c708:	4299      	cmp	r1, r3
 807c70a:	d89a      	bhi.n	807c642 <UART_SetConfig+0xca>
 807c70c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 807c710:	d897      	bhi.n	807c642 <UART_SetConfig+0xca>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 807c712:	2300      	movs	r3, #0
 807c714:	2100      	movs	r1, #0
 807c716:	f001 fb57 	bl	807ddc8 <__aeabi_uldivmod>
 807c71a:	020f      	lsls	r7, r1, #8
 807c71c:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 807c720:	0206      	lsls	r6, r0, #8
 807c722:	0868      	lsrs	r0, r5, #1
 807c724:	1830      	adds	r0, r6, r0
 807c726:	462a      	mov	r2, r5
 807c728:	f04f 0300 	mov.w	r3, #0
 807c72c:	f147 0100 	adc.w	r1, r7, #0
 807c730:	f001 fb4a 	bl	807ddc8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 807c734:	4b43      	ldr	r3, [pc, #268]	; (807c844 <UART_SetConfig+0x2cc>)
 807c736:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 807c73a:	429a      	cmp	r2, r3
 807c73c:	d881      	bhi.n	807c642 <UART_SetConfig+0xca>
          huart->Instance->BRR = usartdiv;
 807c73e:	6823      	ldr	r3, [r4, #0]
 807c740:	60d8      	str	r0, [r3, #12]
 807c742:	e7ce      	b.n	807c6e2 <UART_SetConfig+0x16a>
        pclk = (uint32_t) HSI_VALUE;
 807c744:	483e      	ldr	r0, [pc, #248]	; (807c840 <UART_SetConfig+0x2c8>)
 807c746:	e04b      	b.n	807c7e0 <UART_SetConfig+0x268>
    switch (clocksource)
 807c748:	2b08      	cmp	r3, #8
 807c74a:	f63f af7a 	bhi.w	807c642 <UART_SetConfig+0xca>
 807c74e:	a201      	add	r2, pc, #4	; (adr r2, 807c754 <UART_SetConfig+0x1dc>)
 807c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807c754:	0807c779 	.word	0x0807c779
 807c758:	0807c7a5 	.word	0x0807c7a5
 807c75c:	0807c7b7 	.word	0x0807c7b7
 807c760:	0807c643 	.word	0x0807c643
 807c764:	0807c7ab 	.word	0x0807c7ab
 807c768:	0807c643 	.word	0x0807c643
 807c76c:	0807c643 	.word	0x0807c643
 807c770:	0807c643 	.word	0x0807c643
 807c774:	0807c653 	.word	0x0807c653
        pclk = HAL_RCC_GetPCLK1Freq();
 807c778:	f7ff fede 	bl	807c538 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 807c77c:	2800      	cmp	r0, #0
 807c77e:	d0b0      	beq.n	807c6e2 <UART_SetConfig+0x16a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 807c780:	6a61      	ldr	r1, [r4, #36]	; 0x24
 807c782:	4b2a      	ldr	r3, [pc, #168]	; (807c82c <UART_SetConfig+0x2b4>)
 807c784:	6862      	ldr	r2, [r4, #4]
 807c786:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 807c78a:	8a1b      	ldrh	r3, [r3, #16]
 807c78c:	fbb0 f0f3 	udiv	r0, r0, r3
 807c790:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 807c794:	fbb0 f0f2 	udiv	r0, r0, r2
 807c798:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 807c79a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 807c79e:	f1a0 0210 	sub.w	r2, r0, #16
 807c7a2:	e7ca      	b.n	807c73a <UART_SetConfig+0x1c2>
        pclk = HAL_RCC_GetPCLK2Freq();
 807c7a4:	f7ff fed8 	bl	807c558 <HAL_RCC_GetPCLK2Freq>
        break;
 807c7a8:	e7e8      	b.n	807c77c <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetSysClockFreq();
 807c7aa:	f7ff fe67 	bl	807c47c <HAL_RCC_GetSysClockFreq>
        break;
 807c7ae:	e7e5      	b.n	807c77c <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 807c7b0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 807c7b4:	d0c6      	beq.n	807c744 <UART_SetConfig+0x1cc>
        pclk = (uint32_t) HSI_VALUE;
 807c7b6:	4822      	ldr	r0, [pc, #136]	; (807c840 <UART_SetConfig+0x2c8>)
 807c7b8:	e7e2      	b.n	807c780 <UART_SetConfig+0x208>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 807c7ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 807c7be:	d1f1      	bne.n	807c7a4 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetPCLK2Freq();
 807c7c0:	f7ff feca 	bl	807c558 <HAL_RCC_GetPCLK2Freq>
        break;
 807c7c4:	e00a      	b.n	807c7dc <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 807c7c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 807c7ca:	d1ee      	bne.n	807c7aa <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetSysClockFreq();
 807c7cc:	f7ff fe56 	bl	807c47c <HAL_RCC_GetSysClockFreq>
        break;
 807c7d0:	e004      	b.n	807c7dc <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 807c7d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 807c7d6:	d1cf      	bne.n	807c778 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK1Freq();
 807c7d8:	f7ff feae 	bl	807c538 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 807c7dc:	2800      	cmp	r0, #0
 807c7de:	d080      	beq.n	807c6e2 <UART_SetConfig+0x16a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 807c7e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 807c7e2:	4b12      	ldr	r3, [pc, #72]	; (807c82c <UART_SetConfig+0x2b4>)
 807c7e4:	6862      	ldr	r2, [r4, #4]
 807c7e6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 807c7ea:	8a1b      	ldrh	r3, [r3, #16]
 807c7ec:	fbb0 f3f3 	udiv	r3, r0, r3
 807c7f0:	0850      	lsrs	r0, r2, #1
 807c7f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 807c7f6:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 807c7fa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 807c7fe:	b283      	uxth	r3, r0
 807c800:	f1a3 0110 	sub.w	r1, r3, #16
 807c804:	4291      	cmp	r1, r2
 807c806:	f63f af1c 	bhi.w	807c642 <UART_SetConfig+0xca>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 807c80a:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 807c80e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 807c810:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 807c812:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 807c816:	4318      	orrs	r0, r3
 807c818:	60d0      	str	r0, [r2, #12]
 807c81a:	e762      	b.n	807c6e2 <UART_SetConfig+0x16a>
 807c81c:	cfff69f3 	.word	0xcfff69f3
 807c820:	40008000 	.word	0x40008000
 807c824:	40013800 	.word	0x40013800
 807c828:	40021000 	.word	0x40021000
 807c82c:	0807e570 	.word	0x0807e570
 807c830:	40004400 	.word	0x40004400
 807c834:	40004800 	.word	0x40004800
 807c838:	40004c00 	.word	0x40004c00
 807c83c:	40005000 	.word	0x40005000
 807c840:	00f42400 	.word	0x00f42400
 807c844:	000ffcff 	.word	0x000ffcff

0807c848 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 807c848:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 807c84a:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 807c84c:	07da      	lsls	r2, r3, #31
 807c84e:	d506      	bpl.n	807c85e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 807c850:	6801      	ldr	r1, [r0, #0]
 807c852:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 807c854:	684a      	ldr	r2, [r1, #4]
 807c856:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 807c85a:	4322      	orrs	r2, r4
 807c85c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 807c85e:	079c      	lsls	r4, r3, #30
 807c860:	d506      	bpl.n	807c870 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 807c862:	6801      	ldr	r1, [r0, #0]
 807c864:	6b04      	ldr	r4, [r0, #48]	; 0x30
 807c866:	684a      	ldr	r2, [r1, #4]
 807c868:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 807c86c:	4322      	orrs	r2, r4
 807c86e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 807c870:	0759      	lsls	r1, r3, #29
 807c872:	d506      	bpl.n	807c882 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 807c874:	6801      	ldr	r1, [r0, #0]
 807c876:	6b44      	ldr	r4, [r0, #52]	; 0x34
 807c878:	684a      	ldr	r2, [r1, #4]
 807c87a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 807c87e:	4322      	orrs	r2, r4
 807c880:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 807c882:	071a      	lsls	r2, r3, #28
 807c884:	d506      	bpl.n	807c894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 807c886:	6801      	ldr	r1, [r0, #0]
 807c888:	6b84      	ldr	r4, [r0, #56]	; 0x38
 807c88a:	684a      	ldr	r2, [r1, #4]
 807c88c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 807c890:	4322      	orrs	r2, r4
 807c892:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 807c894:	06dc      	lsls	r4, r3, #27
 807c896:	d506      	bpl.n	807c8a6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 807c898:	6801      	ldr	r1, [r0, #0]
 807c89a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 807c89c:	688a      	ldr	r2, [r1, #8]
 807c89e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 807c8a2:	4322      	orrs	r2, r4
 807c8a4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 807c8a6:	0699      	lsls	r1, r3, #26
 807c8a8:	d506      	bpl.n	807c8b8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 807c8aa:	6801      	ldr	r1, [r0, #0]
 807c8ac:	6c04      	ldr	r4, [r0, #64]	; 0x40
 807c8ae:	688a      	ldr	r2, [r1, #8]
 807c8b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 807c8b4:	4322      	orrs	r2, r4
 807c8b6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 807c8b8:	065a      	lsls	r2, r3, #25
 807c8ba:	d510      	bpl.n	807c8de <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 807c8bc:	6801      	ldr	r1, [r0, #0]
 807c8be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 807c8c0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 807c8c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 807c8c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 807c8ca:	ea42 0204 	orr.w	r2, r2, r4
 807c8ce:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 807c8d0:	d105      	bne.n	807c8de <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 807c8d2:	684a      	ldr	r2, [r1, #4]
 807c8d4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 807c8d6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 807c8da:	4322      	orrs	r2, r4
 807c8dc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 807c8de:	061b      	lsls	r3, r3, #24
 807c8e0:	d506      	bpl.n	807c8f0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 807c8e2:	6802      	ldr	r2, [r0, #0]
 807c8e4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 807c8e6:	6853      	ldr	r3, [r2, #4]
 807c8e8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 807c8ec:	430b      	orrs	r3, r1
 807c8ee:	6053      	str	r3, [r2, #4]
  }
}
 807c8f0:	bd10      	pop	{r4, pc}

0807c8f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 807c8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 807c8f6:	4604      	mov	r4, r0
 807c8f8:	460e      	mov	r6, r1
 807c8fa:	4615      	mov	r5, r2
 807c8fc:	461f      	mov	r7, r3
 807c8fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 807c902:	6822      	ldr	r2, [r4, #0]
 807c904:	69d3      	ldr	r3, [r2, #28]
 807c906:	ea36 0303 	bics.w	r3, r6, r3
 807c90a:	bf0c      	ite	eq
 807c90c:	2301      	moveq	r3, #1
 807c90e:	2300      	movne	r3, #0
 807c910:	42ab      	cmp	r3, r5
 807c912:	d001      	beq.n	807c918 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 807c914:	2000      	movs	r0, #0
 807c916:	e01c      	b.n	807c952 <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 807c918:	f1b8 3fff 	cmp.w	r8, #4294967295
 807c91c:	d0f2      	beq.n	807c904 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 807c91e:	f7ff f91d 	bl	807bb5c <HAL_GetTick>
 807c922:	1bc0      	subs	r0, r0, r7
 807c924:	4540      	cmp	r0, r8
 807c926:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 807c928:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 807c92a:	d802      	bhi.n	807c932 <UART_WaitOnFlagUntilTimeout+0x40>
 807c92c:	f1b8 0f00 	cmp.w	r8, #0
 807c930:	d111      	bne.n	807c956 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 807c932:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 807c936:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 807c938:	6883      	ldr	r3, [r0, #8]
 807c93a:	f023 0301 	bic.w	r3, r3, #1
 807c93e:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 807c940:	2320      	movs	r3, #32
 807c942:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 807c946:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 807c94a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 807c94c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 807c94e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 807c952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 807c956:	075a      	lsls	r2, r3, #29
 807c958:	d5d3      	bpl.n	807c902 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 807c95a:	69c3      	ldr	r3, [r0, #28]
 807c95c:	051b      	lsls	r3, r3, #20
 807c95e:	d5d0      	bpl.n	807c902 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 807c960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 807c964:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 807c966:	6803      	ldr	r3, [r0, #0]
 807c968:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 807c96c:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 807c96e:	6883      	ldr	r3, [r0, #8]
 807c970:	f023 0301 	bic.w	r3, r3, #1
 807c974:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 807c976:	2320      	movs	r3, #32
 807c978:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 807c97c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 807c980:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 807c984:	e7e1      	b.n	807c94a <UART_WaitOnFlagUntilTimeout+0x58>

0807c986 <HAL_UART_Transmit>:
{
 807c986:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 807c98a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 807c98c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 807c990:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 807c992:	2b20      	cmp	r3, #32
{
 807c994:	460e      	mov	r6, r1
 807c996:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 807c998:	d150      	bne.n	807ca3c <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 807c99a:	2900      	cmp	r1, #0
 807c99c:	d04c      	beq.n	807ca38 <HAL_UART_Transmit+0xb2>
 807c99e:	2a00      	cmp	r2, #0
 807c9a0:	d04a      	beq.n	807ca38 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 807c9a2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 807c9a6:	2b01      	cmp	r3, #1
 807c9a8:	d048      	beq.n	807ca3c <HAL_UART_Transmit+0xb6>
 807c9aa:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 807c9ac:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 807c9ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 807c9b2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 807c9b4:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 807c9b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 807c9bc:	f7ff f8ce 	bl	807bb5c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 807c9c0:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 807c9c2:	4603      	mov	r3, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 807c9c4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferSize  = Size;
 807c9c8:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 807c9cc:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 807c9d0:	d103      	bne.n	807c9da <HAL_UART_Transmit+0x54>
 807c9d2:	6922      	ldr	r2, [r4, #16]
 807c9d4:	b90a      	cbnz	r2, 807c9da <HAL_UART_Transmit+0x54>
 807c9d6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 807c9d8:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 807c9da:	2200      	movs	r2, #0
 807c9dc:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 807c9e0:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 807c9e4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 807c9e8:	b292      	uxth	r2, r2
 807c9ea:	b942      	cbnz	r2, 807c9fe <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 807c9ec:	2140      	movs	r1, #64	; 0x40
 807c9ee:	4620      	mov	r0, r4
 807c9f0:	f7ff ff7f 	bl	807c8f2 <UART_WaitOnFlagUntilTimeout>
 807c9f4:	b958      	cbnz	r0, 807ca0e <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 807c9f6:	2320      	movs	r3, #32
 807c9f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 807c9fc:	e008      	b.n	807ca10 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 807c9fe:	2200      	movs	r2, #0
 807ca00:	2180      	movs	r1, #128	; 0x80
 807ca02:	4620      	mov	r0, r4
 807ca04:	9303      	str	r3, [sp, #12]
 807ca06:	f7ff ff74 	bl	807c8f2 <UART_WaitOnFlagUntilTimeout>
 807ca0a:	9b03      	ldr	r3, [sp, #12]
 807ca0c:	b118      	cbz	r0, 807ca16 <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 807ca0e:	2003      	movs	r0, #3
}
 807ca10:	b004      	add	sp, #16
 807ca12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 807ca16:	6821      	ldr	r1, [r4, #0]
 807ca18:	b95e      	cbnz	r6, 807ca32 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 807ca1a:	f835 2b02 	ldrh.w	r2, [r5], #2
 807ca1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 807ca22:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 807ca24:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 807ca28:	3a01      	subs	r2, #1
 807ca2a:	b292      	uxth	r2, r2
 807ca2c:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 807ca30:	e7d6      	b.n	807c9e0 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 807ca32:	f816 2b01 	ldrb.w	r2, [r6], #1
 807ca36:	e7f4      	b.n	807ca22 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 807ca38:	2001      	movs	r0, #1
 807ca3a:	e7e9      	b.n	807ca10 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 807ca3c:	2002      	movs	r0, #2
 807ca3e:	e7e7      	b.n	807ca10 <HAL_UART_Transmit+0x8a>

0807ca40 <HAL_UART_Receive>:
{
 807ca40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 807ca44:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 807ca46:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 807ca4a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 807ca4c:	2b20      	cmp	r3, #32
{
 807ca4e:	460d      	mov	r5, r1
 807ca50:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 807ca52:	d16a      	bne.n	807cb2a <HAL_UART_Receive+0xea>
    if ((pData == NULL) || (Size == 0U))
 807ca54:	2900      	cmp	r1, #0
 807ca56:	d066      	beq.n	807cb26 <HAL_UART_Receive+0xe6>
 807ca58:	2a00      	cmp	r2, #0
 807ca5a:	d064      	beq.n	807cb26 <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 807ca5c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 807ca60:	2b01      	cmp	r3, #1
 807ca62:	d062      	beq.n	807cb2a <HAL_UART_Receive+0xea>
 807ca64:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 807ca66:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 807ca6a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 807ca6e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 807ca70:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 807ca74:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 807ca78:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 807ca7c:	f7ff f86e 	bl	807bb5c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 807ca80:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 807ca82:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 807ca84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 807ca88:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    huart->RxXferCount = Size;
 807ca8c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 807ca90:	d11d      	bne.n	807cace <HAL_UART_Receive+0x8e>
 807ca92:	6922      	ldr	r2, [r4, #16]
 807ca94:	b9ca      	cbnz	r2, 807caca <HAL_UART_Receive+0x8a>
 807ca96:	f240 12ff 	movw	r2, #511	; 0x1ff
 807ca9a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 807ca9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 807caa2:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 807caa6:	d123      	bne.n	807caf0 <HAL_UART_Receive+0xb0>
 807caa8:	6923      	ldr	r3, [r4, #16]
 807caaa:	bb0b      	cbnz	r3, 807caf0 <HAL_UART_Receive+0xb0>
 807caac:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 807caae:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 807cab0:	2300      	movs	r3, #0
 807cab2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 807cab6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 807caba:	b290      	uxth	r0, r2
 807cabc:	b9d0      	cbnz	r0, 807caf4 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 807cabe:	2320      	movs	r3, #32
 807cac0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 807cac4:	b003      	add	sp, #12
 807cac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 807caca:	22ff      	movs	r2, #255	; 0xff
 807cacc:	e7e5      	b.n	807ca9a <HAL_UART_Receive+0x5a>
 807cace:	b923      	cbnz	r3, 807cada <HAL_UART_Receive+0x9a>
 807cad0:	6922      	ldr	r2, [r4, #16]
 807cad2:	2a00      	cmp	r2, #0
 807cad4:	d0f9      	beq.n	807caca <HAL_UART_Receive+0x8a>
 807cad6:	227f      	movs	r2, #127	; 0x7f
 807cad8:	e7df      	b.n	807ca9a <HAL_UART_Receive+0x5a>
 807cada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 807cade:	d104      	bne.n	807caea <HAL_UART_Receive+0xaa>
 807cae0:	6922      	ldr	r2, [r4, #16]
 807cae2:	2a00      	cmp	r2, #0
 807cae4:	d0f7      	beq.n	807cad6 <HAL_UART_Receive+0x96>
 807cae6:	223f      	movs	r2, #63	; 0x3f
 807cae8:	e7d7      	b.n	807ca9a <HAL_UART_Receive+0x5a>
 807caea:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 807caee:	e7d6      	b.n	807ca9e <HAL_UART_Receive+0x5e>
      pdata16bits = NULL;
 807caf0:	2600      	movs	r6, #0
 807caf2:	e7dd      	b.n	807cab0 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 807caf4:	464b      	mov	r3, r9
 807caf6:	2200      	movs	r2, #0
 807caf8:	2120      	movs	r1, #32
 807cafa:	4620      	mov	r0, r4
 807cafc:	9700      	str	r7, [sp, #0]
 807cafe:	f7ff fef8 	bl	807c8f2 <UART_WaitOnFlagUntilTimeout>
 807cb02:	b9a0      	cbnz	r0, 807cb2e <HAL_UART_Receive+0xee>
      if (pdata8bits == NULL)
 807cb04:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 807cb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807cb08:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 807cb0c:	b945      	cbnz	r5, 807cb20 <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 807cb0e:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 807cb12:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 807cb16:	3a01      	subs	r2, #1
 807cb18:	b292      	uxth	r2, r2
 807cb1a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 807cb1e:	e7ca      	b.n	807cab6 <HAL_UART_Receive+0x76>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 807cb20:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 807cb24:	e7f5      	b.n	807cb12 <HAL_UART_Receive+0xd2>
      return  HAL_ERROR;
 807cb26:	2001      	movs	r0, #1
 807cb28:	e7cc      	b.n	807cac4 <HAL_UART_Receive+0x84>
    return HAL_BUSY;
 807cb2a:	2002      	movs	r0, #2
 807cb2c:	e7ca      	b.n	807cac4 <HAL_UART_Receive+0x84>
        return HAL_TIMEOUT;
 807cb2e:	2003      	movs	r0, #3
 807cb30:	e7c8      	b.n	807cac4 <HAL_UART_Receive+0x84>

0807cb32 <UART_CheckIdleState>:
{
 807cb32:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 807cb34:	2500      	movs	r5, #0
{
 807cb36:	4604      	mov	r4, r0
 807cb38:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 807cb3a:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 807cb3e:	f7ff f80d 	bl	807bb5c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 807cb42:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 807cb44:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 807cb46:	6812      	ldr	r2, [r2, #0]
 807cb48:	0711      	lsls	r1, r2, #28
 807cb4a:	d417      	bmi.n	807cb7c <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 807cb4c:	6822      	ldr	r2, [r4, #0]
 807cb4e:	6812      	ldr	r2, [r2, #0]
 807cb50:	0752      	lsls	r2, r2, #29
 807cb52:	d509      	bpl.n	807cb68 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 807cb54:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 807cb58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 807cb5c:	9200      	str	r2, [sp, #0]
 807cb5e:	4620      	mov	r0, r4
 807cb60:	2200      	movs	r2, #0
 807cb62:	f7ff fec6 	bl	807c8f2 <UART_WaitOnFlagUntilTimeout>
 807cb66:	b9b0      	cbnz	r0, 807cb96 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 807cb68:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 807cb6a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 807cb6c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 807cb70:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 807cb74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 807cb78:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 807cb7a:	e00d      	b.n	807cb98 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 807cb7c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 807cb80:	9003      	str	r0, [sp, #12]
 807cb82:	9200      	str	r2, [sp, #0]
 807cb84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 807cb88:	462a      	mov	r2, r5
 807cb8a:	4620      	mov	r0, r4
 807cb8c:	f7ff feb1 	bl	807c8f2 <UART_WaitOnFlagUntilTimeout>
 807cb90:	9b03      	ldr	r3, [sp, #12]
 807cb92:	2800      	cmp	r0, #0
 807cb94:	d0da      	beq.n	807cb4c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 807cb96:	2003      	movs	r0, #3
}
 807cb98:	b005      	add	sp, #20
 807cb9a:	bd30      	pop	{r4, r5, pc}

0807cb9c <HAL_UART_Init>:
{
 807cb9c:	b510      	push	{r4, lr}
  if (huart == NULL)
 807cb9e:	4604      	mov	r4, r0
 807cba0:	b350      	cbz	r0, 807cbf8 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 807cba2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 807cba6:	b91b      	cbnz	r3, 807cbb0 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 807cba8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 807cbac:	f7fe fcb4 	bl	807b518 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 807cbb0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 807cbb2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 807cbb4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 807cbb8:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 807cbba:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 807cbbc:	f023 0301 	bic.w	r3, r3, #1
 807cbc0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 807cbc2:	f7ff fcd9 	bl	807c578 <UART_SetConfig>
 807cbc6:	2801      	cmp	r0, #1
 807cbc8:	d016      	beq.n	807cbf8 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 807cbca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 807cbcc:	b113      	cbz	r3, 807cbd4 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 807cbce:	4620      	mov	r0, r4
 807cbd0:	f7ff fe3a 	bl	807c848 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 807cbd4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 807cbd6:	4620      	mov	r0, r4
}
 807cbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 807cbdc:	685a      	ldr	r2, [r3, #4]
 807cbde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 807cbe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 807cbe4:	689a      	ldr	r2, [r3, #8]
 807cbe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 807cbea:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 807cbec:	681a      	ldr	r2, [r3, #0]
 807cbee:	f042 0201 	orr.w	r2, r2, #1
 807cbf2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 807cbf4:	f7ff bf9d 	b.w	807cb32 <UART_CheckIdleState>
}
 807cbf8:	2001      	movs	r0, #1
 807cbfa:	bd10      	pop	{r4, pc}

0807cbfc <exit>:
 807cbfc:	b508      	push	{r3, lr}
 807cbfe:	4b07      	ldr	r3, [pc, #28]	; (807cc1c <exit+0x20>)
 807cc00:	4604      	mov	r4, r0
 807cc02:	b113      	cbz	r3, 807cc0a <exit+0xe>
 807cc04:	2100      	movs	r1, #0
 807cc06:	e000      	b.n	807cc0a <exit+0xe>
 807cc08:	bf00      	nop
 807cc0a:	4b05      	ldr	r3, [pc, #20]	; (807cc20 <exit+0x24>)
 807cc0c:	6818      	ldr	r0, [r3, #0]
 807cc0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 807cc10:	b103      	cbz	r3, 807cc14 <exit+0x18>
 807cc12:	4798      	blx	r3
 807cc14:	4620      	mov	r0, r4
 807cc16:	f001 fa9b 	bl	807e150 <_exit>
 807cc1a:	bf00      	nop
 807cc1c:	00000000 	.word	0x00000000
 807cc20:	0807e598 	.word	0x0807e598

0807cc24 <__libc_init_array>:
 807cc24:	b570      	push	{r4, r5, r6, lr}
 807cc26:	4d0d      	ldr	r5, [pc, #52]	; (807cc5c <__libc_init_array+0x38>)
 807cc28:	2600      	movs	r6, #0
 807cc2a:	4c0d      	ldr	r4, [pc, #52]	; (807cc60 <__libc_init_array+0x3c>)
 807cc2c:	1b64      	subs	r4, r4, r5
 807cc2e:	10a4      	asrs	r4, r4, #2
 807cc30:	42a6      	cmp	r6, r4
 807cc32:	d109      	bne.n	807cc48 <__libc_init_array+0x24>
 807cc34:	4d0b      	ldr	r5, [pc, #44]	; (807cc64 <__libc_init_array+0x40>)
 807cc36:	2600      	movs	r6, #0
 807cc38:	4c0b      	ldr	r4, [pc, #44]	; (807cc68 <__libc_init_array+0x44>)
 807cc3a:	f001 fa8b 	bl	807e154 <_init>
 807cc3e:	1b64      	subs	r4, r4, r5
 807cc40:	10a4      	asrs	r4, r4, #2
 807cc42:	42a6      	cmp	r6, r4
 807cc44:	d105      	bne.n	807cc52 <__libc_init_array+0x2e>
 807cc46:	bd70      	pop	{r4, r5, r6, pc}
 807cc48:	f855 3b04 	ldr.w	r3, [r5], #4
 807cc4c:	3601      	adds	r6, #1
 807cc4e:	4798      	blx	r3
 807cc50:	e7ee      	b.n	807cc30 <__libc_init_array+0xc>
 807cc52:	f855 3b04 	ldr.w	r3, [r5], #4
 807cc56:	3601      	adds	r6, #1
 807cc58:	4798      	blx	r3
 807cc5a:	e7f2      	b.n	807cc42 <__libc_init_array+0x1e>
 807cc5c:	200000a4 	.word	0x200000a4
 807cc60:	200000a4 	.word	0x200000a4
 807cc64:	200000a4 	.word	0x200000a4
 807cc68:	200000a8 	.word	0x200000a8

0807cc6c <memset>:
 807cc6c:	4402      	add	r2, r0
 807cc6e:	4603      	mov	r3, r0
 807cc70:	4293      	cmp	r3, r2
 807cc72:	d100      	bne.n	807cc76 <memset+0xa>
 807cc74:	4770      	bx	lr
 807cc76:	f803 1b01 	strb.w	r1, [r3], #1
 807cc7a:	e7f9      	b.n	807cc70 <memset+0x4>

0807cc7c <iprintf>:
 807cc7c:	b40f      	push	{r0, r1, r2, r3}
 807cc7e:	4b0a      	ldr	r3, [pc, #40]	; (807cca8 <iprintf+0x2c>)
 807cc80:	b513      	push	{r0, r1, r4, lr}
 807cc82:	681c      	ldr	r4, [r3, #0]
 807cc84:	b124      	cbz	r4, 807cc90 <iprintf+0x14>
 807cc86:	69a3      	ldr	r3, [r4, #24]
 807cc88:	b913      	cbnz	r3, 807cc90 <iprintf+0x14>
 807cc8a:	4620      	mov	r0, r4
 807cc8c:	f000 fb20 	bl	807d2d0 <__sinit>
 807cc90:	ab05      	add	r3, sp, #20
 807cc92:	9a04      	ldr	r2, [sp, #16]
 807cc94:	68a1      	ldr	r1, [r4, #8]
 807cc96:	4620      	mov	r0, r4
 807cc98:	9301      	str	r3, [sp, #4]
 807cc9a:	f000 fcf9 	bl	807d690 <_vfiprintf_r>
 807cc9e:	b002      	add	sp, #8
 807cca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 807cca4:	b004      	add	sp, #16
 807cca6:	4770      	bx	lr
 807cca8:	20000040 	.word	0x20000040

0807ccac <_puts_r>:
 807ccac:	b570      	push	{r4, r5, r6, lr}
 807ccae:	460e      	mov	r6, r1
 807ccb0:	4605      	mov	r5, r0
 807ccb2:	b118      	cbz	r0, 807ccbc <_puts_r+0x10>
 807ccb4:	6983      	ldr	r3, [r0, #24]
 807ccb6:	b90b      	cbnz	r3, 807ccbc <_puts_r+0x10>
 807ccb8:	f000 fb0a 	bl	807d2d0 <__sinit>
 807ccbc:	69ab      	ldr	r3, [r5, #24]
 807ccbe:	68ac      	ldr	r4, [r5, #8]
 807ccc0:	b913      	cbnz	r3, 807ccc8 <_puts_r+0x1c>
 807ccc2:	4628      	mov	r0, r5
 807ccc4:	f000 fb04 	bl	807d2d0 <__sinit>
 807ccc8:	4b2c      	ldr	r3, [pc, #176]	; (807cd7c <_puts_r+0xd0>)
 807ccca:	429c      	cmp	r4, r3
 807cccc:	d120      	bne.n	807cd10 <_puts_r+0x64>
 807ccce:	686c      	ldr	r4, [r5, #4]
 807ccd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 807ccd2:	07db      	lsls	r3, r3, #31
 807ccd4:	d405      	bmi.n	807cce2 <_puts_r+0x36>
 807ccd6:	89a3      	ldrh	r3, [r4, #12]
 807ccd8:	0598      	lsls	r0, r3, #22
 807ccda:	d402      	bmi.n	807cce2 <_puts_r+0x36>
 807ccdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 807ccde:	f000 fb95 	bl	807d40c <__retarget_lock_acquire_recursive>
 807cce2:	89a3      	ldrh	r3, [r4, #12]
 807cce4:	0719      	lsls	r1, r3, #28
 807cce6:	d51d      	bpl.n	807cd24 <_puts_r+0x78>
 807cce8:	6923      	ldr	r3, [r4, #16]
 807ccea:	b1db      	cbz	r3, 807cd24 <_puts_r+0x78>
 807ccec:	3e01      	subs	r6, #1
 807ccee:	68a3      	ldr	r3, [r4, #8]
 807ccf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 807ccf4:	3b01      	subs	r3, #1
 807ccf6:	60a3      	str	r3, [r4, #8]
 807ccf8:	bb39      	cbnz	r1, 807cd4a <_puts_r+0x9e>
 807ccfa:	2b00      	cmp	r3, #0
 807ccfc:	da38      	bge.n	807cd70 <_puts_r+0xc4>
 807ccfe:	4622      	mov	r2, r4
 807cd00:	210a      	movs	r1, #10
 807cd02:	4628      	mov	r0, r5
 807cd04:	f000 f90c 	bl	807cf20 <__swbuf_r>
 807cd08:	3001      	adds	r0, #1
 807cd0a:	d011      	beq.n	807cd30 <_puts_r+0x84>
 807cd0c:	250a      	movs	r5, #10
 807cd0e:	e011      	b.n	807cd34 <_puts_r+0x88>
 807cd10:	4b1b      	ldr	r3, [pc, #108]	; (807cd80 <_puts_r+0xd4>)
 807cd12:	429c      	cmp	r4, r3
 807cd14:	d101      	bne.n	807cd1a <_puts_r+0x6e>
 807cd16:	68ac      	ldr	r4, [r5, #8]
 807cd18:	e7da      	b.n	807ccd0 <_puts_r+0x24>
 807cd1a:	4b1a      	ldr	r3, [pc, #104]	; (807cd84 <_puts_r+0xd8>)
 807cd1c:	429c      	cmp	r4, r3
 807cd1e:	bf08      	it	eq
 807cd20:	68ec      	ldreq	r4, [r5, #12]
 807cd22:	e7d5      	b.n	807ccd0 <_puts_r+0x24>
 807cd24:	4621      	mov	r1, r4
 807cd26:	4628      	mov	r0, r5
 807cd28:	f000 f94c 	bl	807cfc4 <__swsetup_r>
 807cd2c:	2800      	cmp	r0, #0
 807cd2e:	d0dd      	beq.n	807ccec <_puts_r+0x40>
 807cd30:	f04f 35ff 	mov.w	r5, #4294967295
 807cd34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 807cd36:	07da      	lsls	r2, r3, #31
 807cd38:	d405      	bmi.n	807cd46 <_puts_r+0x9a>
 807cd3a:	89a3      	ldrh	r3, [r4, #12]
 807cd3c:	059b      	lsls	r3, r3, #22
 807cd3e:	d402      	bmi.n	807cd46 <_puts_r+0x9a>
 807cd40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 807cd42:	f000 fb64 	bl	807d40e <__retarget_lock_release_recursive>
 807cd46:	4628      	mov	r0, r5
 807cd48:	bd70      	pop	{r4, r5, r6, pc}
 807cd4a:	2b00      	cmp	r3, #0
 807cd4c:	da04      	bge.n	807cd58 <_puts_r+0xac>
 807cd4e:	69a2      	ldr	r2, [r4, #24]
 807cd50:	429a      	cmp	r2, r3
 807cd52:	dc06      	bgt.n	807cd62 <_puts_r+0xb6>
 807cd54:	290a      	cmp	r1, #10
 807cd56:	d004      	beq.n	807cd62 <_puts_r+0xb6>
 807cd58:	6823      	ldr	r3, [r4, #0]
 807cd5a:	1c5a      	adds	r2, r3, #1
 807cd5c:	6022      	str	r2, [r4, #0]
 807cd5e:	7019      	strb	r1, [r3, #0]
 807cd60:	e7c5      	b.n	807ccee <_puts_r+0x42>
 807cd62:	4622      	mov	r2, r4
 807cd64:	4628      	mov	r0, r5
 807cd66:	f000 f8db 	bl	807cf20 <__swbuf_r>
 807cd6a:	3001      	adds	r0, #1
 807cd6c:	d1bf      	bne.n	807ccee <_puts_r+0x42>
 807cd6e:	e7df      	b.n	807cd30 <_puts_r+0x84>
 807cd70:	6823      	ldr	r3, [r4, #0]
 807cd72:	250a      	movs	r5, #10
 807cd74:	1c5a      	adds	r2, r3, #1
 807cd76:	6022      	str	r2, [r4, #0]
 807cd78:	701d      	strb	r5, [r3, #0]
 807cd7a:	e7db      	b.n	807cd34 <_puts_r+0x88>
 807cd7c:	0807e5bc 	.word	0x0807e5bc
 807cd80:	0807e5dc 	.word	0x0807e5dc
 807cd84:	0807e59c 	.word	0x0807e59c

0807cd88 <puts>:
 807cd88:	4b02      	ldr	r3, [pc, #8]	; (807cd94 <puts+0xc>)
 807cd8a:	4601      	mov	r1, r0
 807cd8c:	6818      	ldr	r0, [r3, #0]
 807cd8e:	f7ff bf8d 	b.w	807ccac <_puts_r>
 807cd92:	bf00      	nop
 807cd94:	20000040 	.word	0x20000040

0807cd98 <setvbuf>:
 807cd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 807cd9c:	461d      	mov	r5, r3
 807cd9e:	4b5c      	ldr	r3, [pc, #368]	; (807cf10 <setvbuf+0x178>)
 807cda0:	4604      	mov	r4, r0
 807cda2:	460e      	mov	r6, r1
 807cda4:	681f      	ldr	r7, [r3, #0]
 807cda6:	4690      	mov	r8, r2
 807cda8:	b127      	cbz	r7, 807cdb4 <setvbuf+0x1c>
 807cdaa:	69bb      	ldr	r3, [r7, #24]
 807cdac:	b913      	cbnz	r3, 807cdb4 <setvbuf+0x1c>
 807cdae:	4638      	mov	r0, r7
 807cdb0:	f000 fa8e 	bl	807d2d0 <__sinit>
 807cdb4:	4b57      	ldr	r3, [pc, #348]	; (807cf14 <setvbuf+0x17c>)
 807cdb6:	429c      	cmp	r4, r3
 807cdb8:	d167      	bne.n	807ce8a <setvbuf+0xf2>
 807cdba:	687c      	ldr	r4, [r7, #4]
 807cdbc:	f1b8 0f02 	cmp.w	r8, #2
 807cdc0:	d006      	beq.n	807cdd0 <setvbuf+0x38>
 807cdc2:	f1b8 0f01 	cmp.w	r8, #1
 807cdc6:	f200 809e 	bhi.w	807cf06 <setvbuf+0x16e>
 807cdca:	2d00      	cmp	r5, #0
 807cdcc:	f2c0 809b 	blt.w	807cf06 <setvbuf+0x16e>
 807cdd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 807cdd2:	07db      	lsls	r3, r3, #31
 807cdd4:	d405      	bmi.n	807cde2 <setvbuf+0x4a>
 807cdd6:	89a3      	ldrh	r3, [r4, #12]
 807cdd8:	0598      	lsls	r0, r3, #22
 807cdda:	d402      	bmi.n	807cde2 <setvbuf+0x4a>
 807cddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 807cdde:	f000 fb15 	bl	807d40c <__retarget_lock_acquire_recursive>
 807cde2:	4621      	mov	r1, r4
 807cde4:	4638      	mov	r0, r7
 807cde6:	f000 f9df 	bl	807d1a8 <_fflush_r>
 807cdea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 807cdec:	b141      	cbz	r1, 807ce00 <setvbuf+0x68>
 807cdee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 807cdf2:	4299      	cmp	r1, r3
 807cdf4:	d002      	beq.n	807cdfc <setvbuf+0x64>
 807cdf6:	4638      	mov	r0, r7
 807cdf8:	f000 fb76 	bl	807d4e8 <_free_r>
 807cdfc:	2300      	movs	r3, #0
 807cdfe:	6363      	str	r3, [r4, #52]	; 0x34
 807ce00:	2300      	movs	r3, #0
 807ce02:	61a3      	str	r3, [r4, #24]
 807ce04:	6063      	str	r3, [r4, #4]
 807ce06:	89a3      	ldrh	r3, [r4, #12]
 807ce08:	0619      	lsls	r1, r3, #24
 807ce0a:	d503      	bpl.n	807ce14 <setvbuf+0x7c>
 807ce0c:	6921      	ldr	r1, [r4, #16]
 807ce0e:	4638      	mov	r0, r7
 807ce10:	f000 fb6a 	bl	807d4e8 <_free_r>
 807ce14:	89a3      	ldrh	r3, [r4, #12]
 807ce16:	f1b8 0f02 	cmp.w	r8, #2
 807ce1a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 807ce1e:	f023 0303 	bic.w	r3, r3, #3
 807ce22:	81a3      	strh	r3, [r4, #12]
 807ce24:	d06b      	beq.n	807cefe <setvbuf+0x166>
 807ce26:	ab01      	add	r3, sp, #4
 807ce28:	466a      	mov	r2, sp
 807ce2a:	4621      	mov	r1, r4
 807ce2c:	4638      	mov	r0, r7
 807ce2e:	f000 faef 	bl	807d410 <__swhatbuf_r>
 807ce32:	89a3      	ldrh	r3, [r4, #12]
 807ce34:	4318      	orrs	r0, r3
 807ce36:	81a0      	strh	r0, [r4, #12]
 807ce38:	2d00      	cmp	r5, #0
 807ce3a:	d130      	bne.n	807ce9e <setvbuf+0x106>
 807ce3c:	9d00      	ldr	r5, [sp, #0]
 807ce3e:	4628      	mov	r0, r5
 807ce40:	f000 fb4a 	bl	807d4d8 <malloc>
 807ce44:	4606      	mov	r6, r0
 807ce46:	2800      	cmp	r0, #0
 807ce48:	d154      	bne.n	807cef4 <setvbuf+0x15c>
 807ce4a:	f8dd 9000 	ldr.w	r9, [sp]
 807ce4e:	45a9      	cmp	r9, r5
 807ce50:	d149      	bne.n	807cee6 <setvbuf+0x14e>
 807ce52:	f04f 35ff 	mov.w	r5, #4294967295
 807ce56:	2200      	movs	r2, #0
 807ce58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 807ce5c:	60a2      	str	r2, [r4, #8]
 807ce5e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 807ce62:	f043 0302 	orr.w	r3, r3, #2
 807ce66:	6022      	str	r2, [r4, #0]
 807ce68:	6122      	str	r2, [r4, #16]
 807ce6a:	2201      	movs	r2, #1
 807ce6c:	81a3      	strh	r3, [r4, #12]
 807ce6e:	6162      	str	r2, [r4, #20]
 807ce70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 807ce72:	07d2      	lsls	r2, r2, #31
 807ce74:	d405      	bmi.n	807ce82 <setvbuf+0xea>
 807ce76:	f413 7f00 	tst.w	r3, #512	; 0x200
 807ce7a:	d102      	bne.n	807ce82 <setvbuf+0xea>
 807ce7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 807ce7e:	f000 fac6 	bl	807d40e <__retarget_lock_release_recursive>
 807ce82:	4628      	mov	r0, r5
 807ce84:	b003      	add	sp, #12
 807ce86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 807ce8a:	4b23      	ldr	r3, [pc, #140]	; (807cf18 <setvbuf+0x180>)
 807ce8c:	429c      	cmp	r4, r3
 807ce8e:	d101      	bne.n	807ce94 <setvbuf+0xfc>
 807ce90:	68bc      	ldr	r4, [r7, #8]
 807ce92:	e793      	b.n	807cdbc <setvbuf+0x24>
 807ce94:	4b21      	ldr	r3, [pc, #132]	; (807cf1c <setvbuf+0x184>)
 807ce96:	429c      	cmp	r4, r3
 807ce98:	bf08      	it	eq
 807ce9a:	68fc      	ldreq	r4, [r7, #12]
 807ce9c:	e78e      	b.n	807cdbc <setvbuf+0x24>
 807ce9e:	2e00      	cmp	r6, #0
 807cea0:	d0cd      	beq.n	807ce3e <setvbuf+0xa6>
 807cea2:	69bb      	ldr	r3, [r7, #24]
 807cea4:	b913      	cbnz	r3, 807ceac <setvbuf+0x114>
 807cea6:	4638      	mov	r0, r7
 807cea8:	f000 fa12 	bl	807d2d0 <__sinit>
 807ceac:	f1b8 0f01 	cmp.w	r8, #1
 807ceb0:	6026      	str	r6, [r4, #0]
 807ceb2:	bf02      	ittt	eq
 807ceb4:	89a3      	ldrheq	r3, [r4, #12]
 807ceb6:	f043 0301 	orreq.w	r3, r3, #1
 807ceba:	81a3      	strheq	r3, [r4, #12]
 807cebc:	89a2      	ldrh	r2, [r4, #12]
 807cebe:	f012 0308 	ands.w	r3, r2, #8
 807cec2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 807cec6:	d01c      	beq.n	807cf02 <setvbuf+0x16a>
 807cec8:	07d3      	lsls	r3, r2, #31
 807ceca:	bf45      	ittet	mi
 807cecc:	2300      	movmi	r3, #0
 807cece:	426d      	negmi	r5, r5
 807ced0:	60a5      	strpl	r5, [r4, #8]
 807ced2:	60a3      	strmi	r3, [r4, #8]
 807ced4:	bf48      	it	mi
 807ced6:	61a5      	strmi	r5, [r4, #24]
 807ced8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 807ceda:	f015 0501 	ands.w	r5, r5, #1
 807cede:	d115      	bne.n	807cf0c <setvbuf+0x174>
 807cee0:	f412 7f00 	tst.w	r2, #512	; 0x200
 807cee4:	e7c9      	b.n	807ce7a <setvbuf+0xe2>
 807cee6:	4648      	mov	r0, r9
 807cee8:	f000 faf6 	bl	807d4d8 <malloc>
 807ceec:	4606      	mov	r6, r0
 807ceee:	2800      	cmp	r0, #0
 807cef0:	d0af      	beq.n	807ce52 <setvbuf+0xba>
 807cef2:	464d      	mov	r5, r9
 807cef4:	89a3      	ldrh	r3, [r4, #12]
 807cef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 807cefa:	81a3      	strh	r3, [r4, #12]
 807cefc:	e7d1      	b.n	807cea2 <setvbuf+0x10a>
 807cefe:	2500      	movs	r5, #0
 807cf00:	e7a9      	b.n	807ce56 <setvbuf+0xbe>
 807cf02:	60a3      	str	r3, [r4, #8]
 807cf04:	e7e8      	b.n	807ced8 <setvbuf+0x140>
 807cf06:	f04f 35ff 	mov.w	r5, #4294967295
 807cf0a:	e7ba      	b.n	807ce82 <setvbuf+0xea>
 807cf0c:	2500      	movs	r5, #0
 807cf0e:	e7b8      	b.n	807ce82 <setvbuf+0xea>
 807cf10:	20000040 	.word	0x20000040
 807cf14:	0807e5bc 	.word	0x0807e5bc
 807cf18:	0807e5dc 	.word	0x0807e5dc
 807cf1c:	0807e59c 	.word	0x0807e59c

0807cf20 <__swbuf_r>:
 807cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807cf22:	460e      	mov	r6, r1
 807cf24:	4614      	mov	r4, r2
 807cf26:	4605      	mov	r5, r0
 807cf28:	b118      	cbz	r0, 807cf32 <__swbuf_r+0x12>
 807cf2a:	6983      	ldr	r3, [r0, #24]
 807cf2c:	b90b      	cbnz	r3, 807cf32 <__swbuf_r+0x12>
 807cf2e:	f000 f9cf 	bl	807d2d0 <__sinit>
 807cf32:	4b21      	ldr	r3, [pc, #132]	; (807cfb8 <__swbuf_r+0x98>)
 807cf34:	429c      	cmp	r4, r3
 807cf36:	d12b      	bne.n	807cf90 <__swbuf_r+0x70>
 807cf38:	686c      	ldr	r4, [r5, #4]
 807cf3a:	69a3      	ldr	r3, [r4, #24]
 807cf3c:	60a3      	str	r3, [r4, #8]
 807cf3e:	89a3      	ldrh	r3, [r4, #12]
 807cf40:	071a      	lsls	r2, r3, #28
 807cf42:	d52f      	bpl.n	807cfa4 <__swbuf_r+0x84>
 807cf44:	6923      	ldr	r3, [r4, #16]
 807cf46:	b36b      	cbz	r3, 807cfa4 <__swbuf_r+0x84>
 807cf48:	6923      	ldr	r3, [r4, #16]
 807cf4a:	b2f6      	uxtb	r6, r6
 807cf4c:	6820      	ldr	r0, [r4, #0]
 807cf4e:	4637      	mov	r7, r6
 807cf50:	1ac0      	subs	r0, r0, r3
 807cf52:	6963      	ldr	r3, [r4, #20]
 807cf54:	4283      	cmp	r3, r0
 807cf56:	dc04      	bgt.n	807cf62 <__swbuf_r+0x42>
 807cf58:	4621      	mov	r1, r4
 807cf5a:	4628      	mov	r0, r5
 807cf5c:	f000 f924 	bl	807d1a8 <_fflush_r>
 807cf60:	bb30      	cbnz	r0, 807cfb0 <__swbuf_r+0x90>
 807cf62:	68a3      	ldr	r3, [r4, #8]
 807cf64:	3001      	adds	r0, #1
 807cf66:	3b01      	subs	r3, #1
 807cf68:	60a3      	str	r3, [r4, #8]
 807cf6a:	6823      	ldr	r3, [r4, #0]
 807cf6c:	1c5a      	adds	r2, r3, #1
 807cf6e:	6022      	str	r2, [r4, #0]
 807cf70:	701e      	strb	r6, [r3, #0]
 807cf72:	6963      	ldr	r3, [r4, #20]
 807cf74:	4283      	cmp	r3, r0
 807cf76:	d004      	beq.n	807cf82 <__swbuf_r+0x62>
 807cf78:	89a3      	ldrh	r3, [r4, #12]
 807cf7a:	07db      	lsls	r3, r3, #31
 807cf7c:	d506      	bpl.n	807cf8c <__swbuf_r+0x6c>
 807cf7e:	2e0a      	cmp	r6, #10
 807cf80:	d104      	bne.n	807cf8c <__swbuf_r+0x6c>
 807cf82:	4621      	mov	r1, r4
 807cf84:	4628      	mov	r0, r5
 807cf86:	f000 f90f 	bl	807d1a8 <_fflush_r>
 807cf8a:	b988      	cbnz	r0, 807cfb0 <__swbuf_r+0x90>
 807cf8c:	4638      	mov	r0, r7
 807cf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 807cf90:	4b0a      	ldr	r3, [pc, #40]	; (807cfbc <__swbuf_r+0x9c>)
 807cf92:	429c      	cmp	r4, r3
 807cf94:	d101      	bne.n	807cf9a <__swbuf_r+0x7a>
 807cf96:	68ac      	ldr	r4, [r5, #8]
 807cf98:	e7cf      	b.n	807cf3a <__swbuf_r+0x1a>
 807cf9a:	4b09      	ldr	r3, [pc, #36]	; (807cfc0 <__swbuf_r+0xa0>)
 807cf9c:	429c      	cmp	r4, r3
 807cf9e:	bf08      	it	eq
 807cfa0:	68ec      	ldreq	r4, [r5, #12]
 807cfa2:	e7ca      	b.n	807cf3a <__swbuf_r+0x1a>
 807cfa4:	4621      	mov	r1, r4
 807cfa6:	4628      	mov	r0, r5
 807cfa8:	f000 f80c 	bl	807cfc4 <__swsetup_r>
 807cfac:	2800      	cmp	r0, #0
 807cfae:	d0cb      	beq.n	807cf48 <__swbuf_r+0x28>
 807cfb0:	f04f 37ff 	mov.w	r7, #4294967295
 807cfb4:	e7ea      	b.n	807cf8c <__swbuf_r+0x6c>
 807cfb6:	bf00      	nop
 807cfb8:	0807e5bc 	.word	0x0807e5bc
 807cfbc:	0807e5dc 	.word	0x0807e5dc
 807cfc0:	0807e59c 	.word	0x0807e59c

0807cfc4 <__swsetup_r>:
 807cfc4:	4b32      	ldr	r3, [pc, #200]	; (807d090 <__swsetup_r+0xcc>)
 807cfc6:	b570      	push	{r4, r5, r6, lr}
 807cfc8:	681d      	ldr	r5, [r3, #0]
 807cfca:	4606      	mov	r6, r0
 807cfcc:	460c      	mov	r4, r1
 807cfce:	b125      	cbz	r5, 807cfda <__swsetup_r+0x16>
 807cfd0:	69ab      	ldr	r3, [r5, #24]
 807cfd2:	b913      	cbnz	r3, 807cfda <__swsetup_r+0x16>
 807cfd4:	4628      	mov	r0, r5
 807cfd6:	f000 f97b 	bl	807d2d0 <__sinit>
 807cfda:	4b2e      	ldr	r3, [pc, #184]	; (807d094 <__swsetup_r+0xd0>)
 807cfdc:	429c      	cmp	r4, r3
 807cfde:	d10f      	bne.n	807d000 <__swsetup_r+0x3c>
 807cfe0:	686c      	ldr	r4, [r5, #4]
 807cfe2:	89a3      	ldrh	r3, [r4, #12]
 807cfe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 807cfe8:	0719      	lsls	r1, r3, #28
 807cfea:	d42c      	bmi.n	807d046 <__swsetup_r+0x82>
 807cfec:	06dd      	lsls	r5, r3, #27
 807cfee:	d411      	bmi.n	807d014 <__swsetup_r+0x50>
 807cff0:	2309      	movs	r3, #9
 807cff2:	6033      	str	r3, [r6, #0]
 807cff4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 807cff8:	f04f 30ff 	mov.w	r0, #4294967295
 807cffc:	81a3      	strh	r3, [r4, #12]
 807cffe:	e03e      	b.n	807d07e <__swsetup_r+0xba>
 807d000:	4b25      	ldr	r3, [pc, #148]	; (807d098 <__swsetup_r+0xd4>)
 807d002:	429c      	cmp	r4, r3
 807d004:	d101      	bne.n	807d00a <__swsetup_r+0x46>
 807d006:	68ac      	ldr	r4, [r5, #8]
 807d008:	e7eb      	b.n	807cfe2 <__swsetup_r+0x1e>
 807d00a:	4b24      	ldr	r3, [pc, #144]	; (807d09c <__swsetup_r+0xd8>)
 807d00c:	429c      	cmp	r4, r3
 807d00e:	bf08      	it	eq
 807d010:	68ec      	ldreq	r4, [r5, #12]
 807d012:	e7e6      	b.n	807cfe2 <__swsetup_r+0x1e>
 807d014:	0758      	lsls	r0, r3, #29
 807d016:	d512      	bpl.n	807d03e <__swsetup_r+0x7a>
 807d018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 807d01a:	b141      	cbz	r1, 807d02e <__swsetup_r+0x6a>
 807d01c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 807d020:	4299      	cmp	r1, r3
 807d022:	d002      	beq.n	807d02a <__swsetup_r+0x66>
 807d024:	4630      	mov	r0, r6
 807d026:	f000 fa5f 	bl	807d4e8 <_free_r>
 807d02a:	2300      	movs	r3, #0
 807d02c:	6363      	str	r3, [r4, #52]	; 0x34
 807d02e:	89a3      	ldrh	r3, [r4, #12]
 807d030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 807d034:	81a3      	strh	r3, [r4, #12]
 807d036:	2300      	movs	r3, #0
 807d038:	6063      	str	r3, [r4, #4]
 807d03a:	6923      	ldr	r3, [r4, #16]
 807d03c:	6023      	str	r3, [r4, #0]
 807d03e:	89a3      	ldrh	r3, [r4, #12]
 807d040:	f043 0308 	orr.w	r3, r3, #8
 807d044:	81a3      	strh	r3, [r4, #12]
 807d046:	6923      	ldr	r3, [r4, #16]
 807d048:	b94b      	cbnz	r3, 807d05e <__swsetup_r+0x9a>
 807d04a:	89a3      	ldrh	r3, [r4, #12]
 807d04c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 807d050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 807d054:	d003      	beq.n	807d05e <__swsetup_r+0x9a>
 807d056:	4621      	mov	r1, r4
 807d058:	4630      	mov	r0, r6
 807d05a:	f000 f9fd 	bl	807d458 <__smakebuf_r>
 807d05e:	89a0      	ldrh	r0, [r4, #12]
 807d060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 807d064:	f010 0301 	ands.w	r3, r0, #1
 807d068:	d00a      	beq.n	807d080 <__swsetup_r+0xbc>
 807d06a:	2300      	movs	r3, #0
 807d06c:	60a3      	str	r3, [r4, #8]
 807d06e:	6963      	ldr	r3, [r4, #20]
 807d070:	425b      	negs	r3, r3
 807d072:	61a3      	str	r3, [r4, #24]
 807d074:	6923      	ldr	r3, [r4, #16]
 807d076:	b943      	cbnz	r3, 807d08a <__swsetup_r+0xc6>
 807d078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 807d07c:	d1ba      	bne.n	807cff4 <__swsetup_r+0x30>
 807d07e:	bd70      	pop	{r4, r5, r6, pc}
 807d080:	0781      	lsls	r1, r0, #30
 807d082:	bf58      	it	pl
 807d084:	6963      	ldrpl	r3, [r4, #20]
 807d086:	60a3      	str	r3, [r4, #8]
 807d088:	e7f4      	b.n	807d074 <__swsetup_r+0xb0>
 807d08a:	2000      	movs	r0, #0
 807d08c:	e7f7      	b.n	807d07e <__swsetup_r+0xba>
 807d08e:	bf00      	nop
 807d090:	20000040 	.word	0x20000040
 807d094:	0807e5bc 	.word	0x0807e5bc
 807d098:	0807e5dc 	.word	0x0807e5dc
 807d09c:	0807e59c 	.word	0x0807e59c

0807d0a0 <__sflush_r>:
 807d0a0:	898a      	ldrh	r2, [r1, #12]
 807d0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 807d0a6:	4605      	mov	r5, r0
 807d0a8:	0710      	lsls	r0, r2, #28
 807d0aa:	460c      	mov	r4, r1
 807d0ac:	d458      	bmi.n	807d160 <__sflush_r+0xc0>
 807d0ae:	684b      	ldr	r3, [r1, #4]
 807d0b0:	2b00      	cmp	r3, #0
 807d0b2:	dc05      	bgt.n	807d0c0 <__sflush_r+0x20>
 807d0b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 807d0b6:	2b00      	cmp	r3, #0
 807d0b8:	dc02      	bgt.n	807d0c0 <__sflush_r+0x20>
 807d0ba:	2000      	movs	r0, #0
 807d0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 807d0c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 807d0c2:	2e00      	cmp	r6, #0
 807d0c4:	d0f9      	beq.n	807d0ba <__sflush_r+0x1a>
 807d0c6:	2300      	movs	r3, #0
 807d0c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 807d0cc:	682f      	ldr	r7, [r5, #0]
 807d0ce:	602b      	str	r3, [r5, #0]
 807d0d0:	d032      	beq.n	807d138 <__sflush_r+0x98>
 807d0d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 807d0d4:	89a3      	ldrh	r3, [r4, #12]
 807d0d6:	075a      	lsls	r2, r3, #29
 807d0d8:	d505      	bpl.n	807d0e6 <__sflush_r+0x46>
 807d0da:	6863      	ldr	r3, [r4, #4]
 807d0dc:	1ac0      	subs	r0, r0, r3
 807d0de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 807d0e0:	b10b      	cbz	r3, 807d0e6 <__sflush_r+0x46>
 807d0e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 807d0e4:	1ac0      	subs	r0, r0, r3
 807d0e6:	2300      	movs	r3, #0
 807d0e8:	4602      	mov	r2, r0
 807d0ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 807d0ec:	4628      	mov	r0, r5
 807d0ee:	6a21      	ldr	r1, [r4, #32]
 807d0f0:	47b0      	blx	r6
 807d0f2:	1c43      	adds	r3, r0, #1
 807d0f4:	89a3      	ldrh	r3, [r4, #12]
 807d0f6:	d106      	bne.n	807d106 <__sflush_r+0x66>
 807d0f8:	6829      	ldr	r1, [r5, #0]
 807d0fa:	291d      	cmp	r1, #29
 807d0fc:	d82c      	bhi.n	807d158 <__sflush_r+0xb8>
 807d0fe:	4a29      	ldr	r2, [pc, #164]	; (807d1a4 <__sflush_r+0x104>)
 807d100:	40ca      	lsrs	r2, r1
 807d102:	07d6      	lsls	r6, r2, #31
 807d104:	d528      	bpl.n	807d158 <__sflush_r+0xb8>
 807d106:	2200      	movs	r2, #0
 807d108:	04d9      	lsls	r1, r3, #19
 807d10a:	6062      	str	r2, [r4, #4]
 807d10c:	6922      	ldr	r2, [r4, #16]
 807d10e:	6022      	str	r2, [r4, #0]
 807d110:	d504      	bpl.n	807d11c <__sflush_r+0x7c>
 807d112:	1c42      	adds	r2, r0, #1
 807d114:	d101      	bne.n	807d11a <__sflush_r+0x7a>
 807d116:	682b      	ldr	r3, [r5, #0]
 807d118:	b903      	cbnz	r3, 807d11c <__sflush_r+0x7c>
 807d11a:	6560      	str	r0, [r4, #84]	; 0x54
 807d11c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 807d11e:	602f      	str	r7, [r5, #0]
 807d120:	2900      	cmp	r1, #0
 807d122:	d0ca      	beq.n	807d0ba <__sflush_r+0x1a>
 807d124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 807d128:	4299      	cmp	r1, r3
 807d12a:	d002      	beq.n	807d132 <__sflush_r+0x92>
 807d12c:	4628      	mov	r0, r5
 807d12e:	f000 f9db 	bl	807d4e8 <_free_r>
 807d132:	2000      	movs	r0, #0
 807d134:	6360      	str	r0, [r4, #52]	; 0x34
 807d136:	e7c1      	b.n	807d0bc <__sflush_r+0x1c>
 807d138:	6a21      	ldr	r1, [r4, #32]
 807d13a:	2301      	movs	r3, #1
 807d13c:	4628      	mov	r0, r5
 807d13e:	47b0      	blx	r6
 807d140:	1c41      	adds	r1, r0, #1
 807d142:	d1c7      	bne.n	807d0d4 <__sflush_r+0x34>
 807d144:	682b      	ldr	r3, [r5, #0]
 807d146:	2b00      	cmp	r3, #0
 807d148:	d0c4      	beq.n	807d0d4 <__sflush_r+0x34>
 807d14a:	2b1d      	cmp	r3, #29
 807d14c:	d001      	beq.n	807d152 <__sflush_r+0xb2>
 807d14e:	2b16      	cmp	r3, #22
 807d150:	d101      	bne.n	807d156 <__sflush_r+0xb6>
 807d152:	602f      	str	r7, [r5, #0]
 807d154:	e7b1      	b.n	807d0ba <__sflush_r+0x1a>
 807d156:	89a3      	ldrh	r3, [r4, #12]
 807d158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 807d15c:	81a3      	strh	r3, [r4, #12]
 807d15e:	e7ad      	b.n	807d0bc <__sflush_r+0x1c>
 807d160:	690f      	ldr	r7, [r1, #16]
 807d162:	2f00      	cmp	r7, #0
 807d164:	d0a9      	beq.n	807d0ba <__sflush_r+0x1a>
 807d166:	0793      	lsls	r3, r2, #30
 807d168:	680e      	ldr	r6, [r1, #0]
 807d16a:	600f      	str	r7, [r1, #0]
 807d16c:	bf0c      	ite	eq
 807d16e:	694b      	ldreq	r3, [r1, #20]
 807d170:	2300      	movne	r3, #0
 807d172:	eba6 0807 	sub.w	r8, r6, r7
 807d176:	608b      	str	r3, [r1, #8]
 807d178:	f1b8 0f00 	cmp.w	r8, #0
 807d17c:	dd9d      	ble.n	807d0ba <__sflush_r+0x1a>
 807d17e:	4643      	mov	r3, r8
 807d180:	463a      	mov	r2, r7
 807d182:	6a21      	ldr	r1, [r4, #32]
 807d184:	4628      	mov	r0, r5
 807d186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 807d188:	47b0      	blx	r6
 807d18a:	2800      	cmp	r0, #0
 807d18c:	dc06      	bgt.n	807d19c <__sflush_r+0xfc>
 807d18e:	89a3      	ldrh	r3, [r4, #12]
 807d190:	f04f 30ff 	mov.w	r0, #4294967295
 807d194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 807d198:	81a3      	strh	r3, [r4, #12]
 807d19a:	e78f      	b.n	807d0bc <__sflush_r+0x1c>
 807d19c:	4407      	add	r7, r0
 807d19e:	eba8 0800 	sub.w	r8, r8, r0
 807d1a2:	e7e9      	b.n	807d178 <__sflush_r+0xd8>
 807d1a4:	20400001 	.word	0x20400001

0807d1a8 <_fflush_r>:
 807d1a8:	b538      	push	{r3, r4, r5, lr}
 807d1aa:	690b      	ldr	r3, [r1, #16]
 807d1ac:	4605      	mov	r5, r0
 807d1ae:	460c      	mov	r4, r1
 807d1b0:	b913      	cbnz	r3, 807d1b8 <_fflush_r+0x10>
 807d1b2:	2500      	movs	r5, #0
 807d1b4:	4628      	mov	r0, r5
 807d1b6:	bd38      	pop	{r3, r4, r5, pc}
 807d1b8:	b118      	cbz	r0, 807d1c2 <_fflush_r+0x1a>
 807d1ba:	6983      	ldr	r3, [r0, #24]
 807d1bc:	b90b      	cbnz	r3, 807d1c2 <_fflush_r+0x1a>
 807d1be:	f000 f887 	bl	807d2d0 <__sinit>
 807d1c2:	4b14      	ldr	r3, [pc, #80]	; (807d214 <_fflush_r+0x6c>)
 807d1c4:	429c      	cmp	r4, r3
 807d1c6:	d11b      	bne.n	807d200 <_fflush_r+0x58>
 807d1c8:	686c      	ldr	r4, [r5, #4]
 807d1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 807d1ce:	2b00      	cmp	r3, #0
 807d1d0:	d0ef      	beq.n	807d1b2 <_fflush_r+0xa>
 807d1d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 807d1d4:	07d0      	lsls	r0, r2, #31
 807d1d6:	d404      	bmi.n	807d1e2 <_fflush_r+0x3a>
 807d1d8:	0599      	lsls	r1, r3, #22
 807d1da:	d402      	bmi.n	807d1e2 <_fflush_r+0x3a>
 807d1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 807d1de:	f000 f915 	bl	807d40c <__retarget_lock_acquire_recursive>
 807d1e2:	4628      	mov	r0, r5
 807d1e4:	4621      	mov	r1, r4
 807d1e6:	f7ff ff5b 	bl	807d0a0 <__sflush_r>
 807d1ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 807d1ec:	4605      	mov	r5, r0
 807d1ee:	07da      	lsls	r2, r3, #31
 807d1f0:	d4e0      	bmi.n	807d1b4 <_fflush_r+0xc>
 807d1f2:	89a3      	ldrh	r3, [r4, #12]
 807d1f4:	059b      	lsls	r3, r3, #22
 807d1f6:	d4dd      	bmi.n	807d1b4 <_fflush_r+0xc>
 807d1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 807d1fa:	f000 f908 	bl	807d40e <__retarget_lock_release_recursive>
 807d1fe:	e7d9      	b.n	807d1b4 <_fflush_r+0xc>
 807d200:	4b05      	ldr	r3, [pc, #20]	; (807d218 <_fflush_r+0x70>)
 807d202:	429c      	cmp	r4, r3
 807d204:	d101      	bne.n	807d20a <_fflush_r+0x62>
 807d206:	68ac      	ldr	r4, [r5, #8]
 807d208:	e7df      	b.n	807d1ca <_fflush_r+0x22>
 807d20a:	4b04      	ldr	r3, [pc, #16]	; (807d21c <_fflush_r+0x74>)
 807d20c:	429c      	cmp	r4, r3
 807d20e:	bf08      	it	eq
 807d210:	68ec      	ldreq	r4, [r5, #12]
 807d212:	e7da      	b.n	807d1ca <_fflush_r+0x22>
 807d214:	0807e5bc 	.word	0x0807e5bc
 807d218:	0807e5dc 	.word	0x0807e5dc
 807d21c:	0807e59c 	.word	0x0807e59c

0807d220 <std>:
 807d220:	2300      	movs	r3, #0
 807d222:	b510      	push	{r4, lr}
 807d224:	4604      	mov	r4, r0
 807d226:	6083      	str	r3, [r0, #8]
 807d228:	8181      	strh	r1, [r0, #12]
 807d22a:	4619      	mov	r1, r3
 807d22c:	6643      	str	r3, [r0, #100]	; 0x64
 807d22e:	81c2      	strh	r2, [r0, #14]
 807d230:	2208      	movs	r2, #8
 807d232:	6183      	str	r3, [r0, #24]
 807d234:	e9c0 3300 	strd	r3, r3, [r0]
 807d238:	e9c0 3304 	strd	r3, r3, [r0, #16]
 807d23c:	305c      	adds	r0, #92	; 0x5c
 807d23e:	f7ff fd15 	bl	807cc6c <memset>
 807d242:	4b05      	ldr	r3, [pc, #20]	; (807d258 <std+0x38>)
 807d244:	6224      	str	r4, [r4, #32]
 807d246:	6263      	str	r3, [r4, #36]	; 0x24
 807d248:	4b04      	ldr	r3, [pc, #16]	; (807d25c <std+0x3c>)
 807d24a:	62a3      	str	r3, [r4, #40]	; 0x28
 807d24c:	4b04      	ldr	r3, [pc, #16]	; (807d260 <std+0x40>)
 807d24e:	62e3      	str	r3, [r4, #44]	; 0x2c
 807d250:	4b04      	ldr	r3, [pc, #16]	; (807d264 <std+0x44>)
 807d252:	6323      	str	r3, [r4, #48]	; 0x30
 807d254:	bd10      	pop	{r4, pc}
 807d256:	bf00      	nop
 807d258:	0807dc3d 	.word	0x0807dc3d
 807d25c:	0807dc5f 	.word	0x0807dc5f
 807d260:	0807dc97 	.word	0x0807dc97
 807d264:	0807dcbb 	.word	0x0807dcbb

0807d268 <_cleanup_r>:
 807d268:	4901      	ldr	r1, [pc, #4]	; (807d270 <_cleanup_r+0x8>)
 807d26a:	f000 b8af 	b.w	807d3cc <_fwalk_reent>
 807d26e:	bf00      	nop
 807d270:	0807d1a9 	.word	0x0807d1a9

0807d274 <__sfmoreglue>:
 807d274:	b570      	push	{r4, r5, r6, lr}
 807d276:	1e4a      	subs	r2, r1, #1
 807d278:	2568      	movs	r5, #104	; 0x68
 807d27a:	460e      	mov	r6, r1
 807d27c:	4355      	muls	r5, r2
 807d27e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 807d282:	f000 f981 	bl	807d588 <_malloc_r>
 807d286:	4604      	mov	r4, r0
 807d288:	b140      	cbz	r0, 807d29c <__sfmoreglue+0x28>
 807d28a:	2100      	movs	r1, #0
 807d28c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 807d290:	e9c0 1600 	strd	r1, r6, [r0]
 807d294:	300c      	adds	r0, #12
 807d296:	60a0      	str	r0, [r4, #8]
 807d298:	f7ff fce8 	bl	807cc6c <memset>
 807d29c:	4620      	mov	r0, r4
 807d29e:	bd70      	pop	{r4, r5, r6, pc}

0807d2a0 <__sfp_lock_acquire>:
 807d2a0:	4801      	ldr	r0, [pc, #4]	; (807d2a8 <__sfp_lock_acquire+0x8>)
 807d2a2:	f000 b8b3 	b.w	807d40c <__retarget_lock_acquire_recursive>
 807d2a6:	bf00      	nop
 807d2a8:	200005fd 	.word	0x200005fd

0807d2ac <__sfp_lock_release>:
 807d2ac:	4801      	ldr	r0, [pc, #4]	; (807d2b4 <__sfp_lock_release+0x8>)
 807d2ae:	f000 b8ae 	b.w	807d40e <__retarget_lock_release_recursive>
 807d2b2:	bf00      	nop
 807d2b4:	200005fd 	.word	0x200005fd

0807d2b8 <__sinit_lock_acquire>:
 807d2b8:	4801      	ldr	r0, [pc, #4]	; (807d2c0 <__sinit_lock_acquire+0x8>)
 807d2ba:	f000 b8a7 	b.w	807d40c <__retarget_lock_acquire_recursive>
 807d2be:	bf00      	nop
 807d2c0:	200005f8 	.word	0x200005f8

0807d2c4 <__sinit_lock_release>:
 807d2c4:	4801      	ldr	r0, [pc, #4]	; (807d2cc <__sinit_lock_release+0x8>)
 807d2c6:	f000 b8a2 	b.w	807d40e <__retarget_lock_release_recursive>
 807d2ca:	bf00      	nop
 807d2cc:	200005f8 	.word	0x200005f8

0807d2d0 <__sinit>:
 807d2d0:	b510      	push	{r4, lr}
 807d2d2:	4604      	mov	r4, r0
 807d2d4:	f7ff fff0 	bl	807d2b8 <__sinit_lock_acquire>
 807d2d8:	69a3      	ldr	r3, [r4, #24]
 807d2da:	b11b      	cbz	r3, 807d2e4 <__sinit+0x14>
 807d2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 807d2e0:	f7ff bff0 	b.w	807d2c4 <__sinit_lock_release>
 807d2e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 807d2e8:	6523      	str	r3, [r4, #80]	; 0x50
 807d2ea:	4620      	mov	r0, r4
 807d2ec:	4b12      	ldr	r3, [pc, #72]	; (807d338 <__sinit+0x68>)
 807d2ee:	4a13      	ldr	r2, [pc, #76]	; (807d33c <__sinit+0x6c>)
 807d2f0:	681b      	ldr	r3, [r3, #0]
 807d2f2:	62a2      	str	r2, [r4, #40]	; 0x28
 807d2f4:	42a3      	cmp	r3, r4
 807d2f6:	bf04      	itt	eq
 807d2f8:	2301      	moveq	r3, #1
 807d2fa:	61a3      	streq	r3, [r4, #24]
 807d2fc:	f000 f820 	bl	807d340 <__sfp>
 807d300:	6060      	str	r0, [r4, #4]
 807d302:	4620      	mov	r0, r4
 807d304:	f000 f81c 	bl	807d340 <__sfp>
 807d308:	60a0      	str	r0, [r4, #8]
 807d30a:	4620      	mov	r0, r4
 807d30c:	f000 f818 	bl	807d340 <__sfp>
 807d310:	2200      	movs	r2, #0
 807d312:	2104      	movs	r1, #4
 807d314:	60e0      	str	r0, [r4, #12]
 807d316:	6860      	ldr	r0, [r4, #4]
 807d318:	f7ff ff82 	bl	807d220 <std>
 807d31c:	2201      	movs	r2, #1
 807d31e:	2109      	movs	r1, #9
 807d320:	68a0      	ldr	r0, [r4, #8]
 807d322:	f7ff ff7d 	bl	807d220 <std>
 807d326:	2202      	movs	r2, #2
 807d328:	2112      	movs	r1, #18
 807d32a:	68e0      	ldr	r0, [r4, #12]
 807d32c:	f7ff ff78 	bl	807d220 <std>
 807d330:	2301      	movs	r3, #1
 807d332:	61a3      	str	r3, [r4, #24]
 807d334:	e7d2      	b.n	807d2dc <__sinit+0xc>
 807d336:	bf00      	nop
 807d338:	0807e598 	.word	0x0807e598
 807d33c:	0807d269 	.word	0x0807d269

0807d340 <__sfp>:
 807d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807d342:	4607      	mov	r7, r0
 807d344:	f7ff ffac 	bl	807d2a0 <__sfp_lock_acquire>
 807d348:	4b1e      	ldr	r3, [pc, #120]	; (807d3c4 <__sfp+0x84>)
 807d34a:	681e      	ldr	r6, [r3, #0]
 807d34c:	69b3      	ldr	r3, [r6, #24]
 807d34e:	b913      	cbnz	r3, 807d356 <__sfp+0x16>
 807d350:	4630      	mov	r0, r6
 807d352:	f7ff ffbd 	bl	807d2d0 <__sinit>
 807d356:	3648      	adds	r6, #72	; 0x48
 807d358:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 807d35c:	3b01      	subs	r3, #1
 807d35e:	d503      	bpl.n	807d368 <__sfp+0x28>
 807d360:	6833      	ldr	r3, [r6, #0]
 807d362:	b30b      	cbz	r3, 807d3a8 <__sfp+0x68>
 807d364:	6836      	ldr	r6, [r6, #0]
 807d366:	e7f7      	b.n	807d358 <__sfp+0x18>
 807d368:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 807d36c:	b9d5      	cbnz	r5, 807d3a4 <__sfp+0x64>
 807d36e:	4b16      	ldr	r3, [pc, #88]	; (807d3c8 <__sfp+0x88>)
 807d370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 807d374:	6665      	str	r5, [r4, #100]	; 0x64
 807d376:	60e3      	str	r3, [r4, #12]
 807d378:	f000 f847 	bl	807d40a <__retarget_lock_init_recursive>
 807d37c:	f7ff ff96 	bl	807d2ac <__sfp_lock_release>
 807d380:	2208      	movs	r2, #8
 807d382:	4629      	mov	r1, r5
 807d384:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 807d388:	6025      	str	r5, [r4, #0]
 807d38a:	61a5      	str	r5, [r4, #24]
 807d38c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 807d390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 807d394:	f7ff fc6a 	bl	807cc6c <memset>
 807d398:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 807d39c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 807d3a0:	4620      	mov	r0, r4
 807d3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 807d3a4:	3468      	adds	r4, #104	; 0x68
 807d3a6:	e7d9      	b.n	807d35c <__sfp+0x1c>
 807d3a8:	2104      	movs	r1, #4
 807d3aa:	4638      	mov	r0, r7
 807d3ac:	f7ff ff62 	bl	807d274 <__sfmoreglue>
 807d3b0:	4604      	mov	r4, r0
 807d3b2:	6030      	str	r0, [r6, #0]
 807d3b4:	2800      	cmp	r0, #0
 807d3b6:	d1d5      	bne.n	807d364 <__sfp+0x24>
 807d3b8:	f7ff ff78 	bl	807d2ac <__sfp_lock_release>
 807d3bc:	230c      	movs	r3, #12
 807d3be:	603b      	str	r3, [r7, #0]
 807d3c0:	e7ee      	b.n	807d3a0 <__sfp+0x60>
 807d3c2:	bf00      	nop
 807d3c4:	0807e598 	.word	0x0807e598
 807d3c8:	ffff0001 	.word	0xffff0001

0807d3cc <_fwalk_reent>:
 807d3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 807d3d0:	4606      	mov	r6, r0
 807d3d2:	4688      	mov	r8, r1
 807d3d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 807d3d8:	2700      	movs	r7, #0
 807d3da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 807d3de:	f1b9 0901 	subs.w	r9, r9, #1
 807d3e2:	d505      	bpl.n	807d3f0 <_fwalk_reent+0x24>
 807d3e4:	6824      	ldr	r4, [r4, #0]
 807d3e6:	2c00      	cmp	r4, #0
 807d3e8:	d1f7      	bne.n	807d3da <_fwalk_reent+0xe>
 807d3ea:	4638      	mov	r0, r7
 807d3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 807d3f0:	89ab      	ldrh	r3, [r5, #12]
 807d3f2:	2b01      	cmp	r3, #1
 807d3f4:	d907      	bls.n	807d406 <_fwalk_reent+0x3a>
 807d3f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 807d3fa:	3301      	adds	r3, #1
 807d3fc:	d003      	beq.n	807d406 <_fwalk_reent+0x3a>
 807d3fe:	4629      	mov	r1, r5
 807d400:	4630      	mov	r0, r6
 807d402:	47c0      	blx	r8
 807d404:	4307      	orrs	r7, r0
 807d406:	3568      	adds	r5, #104	; 0x68
 807d408:	e7e9      	b.n	807d3de <_fwalk_reent+0x12>

0807d40a <__retarget_lock_init_recursive>:
 807d40a:	4770      	bx	lr

0807d40c <__retarget_lock_acquire_recursive>:
 807d40c:	4770      	bx	lr

0807d40e <__retarget_lock_release_recursive>:
 807d40e:	4770      	bx	lr

0807d410 <__swhatbuf_r>:
 807d410:	b570      	push	{r4, r5, r6, lr}
 807d412:	460e      	mov	r6, r1
 807d414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 807d418:	b096      	sub	sp, #88	; 0x58
 807d41a:	4614      	mov	r4, r2
 807d41c:	2900      	cmp	r1, #0
 807d41e:	461d      	mov	r5, r3
 807d420:	da07      	bge.n	807d432 <__swhatbuf_r+0x22>
 807d422:	2300      	movs	r3, #0
 807d424:	602b      	str	r3, [r5, #0]
 807d426:	89b3      	ldrh	r3, [r6, #12]
 807d428:	061a      	lsls	r2, r3, #24
 807d42a:	d410      	bmi.n	807d44e <__swhatbuf_r+0x3e>
 807d42c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 807d430:	e00e      	b.n	807d450 <__swhatbuf_r+0x40>
 807d432:	466a      	mov	r2, sp
 807d434:	f000 fc68 	bl	807dd08 <_fstat_r>
 807d438:	2800      	cmp	r0, #0
 807d43a:	dbf2      	blt.n	807d422 <__swhatbuf_r+0x12>
 807d43c:	9a01      	ldr	r2, [sp, #4]
 807d43e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 807d442:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 807d446:	425a      	negs	r2, r3
 807d448:	415a      	adcs	r2, r3
 807d44a:	602a      	str	r2, [r5, #0]
 807d44c:	e7ee      	b.n	807d42c <__swhatbuf_r+0x1c>
 807d44e:	2340      	movs	r3, #64	; 0x40
 807d450:	2000      	movs	r0, #0
 807d452:	6023      	str	r3, [r4, #0]
 807d454:	b016      	add	sp, #88	; 0x58
 807d456:	bd70      	pop	{r4, r5, r6, pc}

0807d458 <__smakebuf_r>:
 807d458:	898b      	ldrh	r3, [r1, #12]
 807d45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 807d45c:	079d      	lsls	r5, r3, #30
 807d45e:	4606      	mov	r6, r0
 807d460:	460c      	mov	r4, r1
 807d462:	d507      	bpl.n	807d474 <__smakebuf_r+0x1c>
 807d464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 807d468:	6023      	str	r3, [r4, #0]
 807d46a:	6123      	str	r3, [r4, #16]
 807d46c:	2301      	movs	r3, #1
 807d46e:	6163      	str	r3, [r4, #20]
 807d470:	b002      	add	sp, #8
 807d472:	bd70      	pop	{r4, r5, r6, pc}
 807d474:	ab01      	add	r3, sp, #4
 807d476:	466a      	mov	r2, sp
 807d478:	f7ff ffca 	bl	807d410 <__swhatbuf_r>
 807d47c:	9900      	ldr	r1, [sp, #0]
 807d47e:	4605      	mov	r5, r0
 807d480:	4630      	mov	r0, r6
 807d482:	f000 f881 	bl	807d588 <_malloc_r>
 807d486:	b948      	cbnz	r0, 807d49c <__smakebuf_r+0x44>
 807d488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 807d48c:	059a      	lsls	r2, r3, #22
 807d48e:	d4ef      	bmi.n	807d470 <__smakebuf_r+0x18>
 807d490:	f023 0303 	bic.w	r3, r3, #3
 807d494:	f043 0302 	orr.w	r3, r3, #2
 807d498:	81a3      	strh	r3, [r4, #12]
 807d49a:	e7e3      	b.n	807d464 <__smakebuf_r+0xc>
 807d49c:	4b0d      	ldr	r3, [pc, #52]	; (807d4d4 <__smakebuf_r+0x7c>)
 807d49e:	62b3      	str	r3, [r6, #40]	; 0x28
 807d4a0:	89a3      	ldrh	r3, [r4, #12]
 807d4a2:	6020      	str	r0, [r4, #0]
 807d4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 807d4a8:	6120      	str	r0, [r4, #16]
 807d4aa:	81a3      	strh	r3, [r4, #12]
 807d4ac:	9b00      	ldr	r3, [sp, #0]
 807d4ae:	6163      	str	r3, [r4, #20]
 807d4b0:	9b01      	ldr	r3, [sp, #4]
 807d4b2:	b15b      	cbz	r3, 807d4cc <__smakebuf_r+0x74>
 807d4b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 807d4b8:	4630      	mov	r0, r6
 807d4ba:	f000 fc37 	bl	807dd2c <_isatty_r>
 807d4be:	b128      	cbz	r0, 807d4cc <__smakebuf_r+0x74>
 807d4c0:	89a3      	ldrh	r3, [r4, #12]
 807d4c2:	f023 0303 	bic.w	r3, r3, #3
 807d4c6:	f043 0301 	orr.w	r3, r3, #1
 807d4ca:	81a3      	strh	r3, [r4, #12]
 807d4cc:	89a0      	ldrh	r0, [r4, #12]
 807d4ce:	4305      	orrs	r5, r0
 807d4d0:	81a5      	strh	r5, [r4, #12]
 807d4d2:	e7cd      	b.n	807d470 <__smakebuf_r+0x18>
 807d4d4:	0807d269 	.word	0x0807d269

0807d4d8 <malloc>:
 807d4d8:	4b02      	ldr	r3, [pc, #8]	; (807d4e4 <malloc+0xc>)
 807d4da:	4601      	mov	r1, r0
 807d4dc:	6818      	ldr	r0, [r3, #0]
 807d4de:	f000 b853 	b.w	807d588 <_malloc_r>
 807d4e2:	bf00      	nop
 807d4e4:	20000040 	.word	0x20000040

0807d4e8 <_free_r>:
 807d4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 807d4ea:	2900      	cmp	r1, #0
 807d4ec:	d047      	beq.n	807d57e <_free_r+0x96>
 807d4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 807d4f2:	1f0c      	subs	r4, r1, #4
 807d4f4:	9001      	str	r0, [sp, #4]
 807d4f6:	2b00      	cmp	r3, #0
 807d4f8:	bfb8      	it	lt
 807d4fa:	18e4      	addlt	r4, r4, r3
 807d4fc:	f000 fc46 	bl	807dd8c <__malloc_lock>
 807d500:	4a20      	ldr	r2, [pc, #128]	; (807d584 <_free_r+0x9c>)
 807d502:	9801      	ldr	r0, [sp, #4]
 807d504:	6813      	ldr	r3, [r2, #0]
 807d506:	4615      	mov	r5, r2
 807d508:	b933      	cbnz	r3, 807d518 <_free_r+0x30>
 807d50a:	6063      	str	r3, [r4, #4]
 807d50c:	6014      	str	r4, [r2, #0]
 807d50e:	b003      	add	sp, #12
 807d510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 807d514:	f000 bc40 	b.w	807dd98 <__malloc_unlock>
 807d518:	42a3      	cmp	r3, r4
 807d51a:	d90b      	bls.n	807d534 <_free_r+0x4c>
 807d51c:	6821      	ldr	r1, [r4, #0]
 807d51e:	1862      	adds	r2, r4, r1
 807d520:	4293      	cmp	r3, r2
 807d522:	bf02      	ittt	eq
 807d524:	681a      	ldreq	r2, [r3, #0]
 807d526:	685b      	ldreq	r3, [r3, #4]
 807d528:	1852      	addeq	r2, r2, r1
 807d52a:	6063      	str	r3, [r4, #4]
 807d52c:	bf08      	it	eq
 807d52e:	6022      	streq	r2, [r4, #0]
 807d530:	602c      	str	r4, [r5, #0]
 807d532:	e7ec      	b.n	807d50e <_free_r+0x26>
 807d534:	461a      	mov	r2, r3
 807d536:	685b      	ldr	r3, [r3, #4]
 807d538:	b10b      	cbz	r3, 807d53e <_free_r+0x56>
 807d53a:	42a3      	cmp	r3, r4
 807d53c:	d9fa      	bls.n	807d534 <_free_r+0x4c>
 807d53e:	6811      	ldr	r1, [r2, #0]
 807d540:	1855      	adds	r5, r2, r1
 807d542:	42a5      	cmp	r5, r4
 807d544:	d10b      	bne.n	807d55e <_free_r+0x76>
 807d546:	6824      	ldr	r4, [r4, #0]
 807d548:	4421      	add	r1, r4
 807d54a:	1854      	adds	r4, r2, r1
 807d54c:	6011      	str	r1, [r2, #0]
 807d54e:	42a3      	cmp	r3, r4
 807d550:	d1dd      	bne.n	807d50e <_free_r+0x26>
 807d552:	681c      	ldr	r4, [r3, #0]
 807d554:	685b      	ldr	r3, [r3, #4]
 807d556:	4421      	add	r1, r4
 807d558:	6053      	str	r3, [r2, #4]
 807d55a:	6011      	str	r1, [r2, #0]
 807d55c:	e7d7      	b.n	807d50e <_free_r+0x26>
 807d55e:	d902      	bls.n	807d566 <_free_r+0x7e>
 807d560:	230c      	movs	r3, #12
 807d562:	6003      	str	r3, [r0, #0]
 807d564:	e7d3      	b.n	807d50e <_free_r+0x26>
 807d566:	6825      	ldr	r5, [r4, #0]
 807d568:	1961      	adds	r1, r4, r5
 807d56a:	428b      	cmp	r3, r1
 807d56c:	bf02      	ittt	eq
 807d56e:	6819      	ldreq	r1, [r3, #0]
 807d570:	685b      	ldreq	r3, [r3, #4]
 807d572:	1949      	addeq	r1, r1, r5
 807d574:	6063      	str	r3, [r4, #4]
 807d576:	bf08      	it	eq
 807d578:	6021      	streq	r1, [r4, #0]
 807d57a:	6054      	str	r4, [r2, #4]
 807d57c:	e7c7      	b.n	807d50e <_free_r+0x26>
 807d57e:	b003      	add	sp, #12
 807d580:	bd30      	pop	{r4, r5, pc}
 807d582:	bf00      	nop
 807d584:	200005a8 	.word	0x200005a8

0807d588 <_malloc_r>:
 807d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807d58a:	1ccd      	adds	r5, r1, #3
 807d58c:	4606      	mov	r6, r0
 807d58e:	f025 0503 	bic.w	r5, r5, #3
 807d592:	3508      	adds	r5, #8
 807d594:	2d0c      	cmp	r5, #12
 807d596:	bf38      	it	cc
 807d598:	250c      	movcc	r5, #12
 807d59a:	2d00      	cmp	r5, #0
 807d59c:	db01      	blt.n	807d5a2 <_malloc_r+0x1a>
 807d59e:	42a9      	cmp	r1, r5
 807d5a0:	d903      	bls.n	807d5aa <_malloc_r+0x22>
 807d5a2:	230c      	movs	r3, #12
 807d5a4:	6033      	str	r3, [r6, #0]
 807d5a6:	2000      	movs	r0, #0
 807d5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 807d5aa:	f000 fbef 	bl	807dd8c <__malloc_lock>
 807d5ae:	4921      	ldr	r1, [pc, #132]	; (807d634 <_malloc_r+0xac>)
 807d5b0:	680a      	ldr	r2, [r1, #0]
 807d5b2:	4614      	mov	r4, r2
 807d5b4:	b99c      	cbnz	r4, 807d5de <_malloc_r+0x56>
 807d5b6:	4f20      	ldr	r7, [pc, #128]	; (807d638 <_malloc_r+0xb0>)
 807d5b8:	683b      	ldr	r3, [r7, #0]
 807d5ba:	b923      	cbnz	r3, 807d5c6 <_malloc_r+0x3e>
 807d5bc:	4621      	mov	r1, r4
 807d5be:	4630      	mov	r0, r6
 807d5c0:	f000 fb2c 	bl	807dc1c <_sbrk_r>
 807d5c4:	6038      	str	r0, [r7, #0]
 807d5c6:	4629      	mov	r1, r5
 807d5c8:	4630      	mov	r0, r6
 807d5ca:	f000 fb27 	bl	807dc1c <_sbrk_r>
 807d5ce:	1c43      	adds	r3, r0, #1
 807d5d0:	d123      	bne.n	807d61a <_malloc_r+0x92>
 807d5d2:	230c      	movs	r3, #12
 807d5d4:	4630      	mov	r0, r6
 807d5d6:	6033      	str	r3, [r6, #0]
 807d5d8:	f000 fbde 	bl	807dd98 <__malloc_unlock>
 807d5dc:	e7e3      	b.n	807d5a6 <_malloc_r+0x1e>
 807d5de:	6823      	ldr	r3, [r4, #0]
 807d5e0:	1b5b      	subs	r3, r3, r5
 807d5e2:	d417      	bmi.n	807d614 <_malloc_r+0x8c>
 807d5e4:	2b0b      	cmp	r3, #11
 807d5e6:	d903      	bls.n	807d5f0 <_malloc_r+0x68>
 807d5e8:	6023      	str	r3, [r4, #0]
 807d5ea:	441c      	add	r4, r3
 807d5ec:	6025      	str	r5, [r4, #0]
 807d5ee:	e004      	b.n	807d5fa <_malloc_r+0x72>
 807d5f0:	6863      	ldr	r3, [r4, #4]
 807d5f2:	42a2      	cmp	r2, r4
 807d5f4:	bf0c      	ite	eq
 807d5f6:	600b      	streq	r3, [r1, #0]
 807d5f8:	6053      	strne	r3, [r2, #4]
 807d5fa:	4630      	mov	r0, r6
 807d5fc:	f000 fbcc 	bl	807dd98 <__malloc_unlock>
 807d600:	f104 000b 	add.w	r0, r4, #11
 807d604:	1d23      	adds	r3, r4, #4
 807d606:	f020 0007 	bic.w	r0, r0, #7
 807d60a:	1ac2      	subs	r2, r0, r3
 807d60c:	d0cc      	beq.n	807d5a8 <_malloc_r+0x20>
 807d60e:	1a1b      	subs	r3, r3, r0
 807d610:	50a3      	str	r3, [r4, r2]
 807d612:	e7c9      	b.n	807d5a8 <_malloc_r+0x20>
 807d614:	4622      	mov	r2, r4
 807d616:	6864      	ldr	r4, [r4, #4]
 807d618:	e7cc      	b.n	807d5b4 <_malloc_r+0x2c>
 807d61a:	1cc4      	adds	r4, r0, #3
 807d61c:	f024 0403 	bic.w	r4, r4, #3
 807d620:	42a0      	cmp	r0, r4
 807d622:	d0e3      	beq.n	807d5ec <_malloc_r+0x64>
 807d624:	1a21      	subs	r1, r4, r0
 807d626:	4630      	mov	r0, r6
 807d628:	f000 faf8 	bl	807dc1c <_sbrk_r>
 807d62c:	3001      	adds	r0, #1
 807d62e:	d1dd      	bne.n	807d5ec <_malloc_r+0x64>
 807d630:	e7cf      	b.n	807d5d2 <_malloc_r+0x4a>
 807d632:	bf00      	nop
 807d634:	200005a8 	.word	0x200005a8
 807d638:	200005ac 	.word	0x200005ac

0807d63c <__sfputc_r>:
 807d63c:	6893      	ldr	r3, [r2, #8]
 807d63e:	3b01      	subs	r3, #1
 807d640:	2b00      	cmp	r3, #0
 807d642:	6093      	str	r3, [r2, #8]
 807d644:	b410      	push	{r4}
 807d646:	da08      	bge.n	807d65a <__sfputc_r+0x1e>
 807d648:	6994      	ldr	r4, [r2, #24]
 807d64a:	42a3      	cmp	r3, r4
 807d64c:	db01      	blt.n	807d652 <__sfputc_r+0x16>
 807d64e:	290a      	cmp	r1, #10
 807d650:	d103      	bne.n	807d65a <__sfputc_r+0x1e>
 807d652:	f85d 4b04 	ldr.w	r4, [sp], #4
 807d656:	f7ff bc63 	b.w	807cf20 <__swbuf_r>
 807d65a:	6813      	ldr	r3, [r2, #0]
 807d65c:	1c58      	adds	r0, r3, #1
 807d65e:	6010      	str	r0, [r2, #0]
 807d660:	4608      	mov	r0, r1
 807d662:	7019      	strb	r1, [r3, #0]
 807d664:	f85d 4b04 	ldr.w	r4, [sp], #4
 807d668:	4770      	bx	lr

0807d66a <__sfputs_r>:
 807d66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807d66c:	4606      	mov	r6, r0
 807d66e:	460f      	mov	r7, r1
 807d670:	4614      	mov	r4, r2
 807d672:	18d5      	adds	r5, r2, r3
 807d674:	42ac      	cmp	r4, r5
 807d676:	d101      	bne.n	807d67c <__sfputs_r+0x12>
 807d678:	2000      	movs	r0, #0
 807d67a:	e007      	b.n	807d68c <__sfputs_r+0x22>
 807d67c:	463a      	mov	r2, r7
 807d67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 807d682:	4630      	mov	r0, r6
 807d684:	f7ff ffda 	bl	807d63c <__sfputc_r>
 807d688:	1c43      	adds	r3, r0, #1
 807d68a:	d1f3      	bne.n	807d674 <__sfputs_r+0xa>
 807d68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0807d690 <_vfiprintf_r>:
 807d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 807d694:	460d      	mov	r5, r1
 807d696:	b09d      	sub	sp, #116	; 0x74
 807d698:	4614      	mov	r4, r2
 807d69a:	4698      	mov	r8, r3
 807d69c:	4606      	mov	r6, r0
 807d69e:	b118      	cbz	r0, 807d6a8 <_vfiprintf_r+0x18>
 807d6a0:	6983      	ldr	r3, [r0, #24]
 807d6a2:	b90b      	cbnz	r3, 807d6a8 <_vfiprintf_r+0x18>
 807d6a4:	f7ff fe14 	bl	807d2d0 <__sinit>
 807d6a8:	4b89      	ldr	r3, [pc, #548]	; (807d8d0 <_vfiprintf_r+0x240>)
 807d6aa:	429d      	cmp	r5, r3
 807d6ac:	d11b      	bne.n	807d6e6 <_vfiprintf_r+0x56>
 807d6ae:	6875      	ldr	r5, [r6, #4]
 807d6b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 807d6b2:	07d9      	lsls	r1, r3, #31
 807d6b4:	d405      	bmi.n	807d6c2 <_vfiprintf_r+0x32>
 807d6b6:	89ab      	ldrh	r3, [r5, #12]
 807d6b8:	059a      	lsls	r2, r3, #22
 807d6ba:	d402      	bmi.n	807d6c2 <_vfiprintf_r+0x32>
 807d6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 807d6be:	f7ff fea5 	bl	807d40c <__retarget_lock_acquire_recursive>
 807d6c2:	89ab      	ldrh	r3, [r5, #12]
 807d6c4:	071b      	lsls	r3, r3, #28
 807d6c6:	d501      	bpl.n	807d6cc <_vfiprintf_r+0x3c>
 807d6c8:	692b      	ldr	r3, [r5, #16]
 807d6ca:	b9eb      	cbnz	r3, 807d708 <_vfiprintf_r+0x78>
 807d6cc:	4629      	mov	r1, r5
 807d6ce:	4630      	mov	r0, r6
 807d6d0:	f7ff fc78 	bl	807cfc4 <__swsetup_r>
 807d6d4:	b1c0      	cbz	r0, 807d708 <_vfiprintf_r+0x78>
 807d6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 807d6d8:	07dc      	lsls	r4, r3, #31
 807d6da:	d50e      	bpl.n	807d6fa <_vfiprintf_r+0x6a>
 807d6dc:	f04f 30ff 	mov.w	r0, #4294967295
 807d6e0:	b01d      	add	sp, #116	; 0x74
 807d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 807d6e6:	4b7b      	ldr	r3, [pc, #492]	; (807d8d4 <_vfiprintf_r+0x244>)
 807d6e8:	429d      	cmp	r5, r3
 807d6ea:	d101      	bne.n	807d6f0 <_vfiprintf_r+0x60>
 807d6ec:	68b5      	ldr	r5, [r6, #8]
 807d6ee:	e7df      	b.n	807d6b0 <_vfiprintf_r+0x20>
 807d6f0:	4b79      	ldr	r3, [pc, #484]	; (807d8d8 <_vfiprintf_r+0x248>)
 807d6f2:	429d      	cmp	r5, r3
 807d6f4:	bf08      	it	eq
 807d6f6:	68f5      	ldreq	r5, [r6, #12]
 807d6f8:	e7da      	b.n	807d6b0 <_vfiprintf_r+0x20>
 807d6fa:	89ab      	ldrh	r3, [r5, #12]
 807d6fc:	0598      	lsls	r0, r3, #22
 807d6fe:	d4ed      	bmi.n	807d6dc <_vfiprintf_r+0x4c>
 807d700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 807d702:	f7ff fe84 	bl	807d40e <__retarget_lock_release_recursive>
 807d706:	e7e9      	b.n	807d6dc <_vfiprintf_r+0x4c>
 807d708:	2300      	movs	r3, #0
 807d70a:	f8cd 800c 	str.w	r8, [sp, #12]
 807d70e:	f04f 0901 	mov.w	r9, #1
 807d712:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 807d8dc <_vfiprintf_r+0x24c>
 807d716:	9309      	str	r3, [sp, #36]	; 0x24
 807d718:	2320      	movs	r3, #32
 807d71a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 807d71e:	2330      	movs	r3, #48	; 0x30
 807d720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 807d724:	4623      	mov	r3, r4
 807d726:	469a      	mov	sl, r3
 807d728:	f813 2b01 	ldrb.w	r2, [r3], #1
 807d72c:	b10a      	cbz	r2, 807d732 <_vfiprintf_r+0xa2>
 807d72e:	2a25      	cmp	r2, #37	; 0x25
 807d730:	d1f9      	bne.n	807d726 <_vfiprintf_r+0x96>
 807d732:	ebba 0b04 	subs.w	fp, sl, r4
 807d736:	d00b      	beq.n	807d750 <_vfiprintf_r+0xc0>
 807d738:	465b      	mov	r3, fp
 807d73a:	4622      	mov	r2, r4
 807d73c:	4629      	mov	r1, r5
 807d73e:	4630      	mov	r0, r6
 807d740:	f7ff ff93 	bl	807d66a <__sfputs_r>
 807d744:	3001      	adds	r0, #1
 807d746:	f000 80aa 	beq.w	807d89e <_vfiprintf_r+0x20e>
 807d74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 807d74c:	445a      	add	r2, fp
 807d74e:	9209      	str	r2, [sp, #36]	; 0x24
 807d750:	f89a 3000 	ldrb.w	r3, [sl]
 807d754:	2b00      	cmp	r3, #0
 807d756:	f000 80a2 	beq.w	807d89e <_vfiprintf_r+0x20e>
 807d75a:	2300      	movs	r3, #0
 807d75c:	f04f 32ff 	mov.w	r2, #4294967295
 807d760:	f10a 0a01 	add.w	sl, sl, #1
 807d764:	9304      	str	r3, [sp, #16]
 807d766:	9307      	str	r3, [sp, #28]
 807d768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 807d76c:	931a      	str	r3, [sp, #104]	; 0x68
 807d76e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 807d772:	4654      	mov	r4, sl
 807d774:	2205      	movs	r2, #5
 807d776:	4859      	ldr	r0, [pc, #356]	; (807d8dc <_vfiprintf_r+0x24c>)
 807d778:	f814 1b01 	ldrb.w	r1, [r4], #1
 807d77c:	f000 faf8 	bl	807dd70 <memchr>
 807d780:	9a04      	ldr	r2, [sp, #16]
 807d782:	b9d8      	cbnz	r0, 807d7bc <_vfiprintf_r+0x12c>
 807d784:	06d1      	lsls	r1, r2, #27
 807d786:	bf44      	itt	mi
 807d788:	2320      	movmi	r3, #32
 807d78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 807d78e:	0713      	lsls	r3, r2, #28
 807d790:	bf44      	itt	mi
 807d792:	232b      	movmi	r3, #43	; 0x2b
 807d794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 807d798:	f89a 3000 	ldrb.w	r3, [sl]
 807d79c:	2b2a      	cmp	r3, #42	; 0x2a
 807d79e:	d015      	beq.n	807d7cc <_vfiprintf_r+0x13c>
 807d7a0:	9a07      	ldr	r2, [sp, #28]
 807d7a2:	4654      	mov	r4, sl
 807d7a4:	2000      	movs	r0, #0
 807d7a6:	f04f 0c0a 	mov.w	ip, #10
 807d7aa:	4621      	mov	r1, r4
 807d7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 807d7b0:	3b30      	subs	r3, #48	; 0x30
 807d7b2:	2b09      	cmp	r3, #9
 807d7b4:	d94e      	bls.n	807d854 <_vfiprintf_r+0x1c4>
 807d7b6:	b1b0      	cbz	r0, 807d7e6 <_vfiprintf_r+0x156>
 807d7b8:	9207      	str	r2, [sp, #28]
 807d7ba:	e014      	b.n	807d7e6 <_vfiprintf_r+0x156>
 807d7bc:	eba0 0308 	sub.w	r3, r0, r8
 807d7c0:	46a2      	mov	sl, r4
 807d7c2:	fa09 f303 	lsl.w	r3, r9, r3
 807d7c6:	4313      	orrs	r3, r2
 807d7c8:	9304      	str	r3, [sp, #16]
 807d7ca:	e7d2      	b.n	807d772 <_vfiprintf_r+0xe2>
 807d7cc:	9b03      	ldr	r3, [sp, #12]
 807d7ce:	1d19      	adds	r1, r3, #4
 807d7d0:	681b      	ldr	r3, [r3, #0]
 807d7d2:	2b00      	cmp	r3, #0
 807d7d4:	9103      	str	r1, [sp, #12]
 807d7d6:	bfbb      	ittet	lt
 807d7d8:	425b      	neglt	r3, r3
 807d7da:	f042 0202 	orrlt.w	r2, r2, #2
 807d7de:	9307      	strge	r3, [sp, #28]
 807d7e0:	9307      	strlt	r3, [sp, #28]
 807d7e2:	bfb8      	it	lt
 807d7e4:	9204      	strlt	r2, [sp, #16]
 807d7e6:	7823      	ldrb	r3, [r4, #0]
 807d7e8:	2b2e      	cmp	r3, #46	; 0x2e
 807d7ea:	d10c      	bne.n	807d806 <_vfiprintf_r+0x176>
 807d7ec:	7863      	ldrb	r3, [r4, #1]
 807d7ee:	2b2a      	cmp	r3, #42	; 0x2a
 807d7f0:	d135      	bne.n	807d85e <_vfiprintf_r+0x1ce>
 807d7f2:	9b03      	ldr	r3, [sp, #12]
 807d7f4:	3402      	adds	r4, #2
 807d7f6:	1d1a      	adds	r2, r3, #4
 807d7f8:	681b      	ldr	r3, [r3, #0]
 807d7fa:	2b00      	cmp	r3, #0
 807d7fc:	9203      	str	r2, [sp, #12]
 807d7fe:	bfb8      	it	lt
 807d800:	f04f 33ff 	movlt.w	r3, #4294967295
 807d804:	9305      	str	r3, [sp, #20]
 807d806:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 807d8ec <_vfiprintf_r+0x25c>
 807d80a:	2203      	movs	r2, #3
 807d80c:	7821      	ldrb	r1, [r4, #0]
 807d80e:	4650      	mov	r0, sl
 807d810:	f000 faae 	bl	807dd70 <memchr>
 807d814:	b140      	cbz	r0, 807d828 <_vfiprintf_r+0x198>
 807d816:	2340      	movs	r3, #64	; 0x40
 807d818:	eba0 000a 	sub.w	r0, r0, sl
 807d81c:	3401      	adds	r4, #1
 807d81e:	fa03 f000 	lsl.w	r0, r3, r0
 807d822:	9b04      	ldr	r3, [sp, #16]
 807d824:	4303      	orrs	r3, r0
 807d826:	9304      	str	r3, [sp, #16]
 807d828:	f814 1b01 	ldrb.w	r1, [r4], #1
 807d82c:	2206      	movs	r2, #6
 807d82e:	482c      	ldr	r0, [pc, #176]	; (807d8e0 <_vfiprintf_r+0x250>)
 807d830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 807d834:	f000 fa9c 	bl	807dd70 <memchr>
 807d838:	2800      	cmp	r0, #0
 807d83a:	d03f      	beq.n	807d8bc <_vfiprintf_r+0x22c>
 807d83c:	4b29      	ldr	r3, [pc, #164]	; (807d8e4 <_vfiprintf_r+0x254>)
 807d83e:	bb1b      	cbnz	r3, 807d888 <_vfiprintf_r+0x1f8>
 807d840:	9b03      	ldr	r3, [sp, #12]
 807d842:	3307      	adds	r3, #7
 807d844:	f023 0307 	bic.w	r3, r3, #7
 807d848:	3308      	adds	r3, #8
 807d84a:	9303      	str	r3, [sp, #12]
 807d84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 807d84e:	443b      	add	r3, r7
 807d850:	9309      	str	r3, [sp, #36]	; 0x24
 807d852:	e767      	b.n	807d724 <_vfiprintf_r+0x94>
 807d854:	fb0c 3202 	mla	r2, ip, r2, r3
 807d858:	460c      	mov	r4, r1
 807d85a:	2001      	movs	r0, #1
 807d85c:	e7a5      	b.n	807d7aa <_vfiprintf_r+0x11a>
 807d85e:	2300      	movs	r3, #0
 807d860:	3401      	adds	r4, #1
 807d862:	f04f 0c0a 	mov.w	ip, #10
 807d866:	4619      	mov	r1, r3
 807d868:	9305      	str	r3, [sp, #20]
 807d86a:	4620      	mov	r0, r4
 807d86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 807d870:	3a30      	subs	r2, #48	; 0x30
 807d872:	2a09      	cmp	r2, #9
 807d874:	d903      	bls.n	807d87e <_vfiprintf_r+0x1ee>
 807d876:	2b00      	cmp	r3, #0
 807d878:	d0c5      	beq.n	807d806 <_vfiprintf_r+0x176>
 807d87a:	9105      	str	r1, [sp, #20]
 807d87c:	e7c3      	b.n	807d806 <_vfiprintf_r+0x176>
 807d87e:	fb0c 2101 	mla	r1, ip, r1, r2
 807d882:	4604      	mov	r4, r0
 807d884:	2301      	movs	r3, #1
 807d886:	e7f0      	b.n	807d86a <_vfiprintf_r+0x1da>
 807d888:	ab03      	add	r3, sp, #12
 807d88a:	462a      	mov	r2, r5
 807d88c:	a904      	add	r1, sp, #16
 807d88e:	4630      	mov	r0, r6
 807d890:	9300      	str	r3, [sp, #0]
 807d892:	4b15      	ldr	r3, [pc, #84]	; (807d8e8 <_vfiprintf_r+0x258>)
 807d894:	e000      	b.n	807d898 <_vfiprintf_r+0x208>
 807d896:	bf00      	nop
 807d898:	4607      	mov	r7, r0
 807d89a:	1c78      	adds	r0, r7, #1
 807d89c:	d1d6      	bne.n	807d84c <_vfiprintf_r+0x1bc>
 807d89e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 807d8a0:	07d9      	lsls	r1, r3, #31
 807d8a2:	d405      	bmi.n	807d8b0 <_vfiprintf_r+0x220>
 807d8a4:	89ab      	ldrh	r3, [r5, #12]
 807d8a6:	059a      	lsls	r2, r3, #22
 807d8a8:	d402      	bmi.n	807d8b0 <_vfiprintf_r+0x220>
 807d8aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 807d8ac:	f7ff fdaf 	bl	807d40e <__retarget_lock_release_recursive>
 807d8b0:	89ab      	ldrh	r3, [r5, #12]
 807d8b2:	065b      	lsls	r3, r3, #25
 807d8b4:	f53f af12 	bmi.w	807d6dc <_vfiprintf_r+0x4c>
 807d8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 807d8ba:	e711      	b.n	807d6e0 <_vfiprintf_r+0x50>
 807d8bc:	ab03      	add	r3, sp, #12
 807d8be:	462a      	mov	r2, r5
 807d8c0:	a904      	add	r1, sp, #16
 807d8c2:	4630      	mov	r0, r6
 807d8c4:	9300      	str	r3, [sp, #0]
 807d8c6:	4b08      	ldr	r3, [pc, #32]	; (807d8e8 <_vfiprintf_r+0x258>)
 807d8c8:	f000 f882 	bl	807d9d0 <_printf_i>
 807d8cc:	e7e4      	b.n	807d898 <_vfiprintf_r+0x208>
 807d8ce:	bf00      	nop
 807d8d0:	0807e5bc 	.word	0x0807e5bc
 807d8d4:	0807e5dc 	.word	0x0807e5dc
 807d8d8:	0807e59c 	.word	0x0807e59c
 807d8dc:	0807e5fc 	.word	0x0807e5fc
 807d8e0:	0807e606 	.word	0x0807e606
 807d8e4:	00000000 	.word	0x00000000
 807d8e8:	0807d66b 	.word	0x0807d66b
 807d8ec:	0807e602 	.word	0x0807e602

0807d8f0 <_printf_common>:
 807d8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 807d8f4:	4616      	mov	r6, r2
 807d8f6:	4699      	mov	r9, r3
 807d8f8:	688a      	ldr	r2, [r1, #8]
 807d8fa:	4607      	mov	r7, r0
 807d8fc:	690b      	ldr	r3, [r1, #16]
 807d8fe:	460c      	mov	r4, r1
 807d900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 807d904:	4293      	cmp	r3, r2
 807d906:	bfb8      	it	lt
 807d908:	4613      	movlt	r3, r2
 807d90a:	6033      	str	r3, [r6, #0]
 807d90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 807d910:	b10a      	cbz	r2, 807d916 <_printf_common+0x26>
 807d912:	3301      	adds	r3, #1
 807d914:	6033      	str	r3, [r6, #0]
 807d916:	6823      	ldr	r3, [r4, #0]
 807d918:	0699      	lsls	r1, r3, #26
 807d91a:	bf42      	ittt	mi
 807d91c:	6833      	ldrmi	r3, [r6, #0]
 807d91e:	3302      	addmi	r3, #2
 807d920:	6033      	strmi	r3, [r6, #0]
 807d922:	6825      	ldr	r5, [r4, #0]
 807d924:	f015 0506 	ands.w	r5, r5, #6
 807d928:	d106      	bne.n	807d938 <_printf_common+0x48>
 807d92a:	f104 0a19 	add.w	sl, r4, #25
 807d92e:	68e3      	ldr	r3, [r4, #12]
 807d930:	6832      	ldr	r2, [r6, #0]
 807d932:	1a9b      	subs	r3, r3, r2
 807d934:	42ab      	cmp	r3, r5
 807d936:	dc29      	bgt.n	807d98c <_printf_common+0x9c>
 807d938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 807d93c:	1e13      	subs	r3, r2, #0
 807d93e:	6822      	ldr	r2, [r4, #0]
 807d940:	bf18      	it	ne
 807d942:	2301      	movne	r3, #1
 807d944:	0692      	lsls	r2, r2, #26
 807d946:	d42e      	bmi.n	807d9a6 <_printf_common+0xb6>
 807d948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 807d94c:	4649      	mov	r1, r9
 807d94e:	4638      	mov	r0, r7
 807d950:	47c0      	blx	r8
 807d952:	3001      	adds	r0, #1
 807d954:	d021      	beq.n	807d99a <_printf_common+0xaa>
 807d956:	6823      	ldr	r3, [r4, #0]
 807d958:	341a      	adds	r4, #26
 807d95a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 807d95e:	f003 0306 	and.w	r3, r3, #6
 807d962:	6832      	ldr	r2, [r6, #0]
 807d964:	2600      	movs	r6, #0
 807d966:	2b04      	cmp	r3, #4
 807d968:	f854 3c12 	ldr.w	r3, [r4, #-18]
 807d96c:	bf08      	it	eq
 807d96e:	1aad      	subeq	r5, r5, r2
 807d970:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 807d974:	bf14      	ite	ne
 807d976:	2500      	movne	r5, #0
 807d978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 807d97c:	4293      	cmp	r3, r2
 807d97e:	bfc4      	itt	gt
 807d980:	1a9b      	subgt	r3, r3, r2
 807d982:	18ed      	addgt	r5, r5, r3
 807d984:	42b5      	cmp	r5, r6
 807d986:	d11a      	bne.n	807d9be <_printf_common+0xce>
 807d988:	2000      	movs	r0, #0
 807d98a:	e008      	b.n	807d99e <_printf_common+0xae>
 807d98c:	2301      	movs	r3, #1
 807d98e:	4652      	mov	r2, sl
 807d990:	4649      	mov	r1, r9
 807d992:	4638      	mov	r0, r7
 807d994:	47c0      	blx	r8
 807d996:	3001      	adds	r0, #1
 807d998:	d103      	bne.n	807d9a2 <_printf_common+0xb2>
 807d99a:	f04f 30ff 	mov.w	r0, #4294967295
 807d99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807d9a2:	3501      	adds	r5, #1
 807d9a4:	e7c3      	b.n	807d92e <_printf_common+0x3e>
 807d9a6:	18e1      	adds	r1, r4, r3
 807d9a8:	1c5a      	adds	r2, r3, #1
 807d9aa:	2030      	movs	r0, #48	; 0x30
 807d9ac:	3302      	adds	r3, #2
 807d9ae:	4422      	add	r2, r4
 807d9b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 807d9b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 807d9b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 807d9bc:	e7c4      	b.n	807d948 <_printf_common+0x58>
 807d9be:	2301      	movs	r3, #1
 807d9c0:	4622      	mov	r2, r4
 807d9c2:	4649      	mov	r1, r9
 807d9c4:	4638      	mov	r0, r7
 807d9c6:	47c0      	blx	r8
 807d9c8:	3001      	adds	r0, #1
 807d9ca:	d0e6      	beq.n	807d99a <_printf_common+0xaa>
 807d9cc:	3601      	adds	r6, #1
 807d9ce:	e7d9      	b.n	807d984 <_printf_common+0x94>

0807d9d0 <_printf_i>:
 807d9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 807d9d4:	460c      	mov	r4, r1
 807d9d6:	4691      	mov	r9, r2
 807d9d8:	4680      	mov	r8, r0
 807d9da:	469a      	mov	sl, r3
 807d9dc:	7e27      	ldrb	r7, [r4, #24]
 807d9de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 807d9e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 807d9e4:	2f78      	cmp	r7, #120	; 0x78
 807d9e6:	d807      	bhi.n	807d9f8 <_printf_i+0x28>
 807d9e8:	2f62      	cmp	r7, #98	; 0x62
 807d9ea:	d80a      	bhi.n	807da02 <_printf_i+0x32>
 807d9ec:	2f00      	cmp	r7, #0
 807d9ee:	f000 80d8 	beq.w	807dba2 <_printf_i+0x1d2>
 807d9f2:	2f58      	cmp	r7, #88	; 0x58
 807d9f4:	f000 80a3 	beq.w	807db3e <_printf_i+0x16e>
 807d9f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 807d9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 807da00:	e03a      	b.n	807da78 <_printf_i+0xa8>
 807da02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 807da06:	2b15      	cmp	r3, #21
 807da08:	d8f6      	bhi.n	807d9f8 <_printf_i+0x28>
 807da0a:	a001      	add	r0, pc, #4	; (adr r0, 807da10 <_printf_i+0x40>)
 807da0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 807da10:	0807da69 	.word	0x0807da69
 807da14:	0807da7d 	.word	0x0807da7d
 807da18:	0807d9f9 	.word	0x0807d9f9
 807da1c:	0807d9f9 	.word	0x0807d9f9
 807da20:	0807d9f9 	.word	0x0807d9f9
 807da24:	0807d9f9 	.word	0x0807d9f9
 807da28:	0807da7d 	.word	0x0807da7d
 807da2c:	0807d9f9 	.word	0x0807d9f9
 807da30:	0807d9f9 	.word	0x0807d9f9
 807da34:	0807d9f9 	.word	0x0807d9f9
 807da38:	0807d9f9 	.word	0x0807d9f9
 807da3c:	0807db89 	.word	0x0807db89
 807da40:	0807daad 	.word	0x0807daad
 807da44:	0807db6b 	.word	0x0807db6b
 807da48:	0807d9f9 	.word	0x0807d9f9
 807da4c:	0807d9f9 	.word	0x0807d9f9
 807da50:	0807dbab 	.word	0x0807dbab
 807da54:	0807d9f9 	.word	0x0807d9f9
 807da58:	0807daad 	.word	0x0807daad
 807da5c:	0807d9f9 	.word	0x0807d9f9
 807da60:	0807d9f9 	.word	0x0807d9f9
 807da64:	0807db73 	.word	0x0807db73
 807da68:	680b      	ldr	r3, [r1, #0]
 807da6a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 807da6e:	1d1a      	adds	r2, r3, #4
 807da70:	681b      	ldr	r3, [r3, #0]
 807da72:	600a      	str	r2, [r1, #0]
 807da74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 807da78:	2301      	movs	r3, #1
 807da7a:	e0a3      	b.n	807dbc4 <_printf_i+0x1f4>
 807da7c:	6825      	ldr	r5, [r4, #0]
 807da7e:	6808      	ldr	r0, [r1, #0]
 807da80:	062e      	lsls	r6, r5, #24
 807da82:	f100 0304 	add.w	r3, r0, #4
 807da86:	d50a      	bpl.n	807da9e <_printf_i+0xce>
 807da88:	6805      	ldr	r5, [r0, #0]
 807da8a:	600b      	str	r3, [r1, #0]
 807da8c:	2d00      	cmp	r5, #0
 807da8e:	da03      	bge.n	807da98 <_printf_i+0xc8>
 807da90:	232d      	movs	r3, #45	; 0x2d
 807da92:	426d      	negs	r5, r5
 807da94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 807da98:	485e      	ldr	r0, [pc, #376]	; (807dc14 <_printf_i+0x244>)
 807da9a:	230a      	movs	r3, #10
 807da9c:	e019      	b.n	807dad2 <_printf_i+0x102>
 807da9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 807daa2:	6805      	ldr	r5, [r0, #0]
 807daa4:	600b      	str	r3, [r1, #0]
 807daa6:	bf18      	it	ne
 807daa8:	b22d      	sxthne	r5, r5
 807daaa:	e7ef      	b.n	807da8c <_printf_i+0xbc>
 807daac:	680b      	ldr	r3, [r1, #0]
 807daae:	6825      	ldr	r5, [r4, #0]
 807dab0:	1d18      	adds	r0, r3, #4
 807dab2:	6008      	str	r0, [r1, #0]
 807dab4:	0628      	lsls	r0, r5, #24
 807dab6:	d501      	bpl.n	807dabc <_printf_i+0xec>
 807dab8:	681d      	ldr	r5, [r3, #0]
 807daba:	e002      	b.n	807dac2 <_printf_i+0xf2>
 807dabc:	0669      	lsls	r1, r5, #25
 807dabe:	d5fb      	bpl.n	807dab8 <_printf_i+0xe8>
 807dac0:	881d      	ldrh	r5, [r3, #0]
 807dac2:	2f6f      	cmp	r7, #111	; 0x6f
 807dac4:	4853      	ldr	r0, [pc, #332]	; (807dc14 <_printf_i+0x244>)
 807dac6:	bf0c      	ite	eq
 807dac8:	2308      	moveq	r3, #8
 807daca:	230a      	movne	r3, #10
 807dacc:	2100      	movs	r1, #0
 807dace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 807dad2:	6866      	ldr	r6, [r4, #4]
 807dad4:	2e00      	cmp	r6, #0
 807dad6:	60a6      	str	r6, [r4, #8]
 807dad8:	bfa2      	ittt	ge
 807dada:	6821      	ldrge	r1, [r4, #0]
 807dadc:	f021 0104 	bicge.w	r1, r1, #4
 807dae0:	6021      	strge	r1, [r4, #0]
 807dae2:	b90d      	cbnz	r5, 807dae8 <_printf_i+0x118>
 807dae4:	2e00      	cmp	r6, #0
 807dae6:	d04d      	beq.n	807db84 <_printf_i+0x1b4>
 807dae8:	4616      	mov	r6, r2
 807daea:	fbb5 f1f3 	udiv	r1, r5, r3
 807daee:	fb03 5711 	mls	r7, r3, r1, r5
 807daf2:	5dc7      	ldrb	r7, [r0, r7]
 807daf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 807daf8:	462f      	mov	r7, r5
 807dafa:	460d      	mov	r5, r1
 807dafc:	42bb      	cmp	r3, r7
 807dafe:	d9f4      	bls.n	807daea <_printf_i+0x11a>
 807db00:	2b08      	cmp	r3, #8
 807db02:	d10b      	bne.n	807db1c <_printf_i+0x14c>
 807db04:	6823      	ldr	r3, [r4, #0]
 807db06:	07df      	lsls	r7, r3, #31
 807db08:	d508      	bpl.n	807db1c <_printf_i+0x14c>
 807db0a:	6923      	ldr	r3, [r4, #16]
 807db0c:	6861      	ldr	r1, [r4, #4]
 807db0e:	4299      	cmp	r1, r3
 807db10:	bfde      	ittt	le
 807db12:	2330      	movle	r3, #48	; 0x30
 807db14:	f806 3c01 	strble.w	r3, [r6, #-1]
 807db18:	f106 36ff 	addle.w	r6, r6, #4294967295
 807db1c:	1b92      	subs	r2, r2, r6
 807db1e:	6122      	str	r2, [r4, #16]
 807db20:	464b      	mov	r3, r9
 807db22:	aa03      	add	r2, sp, #12
 807db24:	4621      	mov	r1, r4
 807db26:	4640      	mov	r0, r8
 807db28:	f8cd a000 	str.w	sl, [sp]
 807db2c:	f7ff fee0 	bl	807d8f0 <_printf_common>
 807db30:	3001      	adds	r0, #1
 807db32:	d14c      	bne.n	807dbce <_printf_i+0x1fe>
 807db34:	f04f 30ff 	mov.w	r0, #4294967295
 807db38:	b004      	add	sp, #16
 807db3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807db3e:	4835      	ldr	r0, [pc, #212]	; (807dc14 <_printf_i+0x244>)
 807db40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 807db44:	6823      	ldr	r3, [r4, #0]
 807db46:	680e      	ldr	r6, [r1, #0]
 807db48:	061f      	lsls	r7, r3, #24
 807db4a:	f856 5b04 	ldr.w	r5, [r6], #4
 807db4e:	600e      	str	r6, [r1, #0]
 807db50:	d514      	bpl.n	807db7c <_printf_i+0x1ac>
 807db52:	07d9      	lsls	r1, r3, #31
 807db54:	bf44      	itt	mi
 807db56:	f043 0320 	orrmi.w	r3, r3, #32
 807db5a:	6023      	strmi	r3, [r4, #0]
 807db5c:	b91d      	cbnz	r5, 807db66 <_printf_i+0x196>
 807db5e:	6823      	ldr	r3, [r4, #0]
 807db60:	f023 0320 	bic.w	r3, r3, #32
 807db64:	6023      	str	r3, [r4, #0]
 807db66:	2310      	movs	r3, #16
 807db68:	e7b0      	b.n	807dacc <_printf_i+0xfc>
 807db6a:	6823      	ldr	r3, [r4, #0]
 807db6c:	f043 0320 	orr.w	r3, r3, #32
 807db70:	6023      	str	r3, [r4, #0]
 807db72:	2378      	movs	r3, #120	; 0x78
 807db74:	4828      	ldr	r0, [pc, #160]	; (807dc18 <_printf_i+0x248>)
 807db76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 807db7a:	e7e3      	b.n	807db44 <_printf_i+0x174>
 807db7c:	065e      	lsls	r6, r3, #25
 807db7e:	bf48      	it	mi
 807db80:	b2ad      	uxthmi	r5, r5
 807db82:	e7e6      	b.n	807db52 <_printf_i+0x182>
 807db84:	4616      	mov	r6, r2
 807db86:	e7bb      	b.n	807db00 <_printf_i+0x130>
 807db88:	680b      	ldr	r3, [r1, #0]
 807db8a:	6826      	ldr	r6, [r4, #0]
 807db8c:	1d1d      	adds	r5, r3, #4
 807db8e:	6960      	ldr	r0, [r4, #20]
 807db90:	600d      	str	r5, [r1, #0]
 807db92:	0635      	lsls	r5, r6, #24
 807db94:	681b      	ldr	r3, [r3, #0]
 807db96:	d501      	bpl.n	807db9c <_printf_i+0x1cc>
 807db98:	6018      	str	r0, [r3, #0]
 807db9a:	e002      	b.n	807dba2 <_printf_i+0x1d2>
 807db9c:	0671      	lsls	r1, r6, #25
 807db9e:	d5fb      	bpl.n	807db98 <_printf_i+0x1c8>
 807dba0:	8018      	strh	r0, [r3, #0]
 807dba2:	2300      	movs	r3, #0
 807dba4:	4616      	mov	r6, r2
 807dba6:	6123      	str	r3, [r4, #16]
 807dba8:	e7ba      	b.n	807db20 <_printf_i+0x150>
 807dbaa:	680b      	ldr	r3, [r1, #0]
 807dbac:	1d1a      	adds	r2, r3, #4
 807dbae:	600a      	str	r2, [r1, #0]
 807dbb0:	2100      	movs	r1, #0
 807dbb2:	681e      	ldr	r6, [r3, #0]
 807dbb4:	6862      	ldr	r2, [r4, #4]
 807dbb6:	4630      	mov	r0, r6
 807dbb8:	f000 f8da 	bl	807dd70 <memchr>
 807dbbc:	b108      	cbz	r0, 807dbc2 <_printf_i+0x1f2>
 807dbbe:	1b80      	subs	r0, r0, r6
 807dbc0:	6060      	str	r0, [r4, #4]
 807dbc2:	6863      	ldr	r3, [r4, #4]
 807dbc4:	6123      	str	r3, [r4, #16]
 807dbc6:	2300      	movs	r3, #0
 807dbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 807dbcc:	e7a8      	b.n	807db20 <_printf_i+0x150>
 807dbce:	6923      	ldr	r3, [r4, #16]
 807dbd0:	4632      	mov	r2, r6
 807dbd2:	4649      	mov	r1, r9
 807dbd4:	4640      	mov	r0, r8
 807dbd6:	47d0      	blx	sl
 807dbd8:	3001      	adds	r0, #1
 807dbda:	d0ab      	beq.n	807db34 <_printf_i+0x164>
 807dbdc:	6823      	ldr	r3, [r4, #0]
 807dbde:	079b      	lsls	r3, r3, #30
 807dbe0:	d413      	bmi.n	807dc0a <_printf_i+0x23a>
 807dbe2:	68e0      	ldr	r0, [r4, #12]
 807dbe4:	9b03      	ldr	r3, [sp, #12]
 807dbe6:	4298      	cmp	r0, r3
 807dbe8:	bfb8      	it	lt
 807dbea:	4618      	movlt	r0, r3
 807dbec:	e7a4      	b.n	807db38 <_printf_i+0x168>
 807dbee:	2301      	movs	r3, #1
 807dbf0:	4632      	mov	r2, r6
 807dbf2:	4649      	mov	r1, r9
 807dbf4:	4640      	mov	r0, r8
 807dbf6:	47d0      	blx	sl
 807dbf8:	3001      	adds	r0, #1
 807dbfa:	d09b      	beq.n	807db34 <_printf_i+0x164>
 807dbfc:	3501      	adds	r5, #1
 807dbfe:	68e3      	ldr	r3, [r4, #12]
 807dc00:	9903      	ldr	r1, [sp, #12]
 807dc02:	1a5b      	subs	r3, r3, r1
 807dc04:	42ab      	cmp	r3, r5
 807dc06:	dcf2      	bgt.n	807dbee <_printf_i+0x21e>
 807dc08:	e7eb      	b.n	807dbe2 <_printf_i+0x212>
 807dc0a:	2500      	movs	r5, #0
 807dc0c:	f104 0619 	add.w	r6, r4, #25
 807dc10:	e7f5      	b.n	807dbfe <_printf_i+0x22e>
 807dc12:	bf00      	nop
 807dc14:	0807e60d 	.word	0x0807e60d
 807dc18:	0807e61e 	.word	0x0807e61e

0807dc1c <_sbrk_r>:
 807dc1c:	b538      	push	{r3, r4, r5, lr}
 807dc1e:	2300      	movs	r3, #0
 807dc20:	4d05      	ldr	r5, [pc, #20]	; (807dc38 <_sbrk_r+0x1c>)
 807dc22:	4604      	mov	r4, r0
 807dc24:	4608      	mov	r0, r1
 807dc26:	602b      	str	r3, [r5, #0]
 807dc28:	f000 fa84 	bl	807e134 <_sbrk>
 807dc2c:	1c43      	adds	r3, r0, #1
 807dc2e:	d102      	bne.n	807dc36 <_sbrk_r+0x1a>
 807dc30:	682b      	ldr	r3, [r5, #0]
 807dc32:	b103      	cbz	r3, 807dc36 <_sbrk_r+0x1a>
 807dc34:	6023      	str	r3, [r4, #0]
 807dc36:	bd38      	pop	{r3, r4, r5, pc}
 807dc38:	20000600 	.word	0x20000600

0807dc3c <__sread>:
 807dc3c:	b510      	push	{r4, lr}
 807dc3e:	460c      	mov	r4, r1
 807dc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 807dc44:	f000 f8ae 	bl	807dda4 <_read_r>
 807dc48:	2800      	cmp	r0, #0
 807dc4a:	bfab      	itete	ge
 807dc4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 807dc4e:	89a3      	ldrhlt	r3, [r4, #12]
 807dc50:	181b      	addge	r3, r3, r0
 807dc52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 807dc56:	bfac      	ite	ge
 807dc58:	6563      	strge	r3, [r4, #84]	; 0x54
 807dc5a:	81a3      	strhlt	r3, [r4, #12]
 807dc5c:	bd10      	pop	{r4, pc}

0807dc5e <__swrite>:
 807dc5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 807dc62:	461f      	mov	r7, r3
 807dc64:	898b      	ldrh	r3, [r1, #12]
 807dc66:	4605      	mov	r5, r0
 807dc68:	460c      	mov	r4, r1
 807dc6a:	05db      	lsls	r3, r3, #23
 807dc6c:	4616      	mov	r6, r2
 807dc6e:	d505      	bpl.n	807dc7c <__swrite+0x1e>
 807dc70:	2302      	movs	r3, #2
 807dc72:	2200      	movs	r2, #0
 807dc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 807dc78:	f000 f868 	bl	807dd4c <_lseek_r>
 807dc7c:	89a3      	ldrh	r3, [r4, #12]
 807dc7e:	4632      	mov	r2, r6
 807dc80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 807dc84:	4628      	mov	r0, r5
 807dc86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 807dc8a:	81a3      	strh	r3, [r4, #12]
 807dc8c:	463b      	mov	r3, r7
 807dc8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 807dc92:	f000 b817 	b.w	807dcc4 <_write_r>

0807dc96 <__sseek>:
 807dc96:	b510      	push	{r4, lr}
 807dc98:	460c      	mov	r4, r1
 807dc9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 807dc9e:	f000 f855 	bl	807dd4c <_lseek_r>
 807dca2:	1c43      	adds	r3, r0, #1
 807dca4:	89a3      	ldrh	r3, [r4, #12]
 807dca6:	bf15      	itete	ne
 807dca8:	6560      	strne	r0, [r4, #84]	; 0x54
 807dcaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 807dcae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 807dcb2:	81a3      	strheq	r3, [r4, #12]
 807dcb4:	bf18      	it	ne
 807dcb6:	81a3      	strhne	r3, [r4, #12]
 807dcb8:	bd10      	pop	{r4, pc}

0807dcba <__sclose>:
 807dcba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 807dcbe:	f000 b813 	b.w	807dce8 <_close_r>
	...

0807dcc4 <_write_r>:
 807dcc4:	b538      	push	{r3, r4, r5, lr}
 807dcc6:	4604      	mov	r4, r0
 807dcc8:	4d06      	ldr	r5, [pc, #24]	; (807dce4 <_write_r+0x20>)
 807dcca:	4608      	mov	r0, r1
 807dccc:	4611      	mov	r1, r2
 807dcce:	2200      	movs	r2, #0
 807dcd0:	602a      	str	r2, [r5, #0]
 807dcd2:	461a      	mov	r2, r3
 807dcd4:	f7fd feaa 	bl	807ba2c <_write>
 807dcd8:	1c43      	adds	r3, r0, #1
 807dcda:	d102      	bne.n	807dce2 <_write_r+0x1e>
 807dcdc:	682b      	ldr	r3, [r5, #0]
 807dcde:	b103      	cbz	r3, 807dce2 <_write_r+0x1e>
 807dce0:	6023      	str	r3, [r4, #0]
 807dce2:	bd38      	pop	{r3, r4, r5, pc}
 807dce4:	20000600 	.word	0x20000600

0807dce8 <_close_r>:
 807dce8:	b538      	push	{r3, r4, r5, lr}
 807dcea:	2300      	movs	r3, #0
 807dcec:	4d05      	ldr	r5, [pc, #20]	; (807dd04 <_close_r+0x1c>)
 807dcee:	4604      	mov	r4, r0
 807dcf0:	4608      	mov	r0, r1
 807dcf2:	602b      	str	r3, [r5, #0]
 807dcf4:	f000 f9f6 	bl	807e0e4 <_close>
 807dcf8:	1c43      	adds	r3, r0, #1
 807dcfa:	d102      	bne.n	807dd02 <_close_r+0x1a>
 807dcfc:	682b      	ldr	r3, [r5, #0]
 807dcfe:	b103      	cbz	r3, 807dd02 <_close_r+0x1a>
 807dd00:	6023      	str	r3, [r4, #0]
 807dd02:	bd38      	pop	{r3, r4, r5, pc}
 807dd04:	20000600 	.word	0x20000600

0807dd08 <_fstat_r>:
 807dd08:	b538      	push	{r3, r4, r5, lr}
 807dd0a:	2300      	movs	r3, #0
 807dd0c:	4d06      	ldr	r5, [pc, #24]	; (807dd28 <_fstat_r+0x20>)
 807dd0e:	4604      	mov	r4, r0
 807dd10:	4608      	mov	r0, r1
 807dd12:	4611      	mov	r1, r2
 807dd14:	602b      	str	r3, [r5, #0]
 807dd16:	f000 f9ed 	bl	807e0f4 <_fstat>
 807dd1a:	1c43      	adds	r3, r0, #1
 807dd1c:	d102      	bne.n	807dd24 <_fstat_r+0x1c>
 807dd1e:	682b      	ldr	r3, [r5, #0]
 807dd20:	b103      	cbz	r3, 807dd24 <_fstat_r+0x1c>
 807dd22:	6023      	str	r3, [r4, #0]
 807dd24:	bd38      	pop	{r3, r4, r5, pc}
 807dd26:	bf00      	nop
 807dd28:	20000600 	.word	0x20000600

0807dd2c <_isatty_r>:
 807dd2c:	b538      	push	{r3, r4, r5, lr}
 807dd2e:	2300      	movs	r3, #0
 807dd30:	4d05      	ldr	r5, [pc, #20]	; (807dd48 <_isatty_r+0x1c>)
 807dd32:	4604      	mov	r4, r0
 807dd34:	4608      	mov	r0, r1
 807dd36:	602b      	str	r3, [r5, #0]
 807dd38:	f000 f9e4 	bl	807e104 <_isatty>
 807dd3c:	1c43      	adds	r3, r0, #1
 807dd3e:	d102      	bne.n	807dd46 <_isatty_r+0x1a>
 807dd40:	682b      	ldr	r3, [r5, #0]
 807dd42:	b103      	cbz	r3, 807dd46 <_isatty_r+0x1a>
 807dd44:	6023      	str	r3, [r4, #0]
 807dd46:	bd38      	pop	{r3, r4, r5, pc}
 807dd48:	20000600 	.word	0x20000600

0807dd4c <_lseek_r>:
 807dd4c:	b538      	push	{r3, r4, r5, lr}
 807dd4e:	4604      	mov	r4, r0
 807dd50:	4d06      	ldr	r5, [pc, #24]	; (807dd6c <_lseek_r+0x20>)
 807dd52:	4608      	mov	r0, r1
 807dd54:	4611      	mov	r1, r2
 807dd56:	2200      	movs	r2, #0
 807dd58:	602a      	str	r2, [r5, #0]
 807dd5a:	461a      	mov	r2, r3
 807dd5c:	f000 f9da 	bl	807e114 <_lseek>
 807dd60:	1c43      	adds	r3, r0, #1
 807dd62:	d102      	bne.n	807dd6a <_lseek_r+0x1e>
 807dd64:	682b      	ldr	r3, [r5, #0]
 807dd66:	b103      	cbz	r3, 807dd6a <_lseek_r+0x1e>
 807dd68:	6023      	str	r3, [r4, #0]
 807dd6a:	bd38      	pop	{r3, r4, r5, pc}
 807dd6c:	20000600 	.word	0x20000600

0807dd70 <memchr>:
 807dd70:	b2c9      	uxtb	r1, r1
 807dd72:	4402      	add	r2, r0
 807dd74:	b510      	push	{r4, lr}
 807dd76:	4290      	cmp	r0, r2
 807dd78:	4603      	mov	r3, r0
 807dd7a:	d101      	bne.n	807dd80 <memchr+0x10>
 807dd7c:	2300      	movs	r3, #0
 807dd7e:	e003      	b.n	807dd88 <memchr+0x18>
 807dd80:	781c      	ldrb	r4, [r3, #0]
 807dd82:	3001      	adds	r0, #1
 807dd84:	428c      	cmp	r4, r1
 807dd86:	d1f6      	bne.n	807dd76 <memchr+0x6>
 807dd88:	4618      	mov	r0, r3
 807dd8a:	bd10      	pop	{r4, pc}

0807dd8c <__malloc_lock>:
 807dd8c:	4801      	ldr	r0, [pc, #4]	; (807dd94 <__malloc_lock+0x8>)
 807dd8e:	f7ff bb3d 	b.w	807d40c <__retarget_lock_acquire_recursive>
 807dd92:	bf00      	nop
 807dd94:	200005f9 	.word	0x200005f9

0807dd98 <__malloc_unlock>:
 807dd98:	4801      	ldr	r0, [pc, #4]	; (807dda0 <__malloc_unlock+0x8>)
 807dd9a:	f7ff bb38 	b.w	807d40e <__retarget_lock_release_recursive>
 807dd9e:	bf00      	nop
 807dda0:	200005f9 	.word	0x200005f9

0807dda4 <_read_r>:
 807dda4:	b538      	push	{r3, r4, r5, lr}
 807dda6:	4604      	mov	r4, r0
 807dda8:	4d06      	ldr	r5, [pc, #24]	; (807ddc4 <_read_r+0x20>)
 807ddaa:	4608      	mov	r0, r1
 807ddac:	4611      	mov	r1, r2
 807ddae:	2200      	movs	r2, #0
 807ddb0:	602a      	str	r2, [r5, #0]
 807ddb2:	461a      	mov	r2, r3
 807ddb4:	f000 f9b6 	bl	807e124 <_read>
 807ddb8:	1c43      	adds	r3, r0, #1
 807ddba:	d102      	bne.n	807ddc2 <_read_r+0x1e>
 807ddbc:	682b      	ldr	r3, [r5, #0]
 807ddbe:	b103      	cbz	r3, 807ddc2 <_read_r+0x1e>
 807ddc0:	6023      	str	r3, [r4, #0]
 807ddc2:	bd38      	pop	{r3, r4, r5, pc}
 807ddc4:	20000600 	.word	0x20000600

0807ddc8 <__aeabi_uldivmod>:
 807ddc8:	b953      	cbnz	r3, 807dde0 <__aeabi_uldivmod+0x18>
 807ddca:	b94a      	cbnz	r2, 807dde0 <__aeabi_uldivmod+0x18>
 807ddcc:	2900      	cmp	r1, #0
 807ddce:	bf08      	it	eq
 807ddd0:	2800      	cmpeq	r0, #0
 807ddd2:	bf1c      	itt	ne
 807ddd4:	f04f 31ff 	movne.w	r1, #4294967295
 807ddd8:	f04f 30ff 	movne.w	r0, #4294967295
 807dddc:	f000 b980 	b.w	807e0e0 <__aeabi_idiv0>
 807dde0:	f1ad 0c08 	sub.w	ip, sp, #8
 807dde4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 807dde8:	f000 f806 	bl	807ddf8 <__udivmoddi4>
 807ddec:	f8dd e004 	ldr.w	lr, [sp, #4]
 807ddf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 807ddf4:	b004      	add	sp, #16
 807ddf6:	4770      	bx	lr

0807ddf8 <__udivmoddi4>:
 807ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 807ddfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 807ddfe:	4604      	mov	r4, r0
 807de00:	4688      	mov	r8, r1
 807de02:	2b00      	cmp	r3, #0
 807de04:	f040 8084 	bne.w	807df10 <__udivmoddi4+0x118>
 807de08:	428a      	cmp	r2, r1
 807de0a:	4617      	mov	r7, r2
 807de0c:	d943      	bls.n	807de96 <__udivmoddi4+0x9e>
 807de0e:	fab2 f282 	clz	r2, r2
 807de12:	b142      	cbz	r2, 807de26 <__udivmoddi4+0x2e>
 807de14:	f1c2 0020 	rsb	r0, r2, #32
 807de18:	4091      	lsls	r1, r2
 807de1a:	4097      	lsls	r7, r2
 807de1c:	fa24 f000 	lsr.w	r0, r4, r0
 807de20:	4094      	lsls	r4, r2
 807de22:	ea40 0801 	orr.w	r8, r0, r1
 807de26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 807de2a:	0c23      	lsrs	r3, r4, #16
 807de2c:	fa1f fe87 	uxth.w	lr, r7
 807de30:	fbb8 f6fc 	udiv	r6, r8, ip
 807de34:	fb0c 8116 	mls	r1, ip, r6, r8
 807de38:	fb06 f00e 	mul.w	r0, r6, lr
 807de3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 807de40:	4298      	cmp	r0, r3
 807de42:	d907      	bls.n	807de54 <__udivmoddi4+0x5c>
 807de44:	18fb      	adds	r3, r7, r3
 807de46:	f106 31ff 	add.w	r1, r6, #4294967295
 807de4a:	d202      	bcs.n	807de52 <__udivmoddi4+0x5a>
 807de4c:	4298      	cmp	r0, r3
 807de4e:	f200 8131 	bhi.w	807e0b4 <__udivmoddi4+0x2bc>
 807de52:	460e      	mov	r6, r1
 807de54:	1a19      	subs	r1, r3, r0
 807de56:	b2a3      	uxth	r3, r4
 807de58:	fbb1 f0fc 	udiv	r0, r1, ip
 807de5c:	fb0c 1110 	mls	r1, ip, r0, r1
 807de60:	fb00 fe0e 	mul.w	lr, r0, lr
 807de64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 807de68:	45a6      	cmp	lr, r4
 807de6a:	d907      	bls.n	807de7c <__udivmoddi4+0x84>
 807de6c:	193c      	adds	r4, r7, r4
 807de6e:	f100 33ff 	add.w	r3, r0, #4294967295
 807de72:	d202      	bcs.n	807de7a <__udivmoddi4+0x82>
 807de74:	45a6      	cmp	lr, r4
 807de76:	f200 811a 	bhi.w	807e0ae <__udivmoddi4+0x2b6>
 807de7a:	4618      	mov	r0, r3
 807de7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 807de80:	eba4 040e 	sub.w	r4, r4, lr
 807de84:	2600      	movs	r6, #0
 807de86:	b11d      	cbz	r5, 807de90 <__udivmoddi4+0x98>
 807de88:	40d4      	lsrs	r4, r2
 807de8a:	2300      	movs	r3, #0
 807de8c:	e9c5 4300 	strd	r4, r3, [r5]
 807de90:	4631      	mov	r1, r6
 807de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 807de96:	b902      	cbnz	r2, 807de9a <__udivmoddi4+0xa2>
 807de98:	deff      	udf	#255	; 0xff
 807de9a:	fab2 f282 	clz	r2, r2
 807de9e:	2a00      	cmp	r2, #0
 807dea0:	d152      	bne.n	807df48 <__udivmoddi4+0x150>
 807dea2:	1bcb      	subs	r3, r1, r7
 807dea4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 807dea8:	fa1f f887 	uxth.w	r8, r7
 807deac:	2601      	movs	r6, #1
 807deae:	0c21      	lsrs	r1, r4, #16
 807deb0:	fbb3 fcfe 	udiv	ip, r3, lr
 807deb4:	fb0e 301c 	mls	r0, lr, ip, r3
 807deb8:	fb08 f90c 	mul.w	r9, r8, ip
 807debc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 807dec0:	4589      	cmp	r9, r1
 807dec2:	d90b      	bls.n	807dedc <__udivmoddi4+0xe4>
 807dec4:	1879      	adds	r1, r7, r1
 807dec6:	f10c 33ff 	add.w	r3, ip, #4294967295
 807deca:	bf2c      	ite	cs
 807decc:	2001      	movcs	r0, #1
 807dece:	2000      	movcc	r0, #0
 807ded0:	4589      	cmp	r9, r1
 807ded2:	d902      	bls.n	807deda <__udivmoddi4+0xe2>
 807ded4:	2800      	cmp	r0, #0
 807ded6:	f000 80f0 	beq.w	807e0ba <__udivmoddi4+0x2c2>
 807deda:	469c      	mov	ip, r3
 807dedc:	eba1 0109 	sub.w	r1, r1, r9
 807dee0:	b2a3      	uxth	r3, r4
 807dee2:	fbb1 f0fe 	udiv	r0, r1, lr
 807dee6:	fb0e 1110 	mls	r1, lr, r0, r1
 807deea:	fb08 f800 	mul.w	r8, r8, r0
 807deee:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 807def2:	45a0      	cmp	r8, r4
 807def4:	d907      	bls.n	807df06 <__udivmoddi4+0x10e>
 807def6:	193c      	adds	r4, r7, r4
 807def8:	f100 33ff 	add.w	r3, r0, #4294967295
 807defc:	d202      	bcs.n	807df04 <__udivmoddi4+0x10c>
 807defe:	45a0      	cmp	r8, r4
 807df00:	f200 80d2 	bhi.w	807e0a8 <__udivmoddi4+0x2b0>
 807df04:	4618      	mov	r0, r3
 807df06:	eba4 0408 	sub.w	r4, r4, r8
 807df0a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 807df0e:	e7ba      	b.n	807de86 <__udivmoddi4+0x8e>
 807df10:	428b      	cmp	r3, r1
 807df12:	d909      	bls.n	807df28 <__udivmoddi4+0x130>
 807df14:	2d00      	cmp	r5, #0
 807df16:	f000 80be 	beq.w	807e096 <__udivmoddi4+0x29e>
 807df1a:	2600      	movs	r6, #0
 807df1c:	e9c5 0100 	strd	r0, r1, [r5]
 807df20:	4630      	mov	r0, r6
 807df22:	4631      	mov	r1, r6
 807df24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 807df28:	fab3 f683 	clz	r6, r3
 807df2c:	2e00      	cmp	r6, #0
 807df2e:	d14d      	bne.n	807dfcc <__udivmoddi4+0x1d4>
 807df30:	428b      	cmp	r3, r1
 807df32:	f0c0 80b3 	bcc.w	807e09c <__udivmoddi4+0x2a4>
 807df36:	4282      	cmp	r2, r0
 807df38:	f240 80b0 	bls.w	807e09c <__udivmoddi4+0x2a4>
 807df3c:	4630      	mov	r0, r6
 807df3e:	2d00      	cmp	r5, #0
 807df40:	d0a6      	beq.n	807de90 <__udivmoddi4+0x98>
 807df42:	e9c5 4800 	strd	r4, r8, [r5]
 807df46:	e7a3      	b.n	807de90 <__udivmoddi4+0x98>
 807df48:	4097      	lsls	r7, r2
 807df4a:	f1c2 0320 	rsb	r3, r2, #32
 807df4e:	fa01 f002 	lsl.w	r0, r1, r2
 807df52:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 807df56:	40d9      	lsrs	r1, r3
 807df58:	fa24 f303 	lsr.w	r3, r4, r3
 807df5c:	fa1f f887 	uxth.w	r8, r7
 807df60:	4094      	lsls	r4, r2
 807df62:	4303      	orrs	r3, r0
 807df64:	fbb1 f0fe 	udiv	r0, r1, lr
 807df68:	0c1e      	lsrs	r6, r3, #16
 807df6a:	fb0e 1110 	mls	r1, lr, r0, r1
 807df6e:	fb00 fc08 	mul.w	ip, r0, r8
 807df72:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 807df76:	458c      	cmp	ip, r1
 807df78:	d90e      	bls.n	807df98 <__udivmoddi4+0x1a0>
 807df7a:	1879      	adds	r1, r7, r1
 807df7c:	f100 36ff 	add.w	r6, r0, #4294967295
 807df80:	bf2c      	ite	cs
 807df82:	f04f 0901 	movcs.w	r9, #1
 807df86:	f04f 0900 	movcc.w	r9, #0
 807df8a:	458c      	cmp	ip, r1
 807df8c:	d903      	bls.n	807df96 <__udivmoddi4+0x19e>
 807df8e:	f1b9 0f00 	cmp.w	r9, #0
 807df92:	f000 8096 	beq.w	807e0c2 <__udivmoddi4+0x2ca>
 807df96:	4630      	mov	r0, r6
 807df98:	eba1 010c 	sub.w	r1, r1, ip
 807df9c:	b29b      	uxth	r3, r3
 807df9e:	fbb1 f6fe 	udiv	r6, r1, lr
 807dfa2:	fb0e 1116 	mls	r1, lr, r6, r1
 807dfa6:	fb06 fc08 	mul.w	ip, r6, r8
 807dfaa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 807dfae:	458c      	cmp	ip, r1
 807dfb0:	d907      	bls.n	807dfc2 <__udivmoddi4+0x1ca>
 807dfb2:	1879      	adds	r1, r7, r1
 807dfb4:	f106 33ff 	add.w	r3, r6, #4294967295
 807dfb8:	d202      	bcs.n	807dfc0 <__udivmoddi4+0x1c8>
 807dfba:	458c      	cmp	ip, r1
 807dfbc:	f200 8088 	bhi.w	807e0d0 <__udivmoddi4+0x2d8>
 807dfc0:	461e      	mov	r6, r3
 807dfc2:	eba1 030c 	sub.w	r3, r1, ip
 807dfc6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 807dfca:	e770      	b.n	807deae <__udivmoddi4+0xb6>
 807dfcc:	f1c6 0720 	rsb	r7, r6, #32
 807dfd0:	fa03 f406 	lsl.w	r4, r3, r6
 807dfd4:	fa02 fc06 	lsl.w	ip, r2, r6
 807dfd8:	fa01 fe06 	lsl.w	lr, r1, r6
 807dfdc:	40fa      	lsrs	r2, r7
 807dfde:	fa20 f807 	lsr.w	r8, r0, r7
 807dfe2:	40f9      	lsrs	r1, r7
 807dfe4:	fa00 f306 	lsl.w	r3, r0, r6
 807dfe8:	4322      	orrs	r2, r4
 807dfea:	ea48 040e 	orr.w	r4, r8, lr
 807dfee:	ea4f 4812 	mov.w	r8, r2, lsr #16
 807dff2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 807dff6:	fa1f f982 	uxth.w	r9, r2
 807dffa:	fbb1 faf8 	udiv	sl, r1, r8
 807dffe:	fb08 111a 	mls	r1, r8, sl, r1
 807e002:	fb0a f009 	mul.w	r0, sl, r9
 807e006:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 807e00a:	4570      	cmp	r0, lr
 807e00c:	d90e      	bls.n	807e02c <__udivmoddi4+0x234>
 807e00e:	eb12 0e0e 	adds.w	lr, r2, lr
 807e012:	f10a 31ff 	add.w	r1, sl, #4294967295
 807e016:	bf2c      	ite	cs
 807e018:	f04f 0b01 	movcs.w	fp, #1
 807e01c:	f04f 0b00 	movcc.w	fp, #0
 807e020:	4570      	cmp	r0, lr
 807e022:	d902      	bls.n	807e02a <__udivmoddi4+0x232>
 807e024:	f1bb 0f00 	cmp.w	fp, #0
 807e028:	d04e      	beq.n	807e0c8 <__udivmoddi4+0x2d0>
 807e02a:	468a      	mov	sl, r1
 807e02c:	ebae 0e00 	sub.w	lr, lr, r0
 807e030:	b2a4      	uxth	r4, r4
 807e032:	fbbe f0f8 	udiv	r0, lr, r8
 807e036:	fb08 ee10 	mls	lr, r8, r0, lr
 807e03a:	fb00 f909 	mul.w	r9, r0, r9
 807e03e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 807e042:	45f1      	cmp	r9, lr
 807e044:	d907      	bls.n	807e056 <__udivmoddi4+0x25e>
 807e046:	eb12 0e0e 	adds.w	lr, r2, lr
 807e04a:	f100 31ff 	add.w	r1, r0, #4294967295
 807e04e:	d201      	bcs.n	807e054 <__udivmoddi4+0x25c>
 807e050:	45f1      	cmp	r9, lr
 807e052:	d840      	bhi.n	807e0d6 <__udivmoddi4+0x2de>
 807e054:	4608      	mov	r0, r1
 807e056:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 807e05a:	ebae 0e09 	sub.w	lr, lr, r9
 807e05e:	fba0 890c 	umull	r8, r9, r0, ip
 807e062:	45ce      	cmp	lr, r9
 807e064:	4641      	mov	r1, r8
 807e066:	464c      	mov	r4, r9
 807e068:	d302      	bcc.n	807e070 <__udivmoddi4+0x278>
 807e06a:	d106      	bne.n	807e07a <__udivmoddi4+0x282>
 807e06c:	4543      	cmp	r3, r8
 807e06e:	d204      	bcs.n	807e07a <__udivmoddi4+0x282>
 807e070:	3801      	subs	r0, #1
 807e072:	ebb8 010c 	subs.w	r1, r8, ip
 807e076:	eb69 0402 	sbc.w	r4, r9, r2
 807e07a:	b37d      	cbz	r5, 807e0dc <__udivmoddi4+0x2e4>
 807e07c:	1a5a      	subs	r2, r3, r1
 807e07e:	eb6e 0e04 	sbc.w	lr, lr, r4
 807e082:	40f2      	lsrs	r2, r6
 807e084:	fa0e f707 	lsl.w	r7, lr, r7
 807e088:	fa2e f306 	lsr.w	r3, lr, r6
 807e08c:	2600      	movs	r6, #0
 807e08e:	4317      	orrs	r7, r2
 807e090:	e9c5 7300 	strd	r7, r3, [r5]
 807e094:	e6fc      	b.n	807de90 <__udivmoddi4+0x98>
 807e096:	462e      	mov	r6, r5
 807e098:	4628      	mov	r0, r5
 807e09a:	e6f9      	b.n	807de90 <__udivmoddi4+0x98>
 807e09c:	1a84      	subs	r4, r0, r2
 807e09e:	eb61 0103 	sbc.w	r1, r1, r3
 807e0a2:	2001      	movs	r0, #1
 807e0a4:	4688      	mov	r8, r1
 807e0a6:	e74a      	b.n	807df3e <__udivmoddi4+0x146>
 807e0a8:	3802      	subs	r0, #2
 807e0aa:	443c      	add	r4, r7
 807e0ac:	e72b      	b.n	807df06 <__udivmoddi4+0x10e>
 807e0ae:	3802      	subs	r0, #2
 807e0b0:	443c      	add	r4, r7
 807e0b2:	e6e3      	b.n	807de7c <__udivmoddi4+0x84>
 807e0b4:	3e02      	subs	r6, #2
 807e0b6:	443b      	add	r3, r7
 807e0b8:	e6cc      	b.n	807de54 <__udivmoddi4+0x5c>
 807e0ba:	f1ac 0c02 	sub.w	ip, ip, #2
 807e0be:	4439      	add	r1, r7
 807e0c0:	e70c      	b.n	807dedc <__udivmoddi4+0xe4>
 807e0c2:	3802      	subs	r0, #2
 807e0c4:	4439      	add	r1, r7
 807e0c6:	e767      	b.n	807df98 <__udivmoddi4+0x1a0>
 807e0c8:	f1aa 0a02 	sub.w	sl, sl, #2
 807e0cc:	4496      	add	lr, r2
 807e0ce:	e7ad      	b.n	807e02c <__udivmoddi4+0x234>
 807e0d0:	3e02      	subs	r6, #2
 807e0d2:	4439      	add	r1, r7
 807e0d4:	e775      	b.n	807dfc2 <__udivmoddi4+0x1ca>
 807e0d6:	3802      	subs	r0, #2
 807e0d8:	4496      	add	lr, r2
 807e0da:	e7bc      	b.n	807e056 <__udivmoddi4+0x25e>
 807e0dc:	462e      	mov	r6, r5
 807e0de:	e6d7      	b.n	807de90 <__udivmoddi4+0x98>

0807e0e0 <__aeabi_idiv0>:
 807e0e0:	4770      	bx	lr
 807e0e2:	bf00      	nop

0807e0e4 <_close>:
 807e0e4:	4b02      	ldr	r3, [pc, #8]	; (807e0f0 <_close+0xc>)
 807e0e6:	2258      	movs	r2, #88	; 0x58
 807e0e8:	f04f 30ff 	mov.w	r0, #4294967295
 807e0ec:	601a      	str	r2, [r3, #0]
 807e0ee:	4770      	bx	lr
 807e0f0:	20000600 	.word	0x20000600

0807e0f4 <_fstat>:
 807e0f4:	4b02      	ldr	r3, [pc, #8]	; (807e100 <_fstat+0xc>)
 807e0f6:	2258      	movs	r2, #88	; 0x58
 807e0f8:	f04f 30ff 	mov.w	r0, #4294967295
 807e0fc:	601a      	str	r2, [r3, #0]
 807e0fe:	4770      	bx	lr
 807e100:	20000600 	.word	0x20000600

0807e104 <_isatty>:
 807e104:	4b02      	ldr	r3, [pc, #8]	; (807e110 <_isatty+0xc>)
 807e106:	2258      	movs	r2, #88	; 0x58
 807e108:	2000      	movs	r0, #0
 807e10a:	601a      	str	r2, [r3, #0]
 807e10c:	4770      	bx	lr
 807e10e:	bf00      	nop
 807e110:	20000600 	.word	0x20000600

0807e114 <_lseek>:
 807e114:	4b02      	ldr	r3, [pc, #8]	; (807e120 <_lseek+0xc>)
 807e116:	2258      	movs	r2, #88	; 0x58
 807e118:	f04f 30ff 	mov.w	r0, #4294967295
 807e11c:	601a      	str	r2, [r3, #0]
 807e11e:	4770      	bx	lr
 807e120:	20000600 	.word	0x20000600

0807e124 <_read>:
 807e124:	4b02      	ldr	r3, [pc, #8]	; (807e130 <_read+0xc>)
 807e126:	2258      	movs	r2, #88	; 0x58
 807e128:	f04f 30ff 	mov.w	r0, #4294967295
 807e12c:	601a      	str	r2, [r3, #0]
 807e12e:	4770      	bx	lr
 807e130:	20000600 	.word	0x20000600

0807e134 <_sbrk>:
 807e134:	4b04      	ldr	r3, [pc, #16]	; (807e148 <_sbrk+0x14>)
 807e136:	4602      	mov	r2, r0
 807e138:	6819      	ldr	r1, [r3, #0]
 807e13a:	b909      	cbnz	r1, 807e140 <_sbrk+0xc>
 807e13c:	4903      	ldr	r1, [pc, #12]	; (807e14c <_sbrk+0x18>)
 807e13e:	6019      	str	r1, [r3, #0]
 807e140:	6818      	ldr	r0, [r3, #0]
 807e142:	4402      	add	r2, r0
 807e144:	601a      	str	r2, [r3, #0]
 807e146:	4770      	bx	lr
 807e148:	200005b0 	.word	0x200005b0
 807e14c:	20000e20 	.word	0x20000e20

0807e150 <_exit>:
 807e150:	e7fe      	b.n	807e150 <_exit>
	...

0807e154 <_init>:
 807e154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807e156:	bf00      	nop
 807e158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807e15a:	bc08      	pop	{r3}
 807e15c:	469e      	mov	lr, r3
 807e15e:	4770      	bx	lr

0807e160 <_fini>:
 807e160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807e162:	bf00      	nop
 807e164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807e166:	bc08      	pop	{r3}
 807e168:	469e      	mov	lr, r3
 807e16a:	4770      	bx	lr
 807e16c:	0000      	movs	r0, r0
	...

0807e170 <__SECURE_Flash_EraseSector_veneer>:
 807e170:	b401      	push	{r0}
 807e172:	4802      	ldr	r0, [pc, #8]	; (807e17c <__SECURE_Flash_EraseSector_veneer+0xc>)
 807e174:	4684      	mov	ip, r0
 807e176:	bc01      	pop	{r0}
 807e178:	4760      	bx	ip
 807e17a:	bf00      	nop
 807e17c:	0c07af09 	.word	0x0c07af09

0807e180 <__SECURE_Flash_ProgramData_veneer>:
 807e180:	b401      	push	{r0}
 807e182:	4802      	ldr	r0, [pc, #8]	; (807e18c <__SECURE_Flash_ProgramData_veneer+0xc>)
 807e184:	4684      	mov	ip, r0
 807e186:	bc01      	pop	{r0}
 807e188:	4760      	bx	ip
 807e18a:	bf00      	nop
 807e18c:	0c07af01 	.word	0x0c07af01
 807e190:	3d3d0a0d 	.word	0x3d3d0a0d
 807e194:	3d3d3d3d 	.word	0x3d3d3d3d
 807e198:	3d3d3d3d 	.word	0x3d3d3d3d
 807e19c:	3d3d3d3d 	.word	0x3d3d3d3d
 807e1a0:	4e203d3d 	.word	0x4e203d3d
 807e1a4:	46207765 	.word	0x46207765
 807e1a8:	6f442077 	.word	0x6f442077
 807e1ac:	6f6c6e77 	.word	0x6f6c6e77
 807e1b0:	3d206461 	.word	0x3d206461
 807e1b4:	3d3d3d3d 	.word	0x3d3d3d3d
 807e1b8:	3d3d3d3d 	.word	0x3d3d3d3d
 807e1bc:	3d3d3d3d 	.word	0x3d3d3d3d
 807e1c0:	3d3d3d3d 	.word	0x3d3d3d3d
 807e1c4:	3d3d3d3d 	.word	0x3d3d3d3d
 807e1c8:	3d3d3d3d 	.word	0x3d3d3d3d
 807e1cc:	20000a0d 	.word	0x20000a0d
 807e1d0:	73655220 	.word	0x73655220
 807e1d4:	74207465 	.word	0x74207465
 807e1d8:	7274206f 	.word	0x7274206f
 807e1dc:	65676769 	.word	0x65676769
 807e1e0:	6e492072 	.word	0x6e492072
 807e1e4:	6c617473 	.word	0x6c617473
 807e1e8:	6974616c 	.word	0x6974616c
 807e1ec:	2d206e6f 	.word	0x2d206e6f
 807e1f0:	2d2d2d2d 	.word	0x2d2d2d2d
 807e1f4:	2d2d2d2d 	.word	0x2d2d2d2d
 807e1f8:	2d2d2d2d 	.word	0x2d2d2d2d
 807e1fc:	2d2d2d2d 	.word	0x2d2d2d2d
 807e200:	2d2d2d2d 	.word	0x2d2d2d2d
 807e204:	2d2d2d2d 	.word	0x2d2d2d2d
 807e208:	0a0d3120 	.word	0x0a0d3120
 807e20c:	44202000 	.word	0x44202000
 807e210:	6c6e776f 	.word	0x6c6e776f
 807e214:	2064616f 	.word	0x2064616f
 807e218:	67616d49 	.word	0x67616d49
 807e21c:	2d2d2065 	.word	0x2d2d2065
 807e220:	2d2d2d2d 	.word	0x2d2d2d2d
 807e224:	2d2d2d2d 	.word	0x2d2d2d2d
 807e228:	2d2d2d2d 	.word	0x2d2d2d2d
 807e22c:	2d2d2d2d 	.word	0x2d2d2d2d
 807e230:	2d2d2d2d 	.word	0x2d2d2d2d
 807e234:	2d2d2d2d 	.word	0x2d2d2d2d
 807e238:	2d2d2d2d 	.word	0x2d2d2d2d
 807e23c:	2d2d2d2d 	.word	0x2d2d2d2d
 807e240:	2d2d2d2d 	.word	0x2d2d2d2d
 807e244:	32202d2d 	.word	0x32202d2d
 807e248:	20000a0d 	.word	0x20000a0d
 807e24c:	202d2d20 	.word	0x202d2d20
 807e250:	74736e49 	.word	0x74736e49
 807e254:	206c6c61 	.word	0x206c6c61
 807e258:	67616d69 	.word	0x67616d69
 807e25c:	203a2065 	.word	0x203a2065
 807e260:	6f626572 	.word	0x6f626572
 807e264:	0a0d746f 	.word	0x0a0d746f
 807e268:	776f4400 	.word	0x776f4400
 807e26c:	616f6c6e 	.word	0x616f6c6e
 807e270:	6d492064 	.word	0x6d492064
 807e274:	0d656761 	.word	0x0d656761
 807e278:	2d202000 	.word	0x2d202000
 807e27c:	7245202d 	.word	0x7245202d
 807e280:	6e697361 	.word	0x6e697361
 807e284:	6f642067 	.word	0x6f642067
 807e288:	6f6c6e77 	.word	0x6f6c6e77
 807e28c:	61206461 	.word	0x61206461
 807e290:	20616572 	.word	0x20616572
 807e294:	20000a0d 	.word	0x20000a0d
 807e298:	202d2d20 	.word	0x202d2d20
 807e29c:	646e6553 	.word	0x646e6553
 807e2a0:	72694620 	.word	0x72694620
 807e2a4:	7261776d 	.word	0x7261776d
 807e2a8:	0a0d2065 	.word	0x0a0d2065
 807e2ac:	2d202000 	.word	0x2d202000
 807e2b0:	2d2d202d 	.word	0x2d2d202d
 807e2b4:	6c694620 	.word	0x6c694620
 807e2b8:	54203e65 	.word	0x54203e65
 807e2bc:	736e6172 	.word	0x736e6172
 807e2c0:	3e726566 	.word	0x3e726566
 807e2c4:	4f4d5920 	.word	0x4f4d5920
 807e2c8:	3e4d4544 	.word	0x3e4d4544
 807e2cc:	6e655320 	.word	0x6e655320
 807e2d0:	00092064 	.word	0x00092064
 807e2d4:	2d2d2020 	.word	0x2d2d2020
 807e2d8:	202d2d20 	.word	0x202d2d20
 807e2dc:	676f7250 	.word	0x676f7250
 807e2e0:	6d6d6172 	.word	0x6d6d6172
 807e2e4:	20676e69 	.word	0x20676e69
 807e2e8:	706d6f43 	.word	0x706d6f43
 807e2ec:	6574656c 	.word	0x6574656c
 807e2f0:	75532064 	.word	0x75532064
 807e2f4:	73656363 	.word	0x73656363
 807e2f8:	6c756673 	.word	0x6c756673
 807e2fc:	0d21796c 	.word	0x0d21796c
 807e300:	2020000a 	.word	0x2020000a
 807e304:	2d202d2d 	.word	0x2d202d2d
 807e308:	7942202d 	.word	0x7942202d
 807e30c:	3a736574 	.word	0x3a736574
 807e310:	756c2520 	.word	0x756c2520
 807e314:	000a0a0d 	.word	0x000a0a0d
 807e318:	2d2d2020 	.word	0x2d2d2020
 807e31c:	616d4920 	.word	0x616d4920
 807e320:	63206567 	.word	0x63206567
 807e324:	6572726f 	.word	0x6572726f
 807e328:	796c7463 	.word	0x796c7463
 807e32c:	776f6420 	.word	0x776f6420
 807e330:	616f6c6e 	.word	0x616f6c6e
 807e334:	20646564 	.word	0x20646564
 807e338:	20000a0d 	.word	0x20000a0d
 807e33c:	202d2d20 	.word	0x202d2d20
 807e340:	21202d2d 	.word	0x21202d2d
 807e344:	6f624121 	.word	0x6f624121
 807e348:	64657472 	.word	0x64657472
 807e34c:	20796220 	.word	0x20796220
 807e350:	72657375 	.word	0x72657375
 807e354:	0a0d2121 	.word	0x0a0d2121
 807e358:	2d202000 	.word	0x2d202000
 807e35c:	2d2d202d 	.word	0x2d2d202d
 807e360:	45212120 	.word	0x45212120
 807e364:	726f7272 	.word	0x726f7272
 807e368:	72756420 	.word	0x72756420
 807e36c:	20676e69 	.word	0x20676e69
 807e370:	656c6966 	.word	0x656c6966
 807e374:	776f6420 	.word	0x776f6420
 807e378:	616f6c6e 	.word	0x616f6c6e
 807e37c:	0d212164 	.word	0x0d212164
 807e380:	6e49000a 	.word	0x6e49000a
 807e384:	696c6176 	.word	0x696c6176
 807e388:	754e2064 	.word	0x754e2064
 807e38c:	7265626d 	.word	0x7265626d
 807e390:	000d2120 	.word	0x000d2120

0807e394 <ARM_FLASH0_DEV_DATA>:
 807e394:	00000000 00000080 00001000 00000800     ................
 807e3a4:	00000008 000000ff                       ........

0807e3ac <TFM_Driver_FLASH0>:
	...
 807e3b4:	0807b8c9 00000000 00000000 00000000     ................
 807e3c4:	0807b979 0807b8d9 00000000 00000000     y...............
 807e3d4:	0807b8c1 3d3d0a0d 3d3d3d3d 3d3d3d3d     ......==========
 807e3e4:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
 807e3f4:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
 807e404:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
 807e414:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d0a0d00     ============...=
 807e424:	20202020 20202020 20202020 43282020                   (C
 807e434:	4f432029 49525950 20544847 30323032     ) COPYRIGHT 2020
 807e444:	4d545320 6f726369 63656c65 6e6f7274      STMicroelectron
 807e454:	20736369 20202020 20202020 20202020     ics             
 807e464:	20202020 0a0d003d 2020203d 20202020         =...=       
 807e474:	20202020 20202020 20202020 20202020                     
 807e484:	20202020 20202020 20202020 20202020                     
 807e494:	20202020 20202020 20202020 20202020                     
 807e4a4:	20202020 20202020 20202020 0d003d20                  =..
 807e4b4:	20203d0a 20202020 20202020 20202020     .=              
 807e4c4:	20202020 20202020 20202020 41434f4c                 LOCA
 807e4d4:	4f4c204c 52454441 20202020 20202020     L LOADER        
 807e4e4:	20202020 20202020 20202020 20202020                     
 807e4f4:	20202020 003d2020 000d0a0d                    =.....

0807e500 <MSIRangeTable>:
 807e500:	000186a0 00030d40 00061a80 000c3500     ....@........5..
 807e510:	000f4240 001e8480 003d0900 007a1200     @B........=...z.
 807e520:	00f42400 016e3600 01e84800 02dc6c00     .$...6n..H...l..
	...

0807e540 <AHBPrescTable>:
	...
 807e548:	04030201 09080706                       ........

0807e550 <APBPrescTable>:
 807e550:	00000000 04030201 65002e08 7365725f     ...........e_res
 807e560:	20746c75 7825203d 25202c20 000a756c     ult = %x , %lu..

0807e570 <CSWTCH.58>:
 807e570:	                                         ...

0807e573 <CSWTCH.59>:
 807e573:	10101000 10101004 10101002               .............

0807e580 <UARTPrescTable>:
 807e580:	00020001 00060004 000a0008 0010000c     ................
 807e590:	00400020 01000080                        .@.....

0807e598 <_global_impure_ptr>:
 807e598:	20000044                                D.. 

0807e59c <__sf_fake_stderr>:
	...

0807e5bc <__sf_fake_stdin>:
	...

0807e5dc <__sf_fake_stdout>:
	...
 807e5fc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 807e60c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 807e61c:	31300046 35343332 39383736 64636261     F.0123456789abcd
 807e62c:	00006665                                ef..

0807e630 <__EH_FRAME_BEGIN__>:
 807e630:	00000000                                ....
